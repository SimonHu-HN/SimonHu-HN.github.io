<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>(转载)2020.10.5-10.11一周安全知识动态</title>
      <link href="/2020/10/11/%5B%E8%BD%AC%5D2020.10.5-10.11%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/11/%5B%E8%BD%AC%5D2020.10.5-10.11%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-10-5-10-11一周安全知识动态"><a href="#2020-10-5-10-11一周安全知识动态" class="headerlink" title="2020.10.5-10.11一周安全知识动态"></a>2020.10.5-10.11一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•RIFT: F5 CVE-2020-5902 and Citrix CVE-2020-8193, CVE-2020-8195 and CVE-2020-8196 honeypot data release</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;research.nccgroup.com&#x2F;2020&#x2F;10&#x2F;09&#x2F;rift-f5-cve-2020-5902-and-citrix-cve-2020-8193-cve-2020-8195-and-cve-2020-8196-honeypot-data-release&#x2F;</span><br><span class="line">对F5 CVE-2020-5902、Citrix CVE-2020-8193、CVE-2020-8195以及CVE-2020-8196等漏洞三个月蜜罐数据的分析</span><br></pre></td></tr></table></figure><p>•A journey into defeating regulated electronic cigarette protections</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.ioactive.com&#x2F;2020&#x2F;10&#x2F;a-journey-into-defeating-regulated.html</span><br><span class="line">攻击电子香烟系统</span><br></pre></td></tr></table></figure><p>•Reverse engineering my cable modem and turning it into an SDR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;stdw.github.io&#x2F;cm-sdr&#x2F;</span><br><span class="line">逆向cable modem将它做成SDR</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•From LNK to RCE Finding bugs in Windows Shell Link Parser</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hitcon.org&#x2F;2020&#x2F;slides&#x2F;From%20LNK%20to%20RCE%20Finding%20bugs%20in%20Windows%20Shell%20Link%20Parser.pdfwindows </span><br><span class="line">ShellLinkParser漏洞挖掘</span><br></pre></td></tr></table></figure><p>•Fuzzing internships for open source software</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;opensource.googleblog.com&#x2F;2020&#x2F;10&#x2F;fuzzing-internships-for-open-source.html</span><br><span class="line">开源软件fuzz</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•SpeedPwning VMware Workstation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;sites&#x2F;default&#x2F;files&#x2F;2020-10&#x2F;Speedpwning_VMware_Workstation.pdf</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•Morty’s New Tool : Android Application Based CTF Challenge Walkthrough</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@saurabh_jain_&#x2F;mortys-new-tool-android-application-based-ctf-challenge-walkthrough-6058e080598e</span><br><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@saurabh_jain_&#x2F;planet-x-android-application-based-ctf-challenge-walkthrough-778547aac015</span><br><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@saurabh_jain_&#x2F;morty-sherlocked-android-application-ctf-challenge-walkthrough-ab1ec2161cb4安卓系列CTF题目writeup</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Compiler support for mitigations Updated on 12/Oct/2018 Addressing Spectre Variant 1 (CVE-2017-5753) in Software</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;developer.arm.com&#x2F;support&#x2F;arm-security-updates&#x2F;speculative-processor-vulnerability&#x2F;compiler-support-for-mitigationsarm公布了针对Spectre CPU漏洞的解决方案</span><br></pre></td></tr></table></figure><p>•We Hacked Apple for 3 Months: Here’s What We Found</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;samcurry.net&#x2F;hacking-apple&#x2F;三个月挖掘苹果产品55个漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-14386: Privilege Escalation Vulnerability in the Linux kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unit42.paloaltonetworks.com&#x2F;cve-2020-14386</span><br><span class="line">https :&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2020&#x2F;09&#x2F;03&#x2F;3CVE-2020-14386 linux 内核提权漏洞</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•CVE-2020-17365 – Hotspot Shield VPN New Privilege Escalation Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cymptom.com&#x2F;cve-2020-17365-hotspot-shield-vpn-new-privilege-escalation-vulnerability&#x2F;2020&#x2F;10&#x2F;HotspotShield VPN 提权漏洞分析</span><br></pre></td></tr></table></figure><p>•A technical description of CVE-2020-15702</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;flattsecurity.hatenablog.com&#x2F;entry&#x2F;2020&#x2F;09&#x2F;30&#x2F;130844CVE-2020-15702 apport pid条件竞争漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2019-0230: APACHE STRUTS OGNL REMOTE CODE EXECUTION</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;10&#x2F;7&#x2F;cve-2019-0230-apache-struts-ognl-remote-code-executionCVE-2019-0230ApacheStruts rce漏洞分析</span><br></pre></td></tr></table></figure><p>•HP Device Manager – CVE-2020-6925, CVE-2020-6926, CVE-2020-6927</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nickbloor.co.uk&#x2F;2020&#x2F;10&#x2F;05&#x2F;hp-device-manager-cve-2020-6925-cve-2020-6926-cve-2020-6927&#x2F;HP DeviceManager CVE-2020-6925, CVE-2020-6926, CVE-2020-6927漏洞分析</span><br></pre></td></tr></table></figure><p>•Kud I Enter Your Server? New Vulnerabilities in Microsoft Azure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.intezer.com&#x2F;blog&#x2F;cloud-security&#x2F;kud-i-enter-your-server-new-vulnerabilities-in-microsoft-azure&#x2F;MicrosoftAzure硬编码证书本地提权漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-25214.pdf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;immunityinc&#x2F;Advisories&#x2F;blob&#x2F;master&#x2F;2020&#x2F;CVE-2020-25214.pdfOverwolfUpdater免认证漏洞分析</span><br></pre></td></tr></table></figure><p>•JAVA DESERIALIZATION VULNERABILITY IN QRADAR REMOTEJAVASCRIPT SERVLET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.securify.nl&#x2F;advisory&#x2F;java-deserialization-vulnerability-in-qradar-remotejavascript-servletCVE-2020-4280: Java反序列化漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-11518: how I bruteforced my way into your Active Directory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;honoki.net&#x2F;2020&#x2F;08&#x2F;10&#x2F;cve-2020-11518-how-i-bruteforced-my-way-into-your-active-directory&#x2F;CVE-2020-11518ActiveDirectory漏洞分析</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•POWERSHELL LOGGING: OBFUSCATION AND SOME NEW(ISH) BYPASSES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.bc-security.org&#x2F;post&#x2F;powershell-logging-obfuscation-and-some-newish-bypasses-part-1</span><br><span class="line">https :&#x2F;&#x2F;www.bc-security.org&#x2F;post&#x2F;powershell-logging-obfuscation-and-some-newish-bypasses-part-2&#x2F;PowerShell日志混淆技巧</span><br></pre></td></tr></table></figure><p>•Reverse Engineering Go Binaries with Ghidra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cujo.com&#x2F;reverse-engineering-go-binaries-with-ghidra&#x2F;通过Ghidra逆向Go程序</span><br></pre></td></tr></table></figure><p>•How To Host Your Own DNS-over-HTTPS And DNS-over-TLS Services</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.technitium.com&#x2F;2020&#x2F;07&#x2F;how-to-host-your-own-dns-over-https-and.html如何运维DNS-over-HTTPS (DoH)及DNS-over-TLS (DoT) 服务</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 库信息集合</title>
      <link href="/2020/10/06/Python-Lib/"/>
      <url>/2020/10/06/Python-Lib/</url>
      
        <content type="html"><![CDATA[<h1 id="Python库信息"><a href="#Python库信息" class="headerlink" title="Python库信息"></a>Python库信息</h1><h2 id="原生库"><a href="#原生库" class="headerlink" title="原生库"></a>原生库</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><blockquote><p>string：通用字符串操作</p><p>re：正则表达式操作</p><p>difflib：差异计算工具</p><p>textwrap：文本填充</p><p>unicodedata：Unicode字符数据库</p><p>stringprep：互联网字符串准备工具</p><p>readline：GNU按行读取接口</p><p>rlcompleter：GNU按行读取的实现函数</p><p>struct：将字节解析为打包的二进制数据</p><p>codecs：注册表与基类的编解码器</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>datetime：基于日期与时间工具</p><p>calendar：通用月份函数</p><p>collections：容器数据类型</p><p>collections.abc：容器虚基类</p><p>heapq：堆队列算法</p><p>bisect：数组二分算法</p><p>array：高效数值数组</p><p>weakref：弱引用</p><p>types：内置类型的动态创建与命名</p><p>copy：浅拷贝与深拷贝</p><p>reprlib：交替repr()的实现</p></blockquote><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><blockquote><p>numbers：数值的虚基类</p><p>math：数学函数</p><p>cmath：复数的数学函数</p><p>decimal：定点数与浮点数计算</p><p>fractions：有理数</p><p>random：生成伪随机数</p></blockquote><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><blockquote><p>itertools：为高效循环生成迭代器</p><p>functools：可调用对象上的高阶函数与操作</p><p>operator：针对函数的标准操作</p></blockquote><h3 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h3><blockquote><p>os.path：通用路径名控制</p><p>fileinput：从多输入流中遍历行</p><p>stat：解释stat()的结果</p><p>filecmp：文件与目录的比较函数</p><p>tempfile：生成临时文件与目录</p><p>glob：Unix风格路径名格式的扩展</p><p>fnmatch：Unix风格路径名格式的比对</p><p>linecache：文本行的随机存储</p><p>shutil：高级文件操作</p><p>macpath：MacOS 9路径控制函数</p></blockquote><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><blockquote><p>pickle：Python对象序列化</p><p>copyreg：注册机对pickle的支持函数</p><p>shelve：Python对象持久化</p><p>marshal：内部Python对象序列化</p><p>dbm：Unix“数据库”接口</p><p>sqlite3：针对SQLite数据库的API2.0</p></blockquote><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><blockquote><p>zlib：兼容gzip的压缩</p><p>gzip：对gzip文件的支持</p><p>bz2：对bzip2压缩的支持</p><p>lzma：使用LZMA算法的压缩</p><p>zipfile：操作ZIP存档</p><p>tarfile：读写tar存档文件</p></blockquote><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><blockquote><p>hashlib：安全散列与消息摘要</p><p>hmac：针对消息认证的键散列</p></blockquote><h3 id="操作系统工具"><a href="#操作系统工具" class="headerlink" title="操作系统工具"></a>操作系统工具</h3><blockquote><p>os：多方面的操作系统接口</p><p>io：流核心工具</p><p>time：时间的查询与转化</p><p>argparser：命令行选项、参数和子命令的解析器</p><p>optparser：命令行选项解析器</p><p>getopt：C风格的命令行选项解析器</p><p>logging：Python日志工具</p><p>logging.config：日志配置</p><p>logging.handlers：日志处理器</p><p>getpass：简易密码输入</p><p>curses：字符显示的终端处理</p><p>curses.textpad：curses程序的文本输入域</p><p>curses.ascii：ASCII字符集工具</p><p>curses.panel：curses的控件栈扩展</p><p>platform：访问底层平台认证数据</p><p>errno：标准错误记号</p><p>ctypes：Python外部函数库</p></blockquote><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><blockquote><p>threading：基于线程的并行</p><p>multiprocessing：基于进程的并行</p><p>concurrent：并发包</p><p>concurrent.futures：启动并行任务</p><p>subprocess：子进程管理</p><p>sched：事件调度</p><p>queue：同步队列</p><p>select：等待I / O完成</p><p>dummy_threading：threading模块的替代（当_thread不可用时）</p><p>_thread：底层的线程API（threading基于其上）</p><p>_dummy_thread：_thread模块的替代（当_thread不可用时）</p></blockquote><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><blockquote><p>socket：底层网络接口</p><p>ssl：socket对象的TLS / SSL填充器</p><p>asyncore：异步套接字处理器</p><p>asynchat：异步套接字命令 / 响应处理器</p><p>signal：异步事务信号处理器</p><p>mmap：内存映射文件支持</p></blockquote><h3 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h3><blockquote><p>email：邮件与MIME处理包</p><p>json：JSON编码与解码</p><p>mailcap：mailcap文件处理</p><p>mailbox：多种格式控制邮箱</p><p>mimetypes：文件名与MIME类型映射</p><p>base64：RFC3548：Base16、Base32、Base64编码</p><p>binhex：binhex4文件编码与解码</p><p>binascii：二进制码与ASCII码间的转化</p><p>quopri：MIMEquoted - printable数据的编码与解码</p><p>uu：uuencode文件的编码与解码</p></blockquote><h3 id="互联网协议与支持"><a href="#互联网协议与支持" class="headerlink" title="互联网协议与支持"></a>互联网协议与支持</h3><blockquote><p>webbrowser：简易Web浏览器控制器</p><p>cgi：CGI支持</p><p>cgitb：CGI脚本反向追踪管理器</p><p>wsgiref：WSGI工具与引用实现</p><p>urllib：URL处理模块</p><p>urllib.request：打开URL连接的扩展库</p><p>urllib.response：urllib模块的响应类</p><p>urllib.parse：将URL解析成组件</p><p>urllib.error：urllib.request引发的异常类</p><p>urllib.robotparser：robots.txt的解析器</p><p>http：HTTP模块</p><p>http.client：HTTP协议客户端</p><p>ftplib：FTP协议客户端</p><p>poplib：POP协议客户端</p><p>imaplib：IMAP4协议客户端</p><p>nntplib：NNTP协议客户端</p><p>smtplib：SMTP协议客户端</p><p>smtpd：SMTP服务器</p><p>telnetlib：Telnet客户端</p><p>uuid：RFC4122的UUID对象</p><p>socketserver：网络服务器框架</p><p>http.server：HTTP服务器</p><p>http.cookies：HTTPCookie状态管理器</p><p>http.cookiejar：HTTP客户端的Cookie处理</p><p>xmlrpc：XML - RPC服务器和客户端模块</p><p>xmlrpc.client：XML - RPC客户端访问</p><p>xmlrpc.server：XML - RPC服务器基础</p><p>ipaddress：IPv4 / IPv6控制库</p></blockquote><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><blockquote><p>audioop：处理原始音频数据</p><p>aifc：读写AIFF和AIFC文件</p><p>sunau：读写Sun AU文件</p><p>wave：读写WAV文件</p><p>chunk：读取IFF大文件</p><p>colorsys：颜色系统间转化</p><p>imghdr：指定图像类型</p><p>sndhdr：指定声音文件类型</p><p>ossaudiodev：访问兼容OSS的音频设备</p></blockquote><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><blockquote><p>gettext：多语言的国际化服务</p><p>locale：国际化服务</p></blockquote><h3 id="编程框架"><a href="#编程框架" class="headerlink" title="编程框架"></a>编程框架</h3><blockquote><p>turtle：Turtle图形库</p><p>cmd：基于行的命令解释器支持</p><p>shlex：简单词典分析</p></blockquote><h3 id="Tk图形用户接口"><a href="#Tk图形用户接口" class="headerlink" title="Tk图形用户接口"></a>Tk图形用户接口</h3><blockquote><p>tkinter：Tcl / Tk接口</p><p>tkinter.ttk：Tk主题控件</p><p>tkinter.tix：Tk扩展控件</p><p>tkinter.scrolledtext：滚轴文本控件</p></blockquote><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><blockquote><p>pydoc：文档生成器和在线帮助系统</p><p>doctest：交互式Python示例</p><p>unittest：单元测试框架</p><p>unittest.mock：模拟对象库</p><p>test：Python回归测试包</p><p>test.support：Python测试工具套件</p><p>venv：虚拟环境搭建</p></blockquote><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><blockquote><p>bdb：调试框架</p><p>faulthandler：Python反向追踪库</p><p>pdb：Python调试器</p><p>timeit：小段代码执行时间测算</p><p>trace：Python执行状态追踪</p></blockquote><h3 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h3><blockquote><p>sys：系统相关的参数与函数</p><p>sysconfig：访问Python配置信息</p><p>builtins：内置对象</p><p>main：顶层脚本环境</p><p>warnings：警告控制</p><p>contextlib：with状态的上下文工具</p><p>abc：虚基类</p><p>atexit：出口处理器</p><p>traceback：打印或读取一条栈的反向追踪</p><p>future：未来状态定义</p><p>gc：垃圾回收接口</p><p>inspect：检查存活的对象</p><p>site：址相关的配置钩子（hook）</p><p>fpectl：浮点数异常控制</p><p>distutils：生成和安装Python模块</p></blockquote><h3 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h3><blockquote><p>code：基类解释器</p><p>codeop：编译Python代码</p></blockquote><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><blockquote><p>imp：访问import模块的内部</p><p>zipimport：从ZIP归档中导入模块</p><p>pkgutil：包扩展工具</p><p>modulefinder：通过脚本查找模块</p><p>runpy：定位并执行Python模块</p><p>importlib：import的一种实施</p></blockquote><h3 id="Python语言"><a href="#Python语言" class="headerlink" title="Python语言"></a>Python语言</h3><blockquote><p>parser：访问Python解析树</p><p>ast：抽象句法树</p><p>symtable：访问编译器符号表</p><p>symbol：Python解析树中的常量</p><p>token：Python解析树中的常量</p><p>keyword：Python关键字测试</p><p>tokenize：Python源文件分词</p><p>tabnany：模糊缩进检测</p><p>pyclbr：Python类浏览支持</p><p>py_compile：编译Python源文件</p><p>compileall：按字节编译Python库</p><p>dis：Python字节码的反汇编器</p><p>pickletools：序列化开发工具</p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p>formatter：通用格式化输出</p></blockquote><h3 id="Windows相关"><a href="#Windows相关" class="headerlink" title="Windows相关"></a>Windows相关</h3><blockquote><p>msilib：读写Windows的Installer文件</p><p>msvcrt：MS VC + + Runtime的有用程序</p><p>winreg：Windows注册表访问</p><p>winsound：Windows声音播放接口</p></blockquote><h3 id="Unix相关"><a href="#Unix相关" class="headerlink" title="Unix相关"></a>Unix相关</h3><blockquote><p>posix：最常用的POSIX调用</p><p>pwd：密码数据库</p><p>spwd：影子密码数据库</p><p>grp：组数据库</p><p>crypt：Unix密码验证</p><p>termios：POSIX风格的tty控制</p><p>tty：终端控制函数</p><p>pty：伪终端工具</p><p>fcntl：系统调用fcntl()和ioctl()</p><p>pipes：shell管道接口</p><p>resource：资源可用信息</p><p>nis：Sun的NIS的接口</p><p>syslog：Unix 日志服务</p></blockquote><h2 id="拓展库"><a href="#拓展库" class="headerlink" title="拓展库"></a>拓展库</h2><blockquote><p><a href="https://github.com/cool-RR/PySnooper" target="_blank" rel="noopener">PySnooper</a>：便捷版debug信息输出库</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyton library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.9.28-10.04一周安全知识动态</title>
      <link href="/2020/10/05/%5B%E8%BD%AC%5D2020.9.28-10.4%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/05/%5B%E8%BD%AC%5D2020.9.28-10.4%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-28-10-04一周安全知识动态"><a href="#2020-9-28-10-04一周安全知识动态" class="headerlink" title="2020.9.28-10.04一周安全知识动态"></a>2020.9.28-10.04一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•This is my first bug hunting in this life</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ufo.stealien.com&#x2F;r&amp;d&#x2F;2020&#x2F;09&#x2F;25&#x2F;bug_hunting.html研究员ohjin关于chrome漏洞挖掘日记</span><br></pre></td></tr></table></figure><p>•ductf2020 pwn-or-web v8 challenge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;seb-sec.github.io&#x2F;2020&#x2F;09&#x2F;28&#x2F;ductf2020-pwn-or-web.htmlductf2020 v8 writeup</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•mikrot8over</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;vulnersCom&#x2F;mikrot8overFast exploitation tool forMikrotikRouterOS up to 6.38.4</span><br></pre></td></tr></table></figure><p>•IoT-Pentest-devices-and-purpose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;IoTSecurity101&#x2F;IoT-Pentest-devices-and-purposeIoT设备渗透研究工具收集仓库</span><br></pre></td></tr></table></figure><p>•List-of-Tools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;IoT-PTv&#x2F;List-of-ToolsIoT安全研究工具</span><br></pre></td></tr></table></figure><p>•Cisco Issues Patches For 2 High-Severity IOS XR Flaws Under Active Attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;thehackernews.com&#x2F;2020&#x2F;09&#x2F;cisco.htmlCisco修复了IOS XR两个高危漏洞CVE-2020-3566以及CVE-2020-3569</span><br></pre></td></tr></table></figure><p>•Hardware-Hacking-Experiments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;koutto&#x2F;hardware-hacking&#x2F;blob&#x2F;master&#x2F;Hardware-Hacking-Experiments-Jeremy-Brun-Nouvion-2020.pdfNetGear N300 WNR2000v4通过硬件提取固件</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•SSD Lil’ Bits - Episode 3 - Fuzzing &amp; Code Review</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;kkHh2bBP3g4&amp;feature&#x3D;youtu.beSSD关于fuzz以及代码审计的视频</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•iOS Application Security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;speakerdeck.com&#x2F;vashchenko&#x2F;ios-application-securityiOS app安全研究</span><br></pre></td></tr></table></figure><p>•Jailbreaking iOS without a Mac (1/4): The Plan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;bugbountywriteup&#x2F;jailbreaking-ios-without-a-mac-1-4-the-plan-b49c0edc1759iOS越狱系列文章第一篇</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•MS.SharePoint.CVE-2019-0604.Remote.Code.Execution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.fortiguard.com&#x2F;encyclopedia&#x2F;ips&#x2F;47918https:&#x2F;&#x2F;securityaffairs.co&#x2F;wordpress&#x2F;98043&#x2F;hacking&#x2F;sharepoint-rce.htmlSharePoint </span><br><span class="line">CVE-2019-0604远程代码执行漏洞</span><br></pre></td></tr></table></figure><p>•A Hacker’s perspective on AEM applications security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;speakerdeck.com&#x2F;0ang3el&#x2F;a-hackers-perspective-on-aem-applications-securityadaptTo 2020安全大会上《从黑客的角度看AdobeExperienceManager应用安全》slide</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•checksec.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Wenzel&#x2F;checksec.py</span><br><span class="line">跨平台支持多架构的&#96;checksec&#96;工具</span><br></pre></td></tr></table></figure><p>•rasengan - extract various firmware blobs from iBoot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;b1n4r1b01&#x2F;rasengan</span><br><span class="line">从iBoot提取固件的工具rasengan</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Programming with the PowerPC branch processor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.ibm.com&#x2F;developerworks&#x2F;library&#x2F;l-powasm3&#x2F;index.html</span><br><span class="line">PowerPC branch processor 编程</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度总结</title>
      <link href="/2020/09/29/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="时间复杂度总结"><a href="#时间复杂度总结" class="headerlink" title="时间复杂度总结"></a>时间复杂度总结</h1><h3 id="复杂度差距图"><a href="#复杂度差距图" class="headerlink" title="复杂度差距图"></a>复杂度差距图</h3><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194012340.png" alt="image-20200929194012340"></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194029294.png" alt="image-20200929194029294"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194504961.png" alt="image-20200929194504961"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194523351.png" alt="image-20200929194523351"></p><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194513720.png" alt="image-20200929194513720"></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)排序算法知识点集合</title>
      <link href="/2020/09/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9B%86%E5%90%88/"/>
      <url>/2020/09/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="转载-排序算法知识点集合"><a href="#转载-排序算法知识点集合" class="headerlink" title="(转载)排序算法知识点集合"></a>(转载)排序算法知识点集合</h1><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203625.jpg" alt="微信图片_20200929203625"></p><p>关于时间复杂度：</p><ol><li><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</p></li><li><p>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序。</p></li><li><p>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序。</p></li><li><p>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</p></li></ol><p>关于稳定性：</p><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><p>名词解释：</p><p>n：数据规模</p><p>k：“桶”的个数</p><p>In-place：占用常数内存，不占用额外内存</p><p>Out-place：占用额外内存</p><p>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h3><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><p>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。</p><p><strong>1. 算法步骤</strong></p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203639.gif" alt="微信图片_20200929203639"></p><p><strong>3. 什么时候最快</strong></p><p>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊）。</p><p><strong>4. 什么时候最慢</strong></p><p>当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。</p><p><strong>5. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class BubbleSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F; 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span><br><span class="line">            boolean flag &#x3D; true;</span><br><span class="line"></span><br><span class="line">            for (int j &#x3D; 0; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                    int tmp &#x3D; arr[j];</span><br><span class="line">                    arr[j] &#x3D; arr[j + 1];</span><br><span class="line">                    arr[j + 1] &#x3D; tmp;</span><br><span class="line"></span><br><span class="line">                    flag &#x3D; false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (flag) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><strong>选择排序</strong></h3><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><p><strong>1. 算法步骤</strong></p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203646.gif" alt="微信图片_20200929203646"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class SelectionSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 总共要经过 N-1 轮比较</span><br><span class="line">        for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">            int min &#x3D; i;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 每轮需要比较的次数 N-i</span><br><span class="line">            for (int j &#x3D; i + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">                if (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 记录目前能找到的最小值元素的下标</span><br><span class="line">                    min &#x3D; j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 将找到的最小值和i位置所在的值进行交换</span><br><span class="line">            if (i !&#x3D; min) &#123;</span><br><span class="line">                int tmp &#x3D; arr[i];</span><br><span class="line">                arr[i] &#x3D; arr[min];</span><br><span class="line">                arr[min] &#x3D; tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a><strong>插入排序</strong></h3><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p><p><strong>1. 算法步骤</strong></p><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203651.gif" alt="微信图片_20200929203651"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class InsertSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span><br><span class="line">        for (int i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 记录要插入的数据</span><br><span class="line">            int tmp &#x3D; arr[i];</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 从已经排序的序列最右边的开始比较，找到比其小的数</span><br><span class="line">            int j &#x3D; i;</span><br><span class="line">            while (j &gt; 0 &amp;&amp; tmp &lt; arr[j - 1]) &#123;</span><br><span class="line">                arr[j] &#x3D; arr[j - 1];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 存在比其小的数，插入</span><br><span class="line">            if (j !&#x3D; i) &#123;</span><br><span class="line">                arr[j] &#x3D; tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a><strong>希尔排序</strong></h3><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><p><strong>1. 算法步骤</strong></p><ol><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><p><strong>2. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class ShellSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        int gap &#x3D; 1;</span><br><span class="line">        while (gap &lt; arr.length) &#123;</span><br><span class="line">            gap &#x3D; gap * 3 + 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (gap &gt; 0) &#123;</span><br><span class="line">            for (int i &#x3D; gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                int tmp &#x3D; arr[i];</span><br><span class="line">                int j &#x3D; i - gap;</span><br><span class="line">                while (j &gt;&#x3D; 0 &amp;&amp; arr[j] &gt; tmp) &#123;</span><br><span class="line">                    arr[j + gap] &#x3D; arr[j];</span><br><span class="line">                    j -&#x3D; gap;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j + gap] &#x3D; tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            gap &#x3D; (int) Math.floor(gap &#x2F; 3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a><strong>归并排序</strong></h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><ul><li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li><li>自下而上的迭代；</li></ul><p>在《数据结构与算法 JavaScript 描述》中，作者给出了自下而上的迭代方法。但是对于递归法，作者却认为：</p><p>However, it is not possible to do so in JavaScript, as the recursion goes too deep for the language to handle.</p><p>然而，在 JavaScript 中这种方式不太可行，因为这个算法的递归深度对它来讲太深了。</p><p>说实话，我不太理解这句话。意思是 JavaScript 编译器内存太小，递归太深容易造成内存溢出吗？还望有大神能够指教。</p><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><p><strong>1. 算法步骤</strong></p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203657.gif" alt="微信图片_20200929203657"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class MergeSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        if (arr.length &lt; 2) &#123;</span><br><span class="line">            return arr;</span><br><span class="line">        &#125;</span><br><span class="line">        int middle &#x3D; (int) Math.floor(arr.length &#x2F; 2);</span><br><span class="line"></span><br><span class="line">        int[] left &#x3D; Arrays.copyOfRange(arr, 0, middle);</span><br><span class="line">        int[] right &#x3D; Arrays.copyOfRange(arr, middle, arr.length);</span><br><span class="line"></span><br><span class="line">        return merge(sort(left), sort(right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected int[] merge(int[] left, int[] right) &#123;</span><br><span class="line">        int[] result &#x3D; new int[left.length + right.length];</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        while (left.length &gt; 0 &amp;&amp; right.length &gt; 0) &#123;</span><br><span class="line">            if (left[0] &lt;&#x3D; right[0]) &#123;</span><br><span class="line">                result[i++] &#x3D; left[0];</span><br><span class="line">                left &#x3D; Arrays.copyOfRange(left, 1, left.length);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result[i++] &#x3D; right[0];</span><br><span class="line">                right &#x3D; Arrays.copyOfRange(right, 1, right.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (left.length &gt; 0) &#123;</span><br><span class="line">            result[i++] &#x3D; left[0];</span><br><span class="line">            left &#x3D; Arrays.copyOfRange(left, 1, left.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (right.length &gt; 0) &#123;</span><br><span class="line">            result[i++] &#x3D; right[0];</span><br><span class="line">            right &#x3D; Arrays.copyOfRange(right, 1, right.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><strong>快速排序</strong></h3><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好，可是这是为什么呢，我也不知道。好在我的强迫症又犯了，查了 N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：</p><p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p><strong>1. 算法步骤</strong></p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203703.gif" alt="微信图片_20200929203703"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class QuickSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        return quickSort(arr, 0, arr.length - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] quickSort(int[] arr, int left, int right) &#123;</span><br><span class="line">        if (left &lt; right) &#123;</span><br><span class="line">            int partitionIndex &#x3D; partition(arr, left, right);</span><br><span class="line">            quickSort(arr, left, partitionIndex - 1);</span><br><span class="line">            quickSort(arr, partitionIndex + 1, right);</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int partition(int[] arr, int left, int right) &#123;</span><br><span class="line">        &#x2F;&#x2F; 设定基准值（pivot）</span><br><span class="line">        int pivot &#x3D; left;</span><br><span class="line">        int index &#x3D; pivot + 1;</span><br><span class="line">        for (int i &#x3D; index; i &lt;&#x3D; right; i++) &#123;</span><br><span class="line">            if (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">                swap(arr, i, index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, pivot, index - 1);</span><br><span class="line">        return index - 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int temp &#x3D; arr[i];</span><br><span class="line">        arr[i] &#x3D; arr[j];</span><br><span class="line">        arr[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a><strong>堆排序</strong></h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><ol><li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li><li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li></ol><p>堆排序的平均时间复杂度为 Ο(nlogn)。</p><p><strong>1. 算法步骤</strong></p><ol><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203709.gif" alt="微信图片_20200929203709"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class HeapSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        int len &#x3D; arr.length;</span><br><span class="line"></span><br><span class="line">        buildMaxHeap(arr, len);</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; len - 1; i &gt; 0; i--) &#123;</span><br><span class="line">            swap(arr, 0, i);</span><br><span class="line">            len--;</span><br><span class="line">            heapify(arr, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void buildMaxHeap(int[] arr, int len) &#123;</span><br><span class="line">        for (int i &#x3D; (int) Math.floor(len &#x2F; 2); i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">            heapify(arr, i, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void heapify(int[] arr, int i, int len) &#123;</span><br><span class="line">        int left &#x3D; 2 * i + 1;</span><br><span class="line">        int right &#x3D; 2 * i + 2;</span><br><span class="line">        int largest &#x3D; i;</span><br><span class="line"></span><br><span class="line">        if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">            largest &#x3D; left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">            largest &#x3D; right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (largest !&#x3D; i) &#123;</span><br><span class="line">            swap(arr, i, largest);</span><br><span class="line">            heapify(arr, largest, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int temp &#x3D; arr[i];</span><br><span class="line">        arr[i] &#x3D; arr[j];</span><br><span class="line">        arr[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a><strong>计数排序</strong></h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><p><strong>1. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203713.gif" alt="微信图片_20200929203713"></p><p><strong>2. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class CountingSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        int maxValue &#x3D; getMaxValue(arr);</span><br><span class="line"></span><br><span class="line">        return countingSort(arr, maxValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] countingSort(int[] arr, int maxValue) &#123;</span><br><span class="line">        int bucketLen &#x3D; maxValue + 1;</span><br><span class="line">        int[] bucket &#x3D; new int[bucketLen];</span><br><span class="line"></span><br><span class="line">        for (int value : arr) &#123;</span><br><span class="line">            bucket[value]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int sortedIndex &#x3D; 0;</span><br><span class="line">        for (int j &#x3D; 0; j &lt; bucketLen; j++) &#123;</span><br><span class="line">            while (bucket[j] &gt; 0) &#123;</span><br><span class="line">                arr[sortedIndex++] &#x3D; j;</span><br><span class="line">                bucket[j]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getMaxValue(int[] arr) &#123;</span><br><span class="line">        int maxValue &#x3D; arr[0];</span><br><span class="line">        for (int value : arr) &#123;</span><br><span class="line">            if (maxValue &lt; value) &#123;</span><br><span class="line">                maxValue &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return maxValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a><strong>桶排序</strong></h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ol><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ol><p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p><strong>1. 什么时候最快</strong></p><p>当输入的数据可以均匀的分配到每一个桶中。</p><p><strong>2. 什么时候最慢</strong></p><p>当输入的数据被分配到了同一个桶中。</p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class BucketSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    private static final InsertSort insertSort &#x3D; new InsertSort();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        return bucketSort(arr, 5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] bucketSort(int[] arr, int bucketSize) throws Exception &#123;</span><br><span class="line">        if (arr.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int minValue &#x3D; arr[0];</span><br><span class="line">        int maxValue &#x3D; arr[0];</span><br><span class="line">        for (int value : arr) &#123;</span><br><span class="line">            if (value &lt; minValue) &#123;</span><br><span class="line">                minValue &#x3D; value;</span><br><span class="line">            &#125; else if (value &gt; maxValue) &#123;</span><br><span class="line">                maxValue &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int bucketCount &#x3D; (int) Math.floor((maxValue - minValue) &#x2F; bucketSize) + 1;</span><br><span class="line">        int[][] buckets &#x3D; new int[bucketCount][0];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 利用映射函数将数据分配到各个桶中</span><br><span class="line">        for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            int index &#x3D; (int) Math.floor((arr[i] - minValue) &#x2F; bucketSize);</span><br><span class="line">            buckets[index] &#x3D; arrAppend(buckets[index], arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int arrIndex &#x3D; 0;</span><br><span class="line">        for (int[] bucket : buckets) &#123;</span><br><span class="line">            if (bucket.length &lt;&#x3D; 0) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 对每个桶进行排序，这里使用了插入排序</span><br><span class="line">            bucket &#x3D; insertSort.sort(bucket);</span><br><span class="line">            for (int value : bucket) &#123;</span><br><span class="line">                arr[arrIndex++] &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 自动扩容，并保存数据</span><br><span class="line">     *</span><br><span class="line">     * @param arr</span><br><span class="line">     * @param value</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private int[] arrAppend(int[] arr, int value) &#123;</span><br><span class="line">        arr &#x3D; Arrays.copyOf(arr, arr.length + 1);</span><br><span class="line">        arr[arr.length - 1] &#x3D; value;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a><strong>基数排序</strong></h3><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p><strong>1. 基数排序 vs 计数排序 vs 桶排序</strong></p><p>基数排序有两种方法：</p><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>基数排序：根据键值的每位数字来分配桶；</li><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值；</li></ul><p><strong>2. LSD 基数排序动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203719.gif" alt="微信图片_20200929203719"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 基数排序</span><br><span class="line"> * 考虑负数的情况还可以参考： https:&#x2F;&#x2F;code.i-harness.com&#x2F;zh-CN&#x2F;q&#x2F;e98fa9</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RadixSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        int maxDigit &#x3D; getMaxDigit(arr);</span><br><span class="line">        return radixSort(arr, maxDigit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取最高位数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private int getMaxDigit(int[] arr) &#123;</span><br><span class="line">        int maxValue &#x3D; getMaxValue(arr);</span><br><span class="line">        return getNumLenght(maxValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getMaxValue(int[] arr) &#123;</span><br><span class="line">        int maxValue &#x3D; arr[0];</span><br><span class="line">        for (int value : arr) &#123;</span><br><span class="line">            if (maxValue &lt; value) &#123;</span><br><span class="line">                maxValue &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return maxValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected int getNumLenght(long num) &#123;</span><br><span class="line">        if (num &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        int lenght &#x3D; 0;</span><br><span class="line">        for (long temp &#x3D; num; temp !&#x3D; 0; temp &#x2F;&#x3D; 10) &#123;</span><br><span class="line">            lenght++;</span><br><span class="line">        &#125;</span><br><span class="line">        return lenght;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] radixSort(int[] arr, int maxDigit) &#123;</span><br><span class="line">        int mod &#x3D; 10;</span><br><span class="line">        int dev &#x3D; 1;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; maxDigit; i++, dev *&#x3D; 10, mod *&#x3D; 10) &#123;</span><br><span class="line">            &#x2F;&#x2F; 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span><br><span class="line">            int[][] counter &#x3D; new int[mod * 2][0];</span><br><span class="line"></span><br><span class="line">            for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">                int bucket &#x3D; ((arr[j] % mod) &#x2F; dev) + mod;</span><br><span class="line">                counter[bucket] &#x3D; arrayAppend(counter[bucket], arr[j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int pos &#x3D; 0;</span><br><span class="line">            for (int[] bucket : counter) &#123;</span><br><span class="line">                for (int value : bucket) &#123;</span><br><span class="line">                    arr[pos++] &#x3D; value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 自动扩容，并保存数据</span><br><span class="line">     *</span><br><span class="line">     * @param arr</span><br><span class="line">     * @param value</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private int[] arrayAppend(int[] arr, int value) &#123;</span><br><span class="line">        arr &#x3D; Arrays.copyOf(arr, arr.length + 1);</span><br><span class="line">        arr[arr.length - 1] &#x3D; value;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.7.27-8.2一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.7.27-8.2%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.7.27-8.2%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-7-27-8-2一周安全知识动态"><a href="#2020-7-27-8-2一周安全知识动态" class="headerlink" title="2020.7.27-8.2一周安全知识动态"></a>2020.7.27-8.2一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Coverage Guided Fuzzing in Go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;alexplaskett.github.io&#x2F;coverage-guided-fuzzing-golang&#x2F;对Go语言的基于反馈的fuzz</span><br></pre></td></tr></table></figure><p>•Fuzzing software: advanced tricks (Part 2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securitylab.github.com&#x2F;research&#x2F;fuzzing-software-2Fuzzing软件：高级技巧第二部分</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•Root Cause Analyses for 0-day In-the-Wild Exploits</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;root-cause-analyses-for-0-day-in-wild.htmlproject zero关于在野0day利用情况的分析</span><br></pre></td></tr></table></figure><p>•Detection Deficit: A Year in Review of 0-days Used In-The-Wild in 2019</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;detection-deficit-year-in-review-of-0.html2019年在野0day利用回顾</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Speculation in JavaScriptCore</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;webkit.org&#x2F;blog&#x2F;10308&#x2F;speculation-in-javascriptcore&#x2F;jsc官博上关于优化推断技术实现的介绍</span><br></pre></td></tr></table></figure><p>•Issue 1072171: Security: missing the -0 case when intersecting and computing the Type::Range in NumberMax</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bugs.chromium.org&#x2F;p&#x2F;chromium&#x2F;issues&#x2F;detail?id&#x3D;1072171V8 NumberMaxType漏洞</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•Heap Exploitation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;heap-exploitation.dhavalkapil.com&#x2F;glibc堆利用电子书</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Authorization bypass in Google’s ticketing system (Google-GUTS)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.ehpus.com&#x2F;post&#x2F;authorization-bypass-in-google-s-ticketing-system绕过谷歌ticketing系统</span><br></pre></td></tr></table></figure><p>•Expert release a PoC exploit code for a recently addressed critical flaw in Microsoft SharePoint, .NET Framework, and Visual Studio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securityaffairs.co&#x2F;wordpress&#x2F;106281&#x2F;hacking&#x2F;cve-2020-1147-poc-sharepoint.html?utm_source&#x3D;dlvr.it&amp;utm_medium&#x3D;twitter&amp;utm_campaign&#x3D;cve-2020-1147-poc-sharepointCVE-2020-1147 poc公布</span><br></pre></td></tr></table></figure><p>•How I bypassed 2fa in a 3 years old private program!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;shivangx01b.github.io&#x2F;2fa_bypass&#x2F;双因子认证绕过技术</span><br></pre></td></tr></table></figure><p>•Discovering Buffer overflows in NodeJS core</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@social_62682&#x2F;discovering-buffer-overflows-in-nodejs-core-b4af76c00bbaNodeJS core中的缓冲区溢出漏洞</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•STORSVC WRITEUP AND INTRODUCTION ABOUT MY ANALYSIS SCRIPT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;whereisk0shl.top&#x2F;post&#x2F;storsvc_writeup_and_introduction_about_my_analysis_scriptk0shl关于kernel分析的脚本以及本地提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Setting Up An Android VM For Analyzing Mobile Applications</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;1d8&#x2F;Android-Analysis安卓app分析环境设置</span><br></pre></td></tr></table></figure><p>•Exploiting popular macOS apps with a single “.terminal” file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@metnew&#x2F;exploiting-popular-macos-apps-with-a-single-terminal-file-f6c2efdfedaa通过“.terminal” file攻击macOS app</span><br></pre></td></tr></table></figure><p>•Seeing (Sig)Red</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sensepost.com&#x2F;blog&#x2F;2020&#x2F;seeing-sigred&#x2F;如何检测SigRed(CVE-2020-1350) 漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-1313</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;irsl&#x2F;CVE-2020-1313WindowsUpdateOrchestratorService本地提权漏洞</span><br></pre></td></tr></table></figure><p>•Grubbing Secure Boot the Wrong Way: CVE-2020-10713</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;capsule8.com&#x2F;blog&#x2F;grubbing-secure-boot-the-wrong-way-cve-2020-10713&#x2F;CVE-2020-10713GrubbingSecureBoot漏洞分析</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.8.3-8.9一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.8.3-8.9%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.8.3-8.9%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-8-3-8-9一周安全知识动态"><a href="#2020-8-3-8-9一周安全知识动态" class="headerlink" title="2020.8.3-8.9一周安全知识动态"></a>2020.8.3-8.9一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Compromising the macOS Kernel through Safari by Chaining Six Vulnerabilities</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;sslab-gatech&#x2F;pwn2own2020Pwn2own2020 macOS利用链</span><br></pre></td></tr></table></figure><p>•0day Exploit Root Cause Analyses</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;p&#x2F;rca.html三个在野0day：CVE-2019-17026(Firefox)、CVE-2020-0674(InternetExplorer)、CVE-2020-6820(Firefox)分析</span><br></pre></td></tr></table></figure><p>•Understanding Web Security Checks in Firefox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.mozilla.org&#x2F;attack-and-defense&#x2F;2020&#x2F;08&#x2F;05&#x2F;understanding-web-security-checks-in-firefox-part-2&#x2F;firefox中的WebSecurityChecks机制分析</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Exploiting Android Messengers with WebRTC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;exploiting-android-messengers-part-1.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;exploiting-android-messengers-part-2.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;exploiting-android-messengers-part-3.html</span><br><span class="line">通过WebRTC攻击AndroidMessengers</span><br></pre></td></tr></table></figure><p>•Group Policies Going Rogue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cyberark.com&#x2F;resources&#x2F;threat-research-blog&#x2F;group-policies-going-rogueWindowsgroup policy object(GPO) 机制分析以及漏洞挖掘</span><br></pre></td></tr></table></figure><p>•TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;secmob&#x2F;TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices梯云纵漏洞资料</span><br></pre></td></tr></table></figure><p>•Breaking Samsung’s Root of Trust: Exploiting Samsung S10 Secure Boot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;t.co&#x2F;An06bgtX76?amp&#x3D;1blackhat 2020议题《BreakingSamsung&#39;s Root of Trust: Exploiting Samsung S10 Secure Boot》slide</span><br></pre></td></tr></table></figure><p>•iOS Kernel PAC, One Year Later</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bazad.github.io&#x2F;presentations&#x2F;BlackHat-USA-2020-iOS_Kernel_PAC_One_Year_Later.pdfblackhat202议题《iOS Kernel PAC, OneYearLater》slide</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•MMS Exploit Part</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;mms-exploit-part-1-introduction-to-qmage.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;mms-exploit-part-2-effective-fuzzing-qmage.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;mms-exploit-part-3-constructing-primitives.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;mms-exploit-part-4-completing-aslr-oracle.htmlSamsung image codec</span><br><span class="line">漏洞攻击面分析到漏洞挖掘与利用的过程</span><br></pre></td></tr></table></figure><p>•The danger of world writable NFS shares</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@securityshenaningans&#x2F;the-danger-of-world-writable-nfs-shares-39ecfe868468NFS共享的危害</span><br></pre></td></tr></table></figure><p>•Ghostscript SAFER Sandbox Breakout (CVE-2020-15900)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;insomniasec.com&#x2F;blog&#x2F;ghostscript-cve-2020-15900CVE-2020-15900Ghostscript漏洞分析</span><br></pre></td></tr></table></figure><p>•Path Traversal Vulnerability in SecurEnvoy impacts on remote command execution through file upload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sidechannel.tempestsi.com&#x2F;path-traversal-vulnerability-in-securenvoy-impacts-on-remote-command-execution-through-file-upload-ec2e731bd50aSecurMail上传文件漏洞分析</span><br></pre></td></tr></table></figure><p>•How i find Blind Remote Code Execution vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@viveik.chauhan&#x2F;blind-remote-code-execution-b9c4e119f7c3blind rce分析</span><br></pre></td></tr></table></figure><p>•Hacking Cisco SD-WAN vManage 19.2.2 — From CSRF to Remote Code Execution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;walmartglobaltech&#x2F;hacking-cisco-sd-wan-vmanage-19-2-2-from-csrf-to-remote-code-execution-5f73e2913e77Cisco SD-WAN vManage 19.2.2从csrf到rce漏洞分析</span><br></pre></td></tr></table></figure><p>•Pwn2Own -&gt; Xxe2Rce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;muffsec.com&#x2F;blog&#x2F;?p&#x3D;608Pwn2Own上的Xxe到Rce漏洞分析</span><br></pre></td></tr></table></figure><p>•Vulnerabilities in the Openfire Admin Console</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;swarm.ptsecurity.com&#x2F;openfire-admin-console&#x2F;OpenfireAdminConsole漏洞分析</span><br></pre></td></tr></table></figure><p>•AST Injection, Prototype Pollution to RCE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.p6.is&#x2F;AST-Injection&#x2F;AST注入，原型链漏洞分析</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•Don’t be silly – it’s only a lightbulb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;research.checkpoint.com&#x2F;2020&#x2F;dont-be-silly-its-only-a-lightbulb&#x2F;ZigBee照明设备分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Fuzzing afdko with AFL in 32bit Mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hardik05.wordpress.com&#x2F;2020&#x2F;08&#x2F;08&#x2F;fuzzing-afdko-with-afl-in-32bit-mode&#x2F;通过afl fuzz afdko</span><br></pre></td></tr></table></figure><p>•Capturing memory corruptions with symbolic execution - Introduction to KLEE (part 3)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;XLtoWNbnfK0通过执行进行漏洞挖掘</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Bypassing internet connectivity and copy-paste restriction to Infiltrating malicious data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.mannulinux.org&#x2F;2020&#x2F;08&#x2F;bypassing-internet-connectivity-and.html绕过恶意数据传输限制</span><br></pre></td></tr></table></figure><p>•Intel, ARM, IBM, AMD Processors Vulnerable to New Side-Channel Attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;modernnetsec.io&#x2F;intel-arm-ibm-amd-processors-vulnerable-to-new-side-channel-attacks&#x2F;对于cpu处理器侧信道攻击的方法</span><br></pre></td></tr></table></figure><p>•Over 400 vulnerabilities on Qualcomm’s Snapdragon chip threaten mobile phones’ usability worldwide</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.checkpoint.com&#x2F;2020&#x2F;08&#x2F;06&#x2F;achilles-small-chip-big-peril&#x2F;DigitalSignal处理器漏洞分析</span><br></pre></td></tr></table></figure><p>•DEFCON 2020 Live Notes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nullsweep.com&#x2F;defcon-2020-live-notes&#x2F;defcon2020会议议题笔记</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.8.17-8.23一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.8.17-8.23%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.8.17-8.23%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-8-17-8-23一周安全知识动态"><a href="#2020-8-17-8-23一周安全知识动态" class="headerlink" title="2020.8.17-8.23一周安全知识动态"></a>2020.8.17-8.23一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•HFL: Hybrid Fuzzing on the Linux Kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;chungkim.io&#x2F;doc&#x2F;ndss20-hfl.pdfNdss2020 linux内核漏洞挖掘论文</span><br></pre></td></tr></table></figure><p>•On Measuring and Visualizing Fuzzer Performance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hexgolems.com&#x2F;2020&#x2F;08&#x2F;on-measuring-and-visualizing-fuzzer-performance&#x2F;提升fuzzer评估效率的方法</span><br></pre></td></tr></table></figure><p>•Everything Old is New Again: Binary Security of WebAssembly</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;sec20-lehmann.pdfUsenix2020WebAssembly漏洞论文</span><br></pre></td></tr></table></figure><p>•Responsible and Effective Bugfinding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.regehr.org&#x2F;archives&#x2F;2037漏洞挖掘的有效方法</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•A PRACTICAL GUIDE FOR CRACKING AES-128 ENCRYPTED FIRMWARE UPDATES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gethypoxic.com&#x2F;blogs&#x2F;technical&#x2F;a-practical-guide-for-cracking-aes-128-encrypted-firmware-updates实战破解AES-128加密的固件升级包</span><br></pre></td></tr></table></figure><p>•Breaking the D-Link DIR3060 Firmware Encryption - Recon - Part 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;0x434b.dev&#x2F;breaking-the-d-link-dir3060-firmware-encryption-recon-part-1&#x2F;D-Link DIR3060固件加密解析</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•Buffer-Overflow-Exploit-Development-Practice</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;freddiebarrsmith&#x2F;Buffer-Overflow-Exploit-Development-Practice栈溢出实战练习仓库</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•SassyKitdi: Kernel Mode TCP Sockets + LSASS Dump</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;zerosum0x0.blogspot.com&#x2F;2020&#x2F;08&#x2F;sassykitdi-kernel-mode-tcp-sockets.htmlwindows通用kernel payload</span><br></pre></td></tr></table></figure><p>•CVE-2020-1571 Windows Setup Elevation of Privileges Bypass 0day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;klinix5&#x2F;Windows-Setup-EoPCVE-2020-1571 windows提权漏洞exp</span><br></pre></td></tr></table></figure><p>•Windows AppX Deployment Service Local Privilege Escalation (CVE-2020-1488)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.activecyber.us&#x2F;activelabs&#x2F;windows-appx-deployment-service-local-privilege-escalation-cve-2020-1488CVE-2020-1488WindowsAppXDeployment服务提权漏洞分析</span><br></pre></td></tr></table></figure><p>•BLIZZARD JAILBREAK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;geosn0w.github.io&#x2F;getblizzard&#x2F;开源的越狱工具IOS 11.0至 IOS 13.5</span><br></pre></td></tr></table></figure><p>•CVE-2020-1337: my two cents</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.hiveminds.es&#x2F;en&#x2F;posts&#x2F;cve-2020-1337_my_two_cents&#x2F;CVE-2020-1337漏洞分析</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•List of bug bounty writeups</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pentester.land&#x2F;list-of-bug-bounty-writeups.html#bug-bounty-writeups-published-in-2020bounty 报告</span><br></pre></td></tr></table></figure><p>•Bludit Auth BF mitigation bypass exploit / PoC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;noraj&#x2F;Bludit-auth-BF-bypassExploit&#x2F; PoCfor CVE-2019-17240</span><br></pre></td></tr></table></figure><p>•Understanding and Preventing LDAP Injection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.securecoding.com&#x2F;understanding-and-preventing-ldap-injection&#x2F;LDAP注入及防御机制分析</span><br></pre></td></tr></table></figure><p>•A SmorgasHORDE of Vulnerabilities :: A Comparative Analysis of Discovery</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;srcincite.io&#x2F;blog&#x2F;2020&#x2F;08&#x2F;19&#x2F;a-smorgashorde-of-vulnerabilities-a-comparative-analysis-of-discovery.htmlSmorgasHORDE漏洞挖掘分析</span><br></pre></td></tr></table></figure><p>•Struts2 S2-059 漏洞分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;wxn.qq.com&#x2F;cmsid&#x2F;20200816A03TC200</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•PowerShell Commands for Incident Response</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.securityinbits.com&#x2F;incident-response&#x2F;powershell-commands-for-incident-response&#x2F;powershell 奇淫技巧命令</span><br></pre></td></tr></table></figure><p>•Why you should always scan UDP ports (part 1/2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@securityshenaningans&#x2F;why-you-should-always-scan-udp-ports-part-1-2-d8ee7eb26727扫描UDP端口的作用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.8.24-8.30一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.8.24-8.30%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.8.24-8.30%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-8-24-8-30一周安全知识动态"><a href="#2020-8-24-8-30一周安全知识动态" class="headerlink" title="2020.8.24-8.30一周安全知识动态"></a>2020.8.24-8.30一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•CVE-2020-10611: ACHIEVING CODE EXECUTION ON THE TRIANGLE MICROWORKS SCADA DATA GATEWAY</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;8&#x2F;24&#x2F;cve-2020-10611-achieving-code-execution-on-the-triangle-microworks-scada-data-gatewayCVE-2020-10611TriangleMicroWorks SCADA DataGateway RCE漏洞分析</span><br></pre></td></tr></table></figure><p>•CISCO ISE &lt; 1.5 PASSWORDS DECRYPTION</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;publications&#x2F;cisco-ise-15-passwords-decryption.htmlCisco ISE &lt; 1.5密码解密分析</span><br></pre></td></tr></table></figure><p>•Forget Your Perimeter: RCE in Pulse Connect Secure (CVE-2020-8218)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.gosecure.net&#x2F;blog&#x2F;2020&#x2F;08&#x2F;26&#x2F;forget-your-perimeter-rce-in-pulse-connect-secure&#x2F;PulseConnectSecure RCE漏洞CVE-2020-8218分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•js-fuzzer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;source.chromium.org&#x2F;chromium&#x2F;chromium&#x2F;src&#x2F;+&#x2F;master:v8&#x2F;tools&#x2F;clusterfuzz&#x2F;js_fuzzer&#x2F;新开源的JS-Fuzzer</span><br></pre></td></tr></table></figure><p>•Improving Coverage Guided Fuzzing, Using Static Analysis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;repret.wordpress.com&#x2F;2017&#x2F;05&#x2F;01&#x2F;improving-coverage-guided-fuzzing-using-static-analysis&#x2F;使用静态分析来提升CoverageGuidedFuzzing</span><br></pre></td></tr></table></figure><p>•Fuzzing the Linux kernel (x86) entry code, Part 1 of 3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blogs.oracle.com&#x2F;linux&#x2F;fuzzing-the-linux-kernel-x86-entry-code%2c-part-1-of-3fuzz linux内核系列文章</span><br></pre></td></tr></table></figure><p>•Damn_Vulnerable_C_Program</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;hardik05&#x2F;Damn_Vulnerable_C_Program用来学习AFL漏洞挖掘的demo</span><br></pre></td></tr></table></figure><p>• AFL fuzz系列教程及视频</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hardik05.wordpress.com&#x2F;tag&#x2F;afl&#x2F;</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Cleanly Escaping the Chrome Sandbox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;theori.io&#x2F;research&#x2F;escaping-chrome-sandbox&#x2F;Issue1062091沙箱逃逸漏洞分析</span><br></pre></td></tr></table></figure><p>•JavaScript Engine Fuzzing and Exploitation Reading List</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;zon8.re&#x2F;posts&#x2F;javascript-engine-fuzzing-and-exploitation-reading-list&#x2F;javascript fuzz以及漏洞利用相关资源</span><br></pre></td></tr></table></figure><p>•Stealing local files using Safari Web Share API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.redteam.pl&#x2F;2020&#x2F;08&#x2F;stealing-local-files-using-safari-web.html使用safari浏览器WebShare API获取本地文件</span><br></pre></td></tr></table></figure><p>•CVE-2019-17026-Exploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;maxpl0it&#x2F;CVE-2019-17026-Exploithttps:&#x2F;&#x2F;labs.f-secure.com&#x2F;blog&#x2F;exploiting-cve-2019-17026-a-firefox-jit-bug&#x2F;CVE-2019-17026- Firefox JIT 漏洞exp及分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-1380: Analysis of Recently Fixed IE Zero-Day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.trendmicro.com&#x2F;en_us&#x2F;research&#x2F;20&#x2F;h&#x2F;cve-2020-1380-analysis-of-recently-fixed-ie-zero-day.htmlCVE-2020-1380 IE漏洞分析</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Demystifying Insecure Deserialization in PHP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;bugbountywriteup&#x2F;demystifying-insecure-deserialization-in-php-684cab9c4d24PHP反序列化研究</span><br></pre></td></tr></table></figure><p>•LEARNING ABOUT STRUCTURE-AWARE FUZZING AND FINDING JSON BUGS TO BOOT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.forallsecure.com&#x2F;learning-about-structure-aware-fuzzing-and-finding-json-bugs-to-boot?utm_content&#x3D;138198210&amp;utm_medium&#x3D;social&amp;utm_source&#x3D;twitter&amp;hss_channel&#x3D;tw-1568510322Json漏洞挖掘</span><br></pre></td></tr></table></figure><p>•Grafana &lt;= 6.4.3 Arbitrary File Read</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;swarm.ptsecurity.com&#x2F;grafana-6-4-3-arbitrary-file-read&#x2F;Grafana&lt;&#x3D; 6.4.3任意文件读漏洞分析</span><br></pre></td></tr></table></figure><p>•Now you C me, now you don’t: An introduction to the hidden attack surface of interpreted languages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securitylab.github.com&#x2F;research&#x2F;now-you-c-me解释型语言攻击面分析</span><br></pre></td></tr></table></figure><p>•IDS Bypass contest at PHDays: writeup and solutions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;blog.ptsecurity.com&#x2F;2019&#x2F;07&#x2F;ids-bypass-contest-at-phdays-writeup.html?fbclid&#x3D;IwAR2-v_v_NcjWYJ9iVvcc1yWAt3pyMKnzboV622QMI9NI3CKYyqn6HIRrjZ8入侵检测系统绕过方法总结</span><br></pre></td></tr></table></figure><p>•Remote Code Execution in Slack desktop apps + bonus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hackerone.com&#x2F;reports&#x2F;783877Slack远程命令执行漏洞</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•A Tale of Escaping a Hardened Docker container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.redtimmy.com&#x2F;docker&#x2F;a-tale-of-escaping-a-hardened-docker-container&#x2F;Docker container逃逸漏洞分析</span><br></pre></td></tr></table></figure><p>•Oracle VirtualBox VBoxVHWAHandleTable Out-Of-Bounds Access Privilege Escalation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;starlabs.sg&#x2F;advisories&#x2F;20-2682&#x2F;CVE-2020-2682 OOB越界提权漏洞</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Part 2: Step-by-step iPhone Setup for iOS Research</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mac4n6.com&#x2F;blog&#x2F;2020&#x2F;8&#x2F;23&#x2F;step-by-step-iphone-setup-for-ios-research-via-bizzybarneyiOS研究环境搭建</span><br></pre></td></tr></table></figure><p>•Reverse engineering and modifying an Android game (.apk) — CTF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;reverse-engineering-and-modifying-an-android-game-apk-ctf-c617151b874c安卓APK逆向</span><br></pre></td></tr></table></figure><p>•Reverse Engineering The Medium App (and making all stories in it free)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;hackernoon&#x2F;dont-publish-yet-reverse-engineering-the-medium-app-and-making-all-stories-in-it-free-48c8f2695687逆向并破解MediumApp</span><br></pre></td></tr></table></figure><p>•Android Apk Reverse Engineering</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@chris.yn.chen&#x2F;apk-reverse-engineering-df7ed8cec191安卓apk逆向</span><br></pre></td></tr></table></figure><p>•A Voyage to Uncovering Telemetry: Identifying RPC Telemetry for Detection Engineers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ipc-research.readthedocs.io&#x2F;en&#x2F;latest&#x2F;subpages&#x2F;RPC.htmlwindows RPC研究报告</span><br></pre></td></tr></table></figure><p>•MMS Exploit Part 5: Defeating Android ASLR, Getting RCE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;mms-exploit-part-5-defeating-aslr-getting-rce.html安卓ASLR机制分析到RCE</span><br></pre></td></tr></table></figure><p>•Oversecured automatically discovers persistent code execution in the Google Play Core Library</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.oversecured.com&#x2F;Oversecured-automatically-discovers-persistent-code-execution-in-the-Google-Play-Core-Library&#x2F;GooglePlayCoreLibrary漏洞挖掘与分析</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•serpentine</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;jafarlihi&#x2F;serpentineserpentine windows远控工具</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Advanced Binary Deobfuscation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;malrev&#x2F;ABD高级二进制反混淆课程</span><br></pre></td></tr></table></figure><p>•Bypassing Antivirus with Golang – Gopher it!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.jumpsec.com&#x2F;2019&#x2F;06&#x2F;20&#x2F;bypassing-antivirus-with-golang-gopher-it&#x2F;使用Golang绕过杀软</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.8.31-9.6一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.8.31-9.6%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.8.31-9.6%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-8-31-9-6一周安全知识动态"><a href="#2020-8-31-9-6一周安全知识动态" class="headerlink" title="2020.8.31-9.6一周安全知识动态"></a>2020.8.31-9.6一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•hyperv_local_dos_poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;gerhart01&#x2F;hyperv_local_dos_pocHyper-V DoSPoC</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•Cisco warns of actively exploited IOS XR zero-day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zdnet.com&#x2F;article&#x2F;cisco-warns-of-actively-exploited-ios-xr-zero-day&#x2F;CVE-2020-3566 cisco IOS XR 漏洞预警</span><br></pre></td></tr></table></figure><p>•JTAG Explained (finally!): Why “IoT”, Software Security Engineers, and Manufacturers Should Care</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.senr.io&#x2F;blog&#x2F;jtag-explainedJTAG解析的文章</span><br></pre></td></tr></table></figure><p>•pulse-gosecure-rce.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;withdk&#x2F;pulse-gosecure-rce-poc&#x2F;blob&#x2F;master&#x2F;pulse-gosecure-rce.pyPulseSecure RCE (CVE-2020-8218) exp</span><br></pre></td></tr></table></figure><p>•Emulating NotPetya bootloader with Miasm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;aguinet.github.io&#x2F;blog&#x2F;2020&#x2F;08&#x2F;29&#x2F;miasm-bootloader.html通过Miasm模拟运行NotPetya bootloader</span><br></pre></td></tr></table></figure><p>•WATCHCOM SECURITY GROUP UNCOVERS CISCO JABBER VULNERABILITIES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;watchcom.no&#x2F;nyheter&#x2F;nyhetsarkiv&#x2F;uncovers-cisco-jabber-vulnerabilities&#x2F;CiscoJabber漏洞分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Grammar-Mutator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;AFLplusplus&#x2F;Grammar-MutatorA grammar-based custom mutator for AFL++</span><br></pre></td></tr></table></figure><p>•The Sound of Silence: Mining Security Vulnerabilities from Secret Integration Channels in Open-Source Projects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2009.01694.pdf开源框架漏洞挖掘</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•The Current State of Exploit Development, Part 1</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.crowdstrike.com&#x2F;blog&#x2F;state-of-exploit-development-part-1&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.crowdstrike.com&#x2F;blog&#x2F;state-of-exploit-development-part-2&#x2F;</span><br><span class="line">漏洞利用发展过程</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•CVE-2020-5412: Hystrix Dashboard Proxy In spring-cloud-netflix-hystrix-dashboard</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;tanzu.vmware.com&#x2F;security&#x2F;cve-2020-5412spring-cloud-netflix-hystrix-dashboard CVE-2020-5412 SSRF漏洞</span><br></pre></td></tr></table></figure><p>•Privilege Escalation in AWS Elastic Kubernetes Service (EKS) by compromising the instance role of worker nodes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.christophetd.fr&#x2F;privilege-escalation-in-aws-elastic-kubernetes-service-eks-by-compromising-the-instance-role-of-worker-nodes&#x2F;AWS ElasticKubernetes提权漏洞分析</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•CVE-2020-1380: Analysis of Recently Fixed IE Zero-Day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.trendmicro.com&#x2F;en_us&#x2F;research&#x2F;20&#x2F;h&#x2F;cve-2020-1380-analysis-of-recently-fixed-ie-zero-day.htmlCVE-2020-1380 IE漏洞分析</span><br></pre></td></tr></table></figure><p>•Deserialization Bugs In The Wild</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vkili.github.io&#x2F;blog&#x2F;insecure%20deserialization&#x2F;deserialization-in-the-wild&#x2F;反序列化漏洞分析</span><br></pre></td></tr></table></figure><p>•Java Buffer Overflow with ByteBuffer (CVE-2020-2803) and Mutable MethodType (CVE-2020-2805) Sandbox Escapes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;insinuator.net&#x2F;2020&#x2F;09&#x2F;java-buffer-overflow-with-bytebuffer-cve-2020-2803-and-mutable-methodtype-cve-2020-2805-sandbox-escapes&#x2F;CVE-2020-280及CVE-2020-2805Java漏洞分析</span><br></pre></td></tr></table></figure><p>•Lock screen/Bitlocker bypass/elevation of privilege in Bitlocker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1S4jU7knBG_Km_AdHXf8JyE8zl0SOxQ9VvYFPanQy1g8&#x2F;edit#heading&#x3D;h.uqom8ty4aoh7Bitlocker提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Diving into unserialize()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vkili.github.io&#x2F;blog&#x2F;insecure%20deserialization&#x2F;unserialize&#x2F;php unserialize()函数分析</span><br></pre></td></tr></table></figure><p>•spring-view-manipulation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;veracode-research&#x2F;spring-view-manipulationSpringFramework框架中view安全性分析</span><br></pre></td></tr></table></figure><p>•Exploits in the Wild for vBulletin Pre-Auth RCE Vulnerability CVE-2020-17496</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unit42.paloaltonetworks.com&#x2F;cve-2020-17496&#x2F;CVE-2020-17496 vBulletin 认证前RCE漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-9715: EXPLOITING A USE-AFTER-FREE IN ADOBE READER</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;9&#x2F;2&#x2F;cve-2020-9715-exploiting-a-use-after-free-in-adobe-readerCVE-2020-9715AdobeReader UAF漏洞分析</span><br></pre></td></tr></table></figure><p>•Vulnerability Discovery in Open Source Libraries: Analyzing CVE-2020-11863</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mcafee.com&#x2F;blogs&#x2F;other-blogs&#x2F;mcafee-labs&#x2F;vulnerability-discovery-in-open-source-libraries-analyzing-cve-2020-11863&#x2F;CVE-2020-11863 libEMF漏洞分析</span><br></pre></td></tr></table></figure><p>•How Do Generators… Generate, In SpiderMonkey?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mgaudet.ca&#x2F;technical&#x2F;2020&#x2F;9&#x2F;1&#x2F;how-do-generators-generate-in-spidermonkeySpiderMonkeyGenerators原理分析</span><br></pre></td></tr></table></figure><p>•Exploit for <a href="https://bugs.chromium.org/p/chromium" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;trEQJgliUck&amp;feature&#x3D;youtu.be</span><br><span class="line">https:&#x2F;&#x2F;bugs.chromium.org&#x2F;p&#x2F;chromium&#x2F;issues&#x2F;detail?id&#x3D;1068395Issue1068395在安卓平台上的利用视频</span><br></pre></td></tr></table></figure><p>•JITSploitation I: A JIT Bug</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;09&#x2F;jitsploitation-one.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;09&#x2F;jitsploitation-two.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;09&#x2F;jitsploitation-three.htmlproject zero</span><br><span class="line"></span><br><span class="line">关于jsc漏洞利用以及jsc缓解机制绕过系列文章</span><br></pre></td></tr></table></figure><p>•SIMPLE BUGS WITH COMPLEX EXPLOITS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.elttam.com&#x2F;blog&#x2F;simple-bugs-with-complex-exploits&#x2F;#contentv8 Issue2046详细分析</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•CVE-2020-7460: FREEBSD KERNEL PRIVILEGE ESCALATION</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;9&#x2F;1&#x2F;cve-2020-7460-freebsd-kernel-privilege-escalationCVE-2020-7460FreeBSD内核提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Advancing Windows Security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;query.prod.cms.rt.microsoft.com&#x2F;cms&#x2F;api&#x2F;am&#x2F;binary&#x2F;RE37dMCBluehatShanghai2019上Microsoft OS SecurityGroupManager关于windows安全机制的silde</span><br></pre></td></tr></table></figure><p>•DNS Server远程代码执行(CVE-2020-1350)【附DEMO视频】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s__biz&#x3D;MzUyMDEyNTkwNA&#x3D;&#x3D;&amp;mid&#x3D;2247484522&amp;idx&#x3D;1&amp;sn&#x3D;502839af26daa450f644488d75f42cc7&amp;chksm&#x3D;f9ee68d5ce99e1c37960b7909b5e5cc40f38c9b71711309ee679f0819c10218c1f411976ad6c&amp;scene&#x3D;126&amp;sessionid&#x3D;1598960570&amp;key&#x3D;7adf10a6617c6315506261e47c83d49da426185a83a97372680c51010cd9f8a9b7d827f8ce99f66a6a037a0e51e31792a56cebcaeb5dc0397f92e90c443832a945cc89d1d4fc750e1cd43c30783fc7f9e08c7694e22d7f0dc1bff61b42ff65d359c70b50ecbe5031962b57b47eda33f6e7a61941d4c2016c630eeeddbfe5840a&amp;ascene&#x3D;1&amp;uin&#x3D;MTE1NDEwMjc3NA%3D%3D&amp;devicetype&#x3D;Windows+10+x64&amp;version&#x3D;62090514&amp;lang&#x3D;en&amp;exportkey&#x3D;A9HOqRA5mpcUuAp59geFMeQ%3D&amp;pass_ticket&#x3D;C6B3Q%2FKQ1%2FUbGev7ZeEeTKkGew3nmNhXz3pU3Wex0luSd%2FRuu%2BJ716bUqCZs4JbG</span><br></pre></td></tr></table></figure><p>•CVE-2020-0986: Windows splwow64 Untrusted Pointer Dereference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;p&#x2F;rca-cve-2020-0986.htmlproject zero关于CVE-2020-0986 windows提权漏洞的分析</span><br></pre></td></tr></table></figure><p>•security things in Linux v5.6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;outflux.net&#x2F;blog&#x2F;archives&#x2F;2020&#x2F;09&#x2F;02&#x2F;security-things-in-linux-v5-6&#x2F;linux v5.6安全机制分析</span><br></pre></td></tr></table></figure><p>•Exploit Protection Reference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;security&#x2F;threat-protection&#x2F;microsoft-defender-atp&#x2F;exploit-protection-referencewindows官方关于防护机制的说明</span><br></pre></td></tr></table></figure><p>•Bypass AMSI by manual modification</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;s3cur3th1ssh1t.github.io&#x2F;Bypass_AMSI_by_manual_modification&#x2F;绕过AMSI机制</span><br></pre></td></tr></table></figure><p>•Windows 10 x64 1909 (OS Build 18363.719) • 10.0.18362.719 (WinBuild.160101.0800) • Out Of Bound Read and Write</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cpr-zero.checkpoint.com&#x2F;vulns&#x2F;cprid-2154&#x2F;CVE-2020-1247漏洞分析</span><br></pre></td></tr></table></figure><p>•Operation PowerFall: CVE-2020-0986 and variants</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securelist.com&#x2F;operation-powerfall-cve-2020-0986-and-variants&#x2F;98329&#x2F;CVE-2020-0986漏洞分析</span><br></pre></td></tr></table></figure><p>•This Font is not Your Type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;starlabs.sg&#x2F;blog&#x2F;2020&#x2F;09&#x2F;this-font-is-not-your-type&#x2F;苹果相关系统中libFontParser.dylib库字体漏洞分析</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Reverse Engineering: Marvel’s Avengers - Developing a Server Emulator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;krystalgamer.github.io&#x2F;avengers-emulator&#x2F;逆向分析Marvel&#39;s Avengers</span><br></pre></td></tr></table></figure><p>•Malware Development Pt. 1: Dynamic Module Loading in Go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;posts.specterops.io&#x2F;malware-development-pt-1-dynamic-module-loading-in-go-1121f07f3a5aGo语言中的动态模块加载</span><br></pre></td></tr></table></figure><p>•AN EXHAUSTIVELY-ANALYZED IDB FOR COMRAT V4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.msreverseengineering.com&#x2F;blog&#x2F;2020&#x2F;8&#x2F;31&#x2F;an-exhaustively-analyzed-idb-for-comrat-v4COMRAT V4逆向分析</span><br></pre></td></tr></table></figure><p>•The Art of Port Scanning</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;phrack.org&#x2F;issues&#x2F;51&#x2F;11.html23年前nmap团队发表在phrack杂志上关于端口扫描的文章</span><br></pre></td></tr></table></figure><p>•Injecting to Remote Process via Thread Hijacking</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.ired.team&#x2F;offensive-security&#x2F;code-injection-process-injection&#x2F;injecting-to-remote-process-via-thread-hijacking通过ThreadHijacking实现进程注入</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.9.7-9.13一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.9.7-9.13%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.9.7-9.13%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-7-9-13一周安全知识动态"><a href="#2020-9-7-9-13一周安全知识动态" class="headerlink" title="2020.9.7-9.13一周安全知识动态"></a>2020.9.7-9.13一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Google CTF 2020 teleport Chromium sandbox escape</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;trungnguyen1909.github.io&#x2F;blog&#x2F;post&#x2F;GGCTF20&#x2F;谷歌CTF2020 teleport Chromium沙箱逃逸writeup</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•Microsoft Hyper-V Stack Overflow Denial of Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.bluefrostsecurity.de&#x2F;advisories&#x2F;bfs-sa-2020-001&#x2F;Hyper-V 栈溢出漏洞poc</span><br></pre></td></tr></table></figure><p>•Microsoft Hyper-V NULL Pointer Dereference Denial of Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.bluefrostsecurity.de&#x2F;advisories&#x2F;bfs-sa-2020-002&#x2F;Hyper-V空指针引用poc</span><br></pre></td></tr></table></figure><p>•Microsoft Hyper-V Type Confusion leading to Arbitrary Memory Dereference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.bluefrostsecurity.de&#x2F;advisories&#x2F;bfs-sa-2020-003&#x2F;Hyper-V 类型混淆漏洞</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•F5 BIG-IP Remote Code Execution Exploit – CVE-2020-5902</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.criticalstart.com&#x2F;f5-big-ip-remote-code-execution-exploit&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Critical-Start&#x2F;Team-Ares&#x2F;tree&#x2F;master&#x2F;CVE-2020-5902CVE-2020-5902 </span><br><span class="line">F5 BIG-IP远程代码执行漏洞分析以及exp</span><br></pre></td></tr></table></figure><p>•HACKER NIGHTMARES GIVING HACKERS A HEADACHE WITH EXPLOIT MITIGATIONS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;azeria-labs.com&#x2F;downloads&#x2F;Keynote_ArmResearchSummit2020_Azeria.pdfARM安全机制研究slide</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•echo_googlequals2020</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;saaramar&#x2F;echo_googlequals2020Google ctf 2020 echo writeup</span><br></pre></td></tr></table></figure><p>•google-ctf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;google-ctf&#x2F;tree&#x2F;master&#x2F;2020&#x2F;qualsgoogle-ctf 2020题目开源</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Escalating PHP Deserialization</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vkili.github.io&#x2F;blog&#x2F;insecure%20deserialization&#x2F;unserialize-exploits&#x2F;php反序列化利用</span><br></pre></td></tr></table></figure><p>•Implementing Cloud Security Best Practices</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.tripwire.com&#x2F;solutions&#x2F;cloud-cybersecurity&#x2F;cloud-security-best-practices-report&#x2F;?utm_source&#x3D;twitter&amp;utm_medium&#x3D;ads&amp;utm_campaign&#x3D;cloud云安全分析</span><br></pre></td></tr></table></figure><p>•Abusing dynamic groups in Azure AD for privilege escalation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mnemonic.no&#x2F;blog&#x2F;abusing-dynamic-groups-in-azure&#x2F;Azure AD提权分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Bruteforce Attacks and Bypassing Rate Limits with Fireprox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;it_V3ig1_4oWeb漏洞挖掘系列视频</span><br></pre></td></tr></table></figure><p>•[Fuzzing with WinAFL] Fuzzing a simple C program using WinAFL on windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hardik05.wordpress.com&#x2F;2020&#x2F;09&#x2F;06&#x2F;fuzzing-with-winafl-fuzzing-a-simple-c-program-using-winafl-on-windows&#x2F;winafl fuzz 简单c程序</span><br></pre></td></tr></table></figure><p>•Stateful Fuzzing with Snapshots</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hexgolems.com&#x2F;talks&#x2F;fuzzcon2020.pdffuzzcon2020上关于《StatefulFuzzingwithSnapshots》的slide</span><br></pre></td></tr></table></figure><p>•Fuzzing JavaScript Engines with Fuzzilli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.doyensec.com&#x2F;2020&#x2F;09&#x2F;09&#x2F;fuzzilli-jerryscript.html修改fuzzilli fuzz js的文章</span><br></pre></td></tr></table></figure><p>•TinyInst</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;googleprojectzero&#x2F;TinyInstP0 开源了macos fuzz插桩工具TinyInst</span><br></pre></td></tr></table></figure><p>•Christian Holler: The Human Component in Bug Finding @FuzzCon Europe 2020</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;ifc2C5fLIWUFuzzCon2020《TheHumanComponentinBugFinding》议题视频</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•ARM64 Reversing and Exploitation Part 1 - ARM Instruction Set + Simple Heap Overflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;highaltitudehacks.com&#x2F;2020&#x2F;09&#x2F;05&#x2F;arm64-reversing-and-exploitation-part-1-arm-instruction-set-heap-overflow&#x2F;ARM64逆向及漏洞利用系列第一篇</span><br></pre></td></tr></table></figure><p>•ARM64 Reversing and Exploitation Part 2 - Use After Free</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;highaltitudehacks.com&#x2F;2020&#x2F;09&#x2F;06&#x2F;arm64-reversing-and-exploitation-part-2-use-after-free&#x2F;ARM64逆向及漏洞利用系列第二篇</span><br></pre></td></tr></table></figure><p>•ARM64 Reversing and Exploitation Part 3 - A Simple ROP Chain</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;highaltitudehacks.com&#x2F;2020&#x2F;09&#x2F;06&#x2F;arm64-reversing-and-exploitation-part-3-a-simple-rop-chain&#x2F;ARM64逆向及漏洞利用系列第三篇</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•UBUNTU PPP’S CVE-2020-15704 WRAP-UP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;publications&#x2F;ubuntu-ppps-cve-2020-15704-wrap-upCVE-2020-15704 upnp提权漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2018-8453 从BSOD到ExpLoit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.whsgwl.net&#x2F;blog&#x2F;CVE-2018-8453_0.htmlhttps:&#x2F;&#x2F;www.whsgwl.net&#x2F;blog&#x2F;CVE-2018-8453_1.html</span><br></pre></td></tr></table></figure><p>•CVE-2019-1458: Going from ‘in the wild report’ to POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;piotrflorczyk&#x2F;cve-2019-1458_POCCVE-2019-1458本地提权漏洞poc</span><br></pre></td></tr></table></figure><p>•Attacking the Qualcomm Adreno GPU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;09&#x2F;attacking-qualcomm-adreno-gpu.htmlp0关于攻击QualcommAdreno GPU的文章</span><br></pre></td></tr></table></figure><p>•WSUS Attacks Part 2: CVE-2020-1013 a Windows 10 Local Privilege Escalation 1-Day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.gosecure.net&#x2F;blog&#x2F;2020&#x2F;09&#x2F;08&#x2F;wsus-attacks-part-2-cve-2020-1013-a-windows-10-local-privilege-escalation-1-day&#x2F;CVE-2020-1013 win10提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Tencent Keen Security Lab 5G Security Research Demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Ca9lPMMToi0&amp;feature&#x3D;youtu.be科恩实验室关于5G漏洞研究成果视频</span><br></pre></td></tr></table></figure><p>•The short story of 1 Linux Kernel Use-After-Free bug and 2 CVEs (CVE-2020-14356 and CVE-2020-25220)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;blog.pi3.com.pl&#x2F;?p&#x3D;720CVE-2020-14356以及CVE-2020-25220漏洞分析</span><br></pre></td></tr></table></figure><p>•Introduction to Inside XNU.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;h3adsh0tzz.com&#x2F;2020&#x2F;09&#x2F;inside-xnu-introduction&#x2F;XNU介绍</span><br></pre></td></tr></table></figure><p>•Introduction to iBoot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;h3adsh0tzz.com&#x2F;inside-xnu&#x2F;iboot&#x2F;introiBoot介绍</span><br></pre></td></tr></table></figure><p>•iBoot Tasks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;h3adsh0tzz.com&#x2F;inside-xnu&#x2F;iboot&#x2F;tasks</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•TREVORspray</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;blacklanternsecurity&#x2F;TREVORspraywindows password spraying工具</span><br></pre></td></tr></table></figure><p>•aes-finder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;mmozeiko&#x2F;aes-finder在进程中查找aes密钥的工具</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•How to speed up the Rust compiler one last time</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.mozilla.org&#x2F;nnethercote&#x2F;2020&#x2F;09&#x2F;08&#x2F;how-to-speed-up-the-rust-compiler-one-last-time&#x2F;rust编译器性能提升分析</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.9.14-9.20一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.9.14-9.20%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.9.14-9.20%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-14-9-20一周安全知识动态"><a href="#2020-9-14-9-20一周安全知识动态" class="headerlink" title="2020.9.14-9.20一周安全知识动态"></a>2020.9.14-9.20一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•[compiler] Fix bug in SimplifiedLowering’s overflow computation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;v8&#x2F;v8&#x2F;+&#x2F;e371325bcb03f20a362ebfa48225159702c6fde7SimplifiedLowering-0处理不当</span><br></pre></td></tr></table></figure><p>•Firefox for Android LAN-Based Intent Triggering</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gitlab.com&#x2F;gitlab-com&#x2F;gl-security&#x2F;security-operations&#x2F;gl-redteam&#x2F;red-team-tech-notes&#x2F;-&#x2F;tree&#x2F;master&#x2F;firefox-android-2020针对firefox安卓端 Lan网段的攻击利用脚本</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•OneFuzz - A self-hosted Fuzzing-As-A-Service platform</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;onefuzz</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•CSAW CTF Quals 2020 Writeups</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ptr-yudai.hatenablog.com&#x2F;entry&#x2F;2020&#x2F;09&#x2F;14&#x2F;181939https:&#x2F;&#x2F;github.com&#x2F;perfectblue&#x2F;ctf-writeups&#x2F;tree&#x2F;master&#x2F;2020&#x2F;csaw-quals-2020csaw-quals-2020 writeup</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•SRC-2020-0019 : Microsoft Exchange Server DlpUtils AddTenantDlpPolicy Remote Code Execution Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;srcincite.io&#x2F;advisories&#x2F;src-2020-0019&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;srcincite.io&#x2F;pocs&#x2F;cve-2020-16875.ps1.txthttps:&#x2F;&#x2F;srcincite.io&#x2F;pocs&#x2F;cve-2020-16875.py.txtcve-2020-16875ExchangeServerDlpUtilsAddTenantDlpPolicy RCE漏洞公告及poc</span><br></pre></td></tr></table></figure><p>•Espressif ESP32: Bypassing Flash Encryption (CVE-2020-15048)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;raelize.com&#x2F;posts&#x2F;espressif-systems-esp32-bypassing-flash-encryption&#x2F;CVE-2020-15048绕过Flash加密漏洞分析</span><br></pre></td></tr></table></figure><p>•MemFuck: Bypassing User-Mode Hooks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;winternl.com&#x2F;memfuck&#x2F;绕过User-ModeHook</span><br></pre></td></tr></table></figure><p>•CVE-2020-9964 - An iOS infoleak</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;muirey03.blogspot.com&#x2F;2020&#x2F;09&#x2F;cve-2020-9964-ios-infoleak.htmlIOS信息泄露漏洞CVE-2020-9964分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-1472 Zerologon exploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;nccgroup&#x2F;nccfsas&#x2F;tree&#x2F;main&#x2F;Tools&#x2F;SharpZeroLogonhttps:&#x2F;&#x2F;github.com&#x2F;BC-SECURITY&#x2F;Invoke-ZeroLogonhttps:&#x2F;&#x2F;www.lares.com&#x2F;blog&#x2F;from-lares-labs-defensive-guidance-for-zerologon-cve-2020-1472&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.secura.com&#x2F;blog&#x2F;zero-logonCVE-2020-1472Zerologon利用脚本及漏洞分析</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•How I Hacked Facebook Again! Unauthenticated RCE on MobileIron MDM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;iamnoooob&#x2F;CVE-Reverse&#x2F;tree&#x2F;master&#x2F;CVE-2020-15505https:&#x2F;&#x2F;blog.orange.tw&#x2F;2020&#x2F;09&#x2F;how-i-hacked-facebook-again-mobileiron-mdm-rce.htmlMobileiron MDM RCE CVE-2020-15505 poc及writeup</span><br></pre></td></tr></table></figure><p>•Zerologon: instantly become domain admin by subverting Netlogon cryptography (CVE-2020-1472)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.secura.com&#x2F;blog&#x2F;zero-logonCVE-2020-1472Zerologon提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Clash of the (Spam)Titan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sensepost.com&#x2F;blog&#x2F;2020&#x2F;clash-of-the-spamtitan&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;sensepost&#x2F;ClashofSpamTitanSpamTitanGateway漏洞挖掘</span><br></pre></td></tr></table></figure><p>•CVE-2020-9496: RCE IN APACHE OFBIZ XMLRPC VIA DESERIALIZATION OF UNTRUSTED DATA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;9&#x2F;14&#x2F;cve-2020-9496-rce-in-apache-ofbiz-xmlrpc-via-deserialization-of-untrusted-dataApacheOFBiz CVE-2020-9496 RCE 分析</span><br></pre></td></tr></table></figure><p>•POSTGRESQL CODE EXECUTION: UDF REVISITED</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@afinepl&#x2F;postgresql-code-execution-udf-revisited-3b08412f47c1POSTGRESQL 代码执行分析</span><br></pre></td></tr></table></figure><p>•Aruba Clearpass RCE (CVE-2020-7115)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;dozer.nz&#x2F;posts&#x2F;aruba-clearpass-rceArubaClearPassPolicyManager&lt;&#x3D; 6.9.0免认证CVE-2020-7115漏洞分析</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•Symbolizer - A fast execution trace symbolizer for Windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;0vercl0k&#x2F;symbolizerwindows trace symbolizer 工具</span><br></pre></td></tr></table></figure><p>•Reverse Shell Generator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;weibell.github.io&#x2F;reverse-shell-generator&#x2F;在线反弹shell生成器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.9.21-9.27一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.9.21-9.27%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.9.21-9.27%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-21-9-27一周安全知识动态"><a href="#2020-9-21-9-27一周安全知识动态" class="headerlink" title="2020.9.21-9.27一周安全知识动态"></a>2020.9.21-9.27一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Resmack: Part 2: Full Fuzzer Detour</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;narly.me&#x2F;posts&#x2F;resmack-detour-full-fuzzer-experiment&#x2F;用resmack来做fuzzer</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•Official solution for 0CTF/TCTF 2020 Finals challenge Emoji Revenge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gist.github.com&#x2F;0xKira&#x2F;077cd03ffd5273dd566533dd8e02824b0CTF&#x2F;TCTF 2020决赛EmojiRevenge官方writeup</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Fuzzing V8 Engine JavaScript WebAssembly API using Dharma</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;academy.fuzzinglabs.com&#x2F;fuzzing-v8-engine-javascript-webassembly-api-using-dharma使用Dharma fuzz v8的WebAssembly API</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•VMware Workstation: Attack surface through Virtual Printer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.khonggianmang.vn&#x2F;vmware-workstation-attack-surface-through-virtual-printer&#x2F;VMware逃逸漏洞CVE-2020-3989以及CVE-2020-3990分析</span><br></pre></td></tr></table></figure><p>•Cloud Network Security 101: Azure Virtual Network Service Endpoints</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.fugue.co&#x2F;blog&#x2F;cloud-network-security-101-azure-virtual-network-service-endpointsAzure虚拟网络服务终端部署</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Writing an iOS Kernel Exploit from Scratch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;secfault-security.com&#x2F;blog&#x2F;chain3.htmlios kernel 利用</span><br></pre></td></tr></table></figure><p>•CVE-2020-1350 Windows DNS Server • 10.0.17763.1075 (WinBuild.160101.0800) • Integer Overflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cpr-zero.checkpoint.com&#x2F;vulns&#x2F;cprid-2156&#x2F;Windows DNS Server CVE-2020-1350整数溢出漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-9964 - An iOS infoleak</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;muirey03.blogspot.com&#x2F;2020&#x2F;09&#x2F;cve-2020-9964-ios-infoleak.html?m&#x3D;1CVE-2020-9964  iOS信息泄露漏洞分析</span><br></pre></td></tr></table></figure><p>•Containing a Real Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gvisor.dev&#x2F;blog&#x2F;2020&#x2F;09&#x2F;18&#x2F;containing-a-real-vulnerability&#x2F;CVE-2020-14386 linux提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Code Execution Vulnerability in Instagram App for Android and iOS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;research.checkpoint.com&#x2F;2020&#x2F;instagram_rce-code-execution-vulnerability-in-instagram-app-for-android-and-ios&#x2F;Instagram安卓以及iOS端代码执行漏洞分析</span><br></pre></td></tr></table></figure><p>•Kernel exploitation: weaponizing CVE-2020-17382 MSI Ambient Link driver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.matteomalvica.com&#x2F;blog&#x2F;2020&#x2F;09&#x2F;24&#x2F;weaponizing-cve-2020-17382&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;uf0o&#x2F;CVE-2020-17382CVE-2020-17382 windows 内核漏洞分析及poc</span><br></pre></td></tr></table></figure><p>•Exploiting SIGRed (CVE-2020–1350) on Windows Server 2012/2016/2019</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@datafarm.cybersecurity&#x2F;exploiting-sigred-cve-2020-1350-on-windows-server-2012-2016-2019-80dd88594228SIGRed(CVE-2020–1350)在Windows server 2012&#x2F;2016&#x2F;2019中的利用</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Local Privilege Escalation in Fortinet SSL VPN client for Linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;sites&#x2F;default&#x2F;files&#x2F;2020-09&#x2F;fortinet_sslvpn_client_lpe.pdfFortinet SSL VPN linux客户端本地提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Pandora FMS 742: Critical Code Vulnerabilities Explained</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.sonarsource.com&#x2F;pandora-fms-742-critical-code-vulnerabilities-explainedPandora FMS 认证前命令注入漏洞</span><br></pre></td></tr></table></figure><p>•IBM QRadar Wincollect Escalation of Privilege (CVE-2020-4485 &amp; CVE-2020-4486)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.redyops.com&#x2F;index.php&#x2F;2020&#x2F;09&#x2F;11&#x2F;ibm-qradar-wincollect-escalation-of-privileges-cve-2020-4485-cve-2020-4486&#x2F;IBM QRadarWincollect本地提权漏洞CVE-2020-4485以及CVE-2020-4486分析</span><br></pre></td></tr></table></figure><p>•uTorrent CVE-2020-8437 Vulnerability And Exploit Overview</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.whtaguy.com&#x2F;2020&#x2F;09&#x2F;utorrent-cve-2020-8437-vulnerability.htmluTorrent CVE-2020-8437漏洞利用分析</span><br></pre></td></tr></table></figure><p>•Java RMI for pentesters: structure, recon and communication (non-JMX Registries).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@afinepl&#x2F;java-rmi-for-pentesters-structure-recon-and-communication-non-jmx-registries-a10d5c996a79Java RMI相关漏洞分析</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•One Part Steganography, Four Redirectors, and a Splash of C2!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@curtbraz&#x2F;one-part-steganography-four-redirectors-and-a-splash-of-c2-e13e5a65daa9使用二维码隐藏通信流量</span><br></pre></td></tr></table></figure><p>•Guy’s 30 Reverse Engineering Tips &amp; Tricks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.whtaguy.com&#x2F;2020&#x2F;04&#x2F;guys-30-reverse-engineering-tips-tricks.html30个逆向小技巧</span><br></pre></td></tr></table></figure><p>•UEFI Secure Boot Customization</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;media.defense.gov&#x2F;2020&#x2F;Sep&#x2F;15&#x2F;2002497594&#x2F;-1&#x2F;-1&#x2F;0&#x2F;CTR-UEFI-SECURE-BOOT-CUSTOMIZATION-20200915.PDF&#x2F;CTR-UEFI-SECURE-BOOT-CUSTOMIZATION-20200915.PDFNSA关于UEFI SecureBoot的报告</span><br></pre></td></tr></table></figure><p>•BLUR attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hexhive.epfl.ch&#x2F;BLURtooth&#x2F;CVE-2020-15802蓝牙漏洞分析</span><br></pre></td></tr></table></figure><p>•How to Build a Hacking VPS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@robertscocca&#x2F;how-to-build-a-hacking-vps-44159f1eb55c如何配置一个用来搞事情的VPS</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•Impost3r: A linux password thief</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securityonline.info&#x2F;impost3r-a-linux-password-thief&#x2F;linux密码提取工具</span><br></pre></td></tr></table></figure><p>•NoSQLi - A Fast NoSQL Injection Scanner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nullsweep.com&#x2F;nosqli-a-fast-nosql-injection-framework&#x2F;NoSQL注入漏洞扫描器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SubLime 使用技巧|故障解决方案</title>
      <link href="/2020/07/07/SubLime-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7-%E6%95%85%E9%9A%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/07/07/SubLime-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7-%E6%95%85%E9%9A%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="date-2020-07-07-17-07-00"><a href="#date-2020-07-07-17-07-00" class="headerlink" title="date: 2020-07-07 17:07:00"></a>date: 2020-07-07 17:07:00</h2><h1 id="SubLime-使用技巧-故障解决方案"><a href="#SubLime-使用技巧-故障解决方案" class="headerlink" title="SubLime 使用技巧|故障解决方案"></a>SubLime 使用技巧|故障解决方案</h1><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><hr><h3 id="故障解决"><a href="#故障解决" class="headerlink" title="故障解决"></a>故障解决</h3><hr><h4 id="·-中文乱码"><a href="#·-中文乱码" class="headerlink" title="· 中文乱码"></a>· 中文乱码</h4><p>情况一：Western 与 UTF-8冲突</p><p>某些文本文件可能由notepad书写，notepad处理中文的方式一般是将其编码为<code>Western (Windows 1252)</code>。 如果这样的文件日后用sublime打开的话，中文可能在第一时间呈现乱码状态，（如下图）。但一段时间后sublime可以自动转换为正确的中文显示。但是，如果你在sublime仍处于中文乱码的情况下就匆忙输入一些中文并按下保存（sublime会提示<strong>编码冲突</strong>），或者直接保存，那么此时的中文乱码也被保存了，日后再次打开sublime，它就无法将这些乱码转换显示为正确的中文。</p><p>解决方案：</p><p>如图操作，先把文本文档重新保存为原编码，再重新打开就可以了。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200707172620978.png" alt="image-20200707172620978"></p><p>情况二：<a href="https://www.cnblogs.com/memset/archive/2013/05/29/3106999.html" target="_blank" rel="noopener">中文被编码成1个汉字4个字节</a></p>]]></content>
      
      
      <categories>
          
          <category> Sublime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Code Library</title>
      <link href="/2020/06/09/Python-Code-Library/"/>
      <url>/2020/06/09/Python-Code-Library/</url>
      
        <content type="html"><![CDATA[<p><i class="fa fa-code blink-slow"></i><em>convenient for code write</em></p><p><strong>爬虫代码初始化模板</strong> </p><hr><p><em>作用：requests爬虫脚本初始化代码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">""</span></span><br><span class="line">headers=&#123;&#125;</span><br><span class="line">proxies=&#123;</span><br><span class="line">   <span class="comment"># 'http': 'socks5://xxxx:5555',</span></span><br><span class="line">   <span class="comment">#  'https': 'socks5://xxxx:5555'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = requests.get(url_fix, proxies=proxies, headers=headers)</span><br><span class="line">soup = BeautifulSoup(result.content.decode(<span class="string">'utf-8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">target = soup.find(<span class="string">'div'</span>)</span><br></pre></td></tr></table></figure><p><strong>修正url中的#</strong> </p><hr><p><em>作用：防止待爬取目标的url中具有的#等特殊字符对爬虫进行干扰</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sharp_fix</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    the sharp (#) will incur some troubles in url</span></span><br><span class="line"><span class="string">    param: url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> url.find(<span class="string">'#'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        strs = url.split(<span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">if</span> is_chinese(strs[<span class="number">1</span>]):</span><br><span class="line">            fix = urllib.parse.quote(strs[<span class="number">1</span>])</span><br><span class="line">            fix = strs[<span class="number">0</span>] + <span class="string">'%23'</span> + fix</span><br><span class="line">            <span class="keyword">return</span> fix</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">return</span> url</span><br></pre></td></tr></table></figure><p><strong>判断字符串否包含中文</strong> </p><hr><p><em>作用：对字符串是否包含有中文字符进行判断</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_chinese</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    check whether the string includes the Chinese</span></span><br><span class="line"><span class="string">    param: string</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">u'\u4e00'</span> &lt;= ch &lt;= <span class="string">u'\u9fff'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyton code library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Code Library</title>
      <link href="/2020/06/09/Java-Code-Library/"/>
      <url>/2020/06/09/Java-Code-Library/</url>
      
        <content type="html"><![CDATA[<p><i class="fa fa-code blink-slow"></i><em>convenient for code write</em></p><p><strong>Java http post 代码(传递数据，使用Body传递)</strong> </p><hr><p><em>作用：使用java发起post请求,附带data于请求的Body中（非kv参数）</em></p><p><em>实例：模拟curl功能，可以将某些依托curl完成的数据库数据插入指令转换为java实现</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">http_post</span><span class="params">(String url, String port, String path, String content)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: ingest a address and send the content to it.</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Example</span> http://localhost:8428/write + content</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> url url address</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> port remote address port</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> path remote address path</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> content metric data</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       String result = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           url = url + <span class="string">":"</span> + port + <span class="string">"/"</span> + path;</span><br><span class="line">           System.out.println(url);</span><br><span class="line">           URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">           URLConnection conn = realUrl.openConnection();</span><br><span class="line">           conn.setRequestProperty(<span class="string">"accept"</span>, <span class="string">"*/*"</span>);</span><br><span class="line">           conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">           conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">           conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// fill and send content</span></span><br><span class="line">           DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(conn.getOutputStream());</span><br><span class="line">           dos.write(content.getBytes());</span><br><span class="line">           dos.flush();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// get response (Do not comment this line, or the data insertion will be failed)</span></span><br><span class="line">           BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line">           String line;</span><br><span class="line">           <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             result += line;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(result);<span class="comment">//</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           System.out.println(<span class="string">"Exception,"</span> + e.getMessage());</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java code library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker ToolBox设置及内外网访问</title>
      <link href="/2020/05/21/Docker-ToolBox%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%86%85%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
      <url>/2020/05/21/Docker-ToolBox%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%86%85%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-ToolBox设置及内外网访问"><a href="#Docker-ToolBox设置及内外网访问" class="headerlink" title="Docker ToolBox设置及内外网访问"></a>Docker ToolBox设置及内外网访问</h1><h3 id="环境版本"><a href="#环境版本" class="headerlink" title="环境版本"></a>环境版本</h3><hr><p>Docker-toolbox：<a href="https://github.com/docker/toolbox/releases/tag/v19.03.1" target="_blank" rel="noopener">v19.03.1</a></p><p>Boot2docker：<a href="https://github.com/boot2docker/boot2docker/releases/tag/v19.03.5" target="_blank" rel="noopener">v19.03.5</a></p><p>OS: Win 8.1</p><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><hr><p>在windows系列中如果想要运行docker，除了win10之后，所有的系统都需要下载docker-toolbox来实现docker的正确安装与运行。docker-toolbox的安装暂且不提，比较简单。</p><p>有一点要注意，安装完成之后，点击<strong>Docker Quickstart Terminal</strong>来实现docker的启动，这时他会检查本地是否有正确的boot2docker.iso文件，这个文件在安装位置的DockerToolbox文件夹下是有一个默认的（但版本不是最新的），你也可以自己去<a href="https://github.com/docker/toolbox/releases/tag/v19.03.1" target="_blank" rel="noopener">这里</a>下载最新的版本，随后将下载好的iso文件丢到<code>C:\Users\yourusername\.docker\machine\cache</code>下，切记位置要正确，因为<code>.docker\machine\cache</code>这个路径在电脑上不止有一个，还有一个是在<code>C:\Users\yourusername\AppData</code>下，不要放错了位置。成功放好之后，检查成功，docker就可以正确启动了。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521163240217.png" alt="大鲸鱼"></p><h3 id="镜像修改问题"><a href="#镜像修改问题" class="headerlink" title="镜像修改问题"></a>镜像修改问题</h3><hr><p>安装之后，需要修改docker镜像源以解决pull的速度太慢的问题，以<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云镜像加速服务</a>为例</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521163507216.png" alt="image-20200521163507216"></p><p>按照上图就可以解决源的问题，但一般在docker第一次启动时，default就已经被创建好了，所以你需要先↓</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine stop default</span><br><span class="line">$ docker-machine rm default</span><br></pre></td></tr></table></figure><p>把原先的机器删除之后，再按照阿里云的教程来做，不然会失败，提示default机器已存在。（当然你也可以不删除default，而是新建一个其他名字的机器也行）</p><h3 id="内外网访问问题"><a href="#内外网访问问题" class="headerlink" title="内外网访问问题"></a>内外网访问问题</h3><hr><p>docker-toolbox的原理是先生成一个由virtualbox模拟出的linux环境。在电脑中搜索点击virtualbox，打开之后就可以看到由toolbox生产的那个default机器</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521164050280.png" alt="image-20200521164050280"></p><p>如果以上都没问题，那么你离访问你想要的容器只差最后几步。</p><p>首先你需要现在命令行里pull你想要的容器，这个过程应该很快，只要你正确配置了源</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521164306797.png" alt="image-20200521164306797"></p><p>这里我以pull prometheus（开源时序数据库，端口为9090）为例，即以下面的命令运行prometheus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus</span><br></pre></td></tr></table></figure><p>这个时候你在自己的电脑上（宿主机）输入localhost:9090是访问不到容器的，这是因为目前docker容器所运行的环境不过是virtualbox的linux虚拟环境，此时就有两种方法可以让你成功访问到你想要的容器。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>先选中default机器（目标机器，这里我演示的时候用的是default），点击左上角设置，找到网络部分的端口转发规则，按照如下图方式填写，（192.168.99.100是默认的IP地址，如果你不确定你的IP地址是不是这个，你可以从<strong>Docker Quickstart Terminal</strong>启动后出现的大鲸鱼下面内找到你的默认IP地址)。按照如下规则填写之后，就可以直接在宿主机输入localhost:9090访问到想要的容器。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521164717285.png" alt="image-20200521164717285"></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>方法二过程没有那么麻烦，你不需要去配置网络，但是最后的访问可能比方法一要麻烦点。我们只需要将docker容器的启动命令修改为如下，（仍以prometheus启动为例）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### old : $ docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus</span></span><br><span class="line">$ docker run --name prometheus -d -p 9090:9090 prom/prometheus</span><br></pre></td></tr></table></figure><p>这个时候你就可以直接在宿主机的浏览器输入192.168.99.100:9090访问到你想要的容器内容。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub项目创建管理笔记</title>
      <link href="/2020/05/20/GitHub%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/20/GitHub%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub项目创建管理笔记"><a href="#GitHub项目创建管理笔记" class="headerlink" title="GitHub项目创建管理笔记"></a>GitHub项目创建管理笔记</h1><h3 id="pull-requests-与-merge"><a href="#pull-requests-与-merge" class="headerlink" title="pull requests 与 merge"></a>pull requests 与 merge</h3><hr><p>如果你想对他人的仓库代码有所贡献，首先你需要fork别人的仓库，随后将内容git clone到本地进行修改。以上过程推荐在Github Desktop的辅助下进行，（即使你命令行能力很强，desktop都有着很好的便捷性）</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520171045263.png" alt="image-20200520171045263"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520171403086.png" alt="image-20200520171403086"></p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520171459828.png" alt="image-20200520171459828" style="zoom: 67%;" /><p>通过上面三张图所展示的步骤，就完成了准备阶段。此时你就可以在本地直接对项目进行修改，你所对此项目做出的增删改都会被github desktop记录，位置如下图：</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520172605812.png" alt="image-20200520172605812"></p><p>当你确认你所有的修改都是符合你的意图的之后就可以点击commit，输入summary，description （summary是你对这次代码修改内容的一个概括性标题，description是详细描述，这些都是为了方便代码原有者最快了解你的修改意图）</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520172953739.png" alt="image-20200520172953739"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520173204934.png" alt="image-20200520173204934"></p><p>随后你就可以去浏览器上输入你刚刚fork之后生成的仓库地址，这时候就可以看到页面上有一个pull requests和compare，前者是把当前的改变提交给源仓库，后者是方便你再提交前再次确认一下你的改动内容。点击pull request之后，在跳转的页面再点击 create pull requests，之后整个过程就完成了。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520173825422.png" alt="image-20200520173825422"></p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520173900005.png" alt="image-20200520173900005" style="zoom:50%;" /><p>当然，这部分只是你这里完成了。源仓库持有者会审核你的这次commit，在审核完毕后，会手动同意并merge，你的贡献就达到了。</p><p>但是要注意，目前很多大型开源项目在接受pull requests前会先使用自动化的代码检测工具对你的这次代码改动进行检测，内容大概是：针对你的代码是否可执行，格式是否规范等等，只有全部测试成功，源仓库持有者才会手动同意你的这次代码贡献。（所以一定要看清源仓库提交代码贡献前要满足的条件）</p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520174432113.png" alt="image-20200520174432113" style="zoom: 67%;" /><h3 id="Rich-the-Project-Index"><a href="#Rich-the-Project-Index" class="headerlink" title="Rich the Project Index"></a>Rich the Project Index</h3><hr><p>自己的项目仓库成功创建之后，就需要好好充实一下<code>README.md</code>，所以markdown的排版美感一定要掌握。同时一些认证的badge也可以让你的源项目看起来更正式，同时这些badge背后的工具也可以让你发现代码里的不足。</p><p>你可以在<a href="https://github.com/marketplace" target="_blank" rel="noopener">这里</a>explore你想要的工具。下面介绍些常用的工具和使用方法</p><h4 id="0-Create-your-own-badge"><a href="#0-Create-your-own-badge" class="headerlink" title="0.  Create your own badge"></a>0.  Create your own badge</h4><p>有一些badge是需要你自己创造的，比如你当前项目的语言依赖性，这个只有你自己比较清楚，所以这个时候就要去<a href="https://shields.io/" target="_blank" rel="noopener">shield.io</a>上自己生成svg文件，随后拿到markdown链接，放在<code>README.md</code>里。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520201018369.png" alt="image-20200520201018369"></p><p>打开网页后找到此处，输入你想DIY的信息，例如我想声明该项目build with python3.5，那么就可以如下设置：</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520201043051.png" alt="image-20200520201043051"></p><p>之后再点击Make Badge,生成效果如图<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520201129814.png" alt="image-20200520201129814" style="zoom: 67%;" />。最后一步，复制地址栏中的url，复制到<code>README.md</code>里，done！（按理说url应该以.svg结尾，但是chrome最新版里我看不到svg字段，不知道是浏览器的原因还是它本身生成的url就不自带.svg后缀了，如果没有.svg，记得复制url后加上.svg，这样才可以正确显示)</p><h4 id="1-Travis-CI"><a href="#1-Travis-CI" class="headerlink" title="1. Travis-CI"></a>1. <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis-CI</a></h4><p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p><p>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码”集成”到主干。</p><p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p><p>以<strong>Python</strong>项目为例，当你的项目创建仓库成功后，登入travis-ci，关联你github账号，随后你就在travis-ci可以浏览到自己github里的仓库列表，而此时任何CI-task都不会生效的，因为你还需要在你的项目中添加一个 <code>.travis.yml</code> 文件，其具体编写格式详见<a href="https://docs.travis-ci.com/user/languages/python/" target="_blank" rel="noopener">此处</a>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"2.7"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.4"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.5"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.6"</span>      <span class="comment"># current default Python on Travis CI</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.7"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.8"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.8-dev"</span>  <span class="comment"># 3.8 development branch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"nightly"</span>  <span class="comment"># nightly build</span></span><br><span class="line"><span class="comment"># command to install dependencies</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.txt</span></span><br><span class="line"><span class="comment"># command to run tests</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pytest</span></span><br></pre></td></tr></table></figure><p>以上面的模板为例，通过k:v的方式就能很直白的读懂这个模板yml文件，<code>language</code>指定当前项目语言，之后再根据当前项目的语言类型选择它所要进行测试的版本号，随后的<code>install</code>则是安装一些必须的库依赖。<code>script</code>则是你执行这个项目的命令代码。</p><h4 id="2-Codecov"><a href="#2-Codecov" class="headerlink" title="2. Codecov"></a>2. <a href="https://codecov.io/" target="_blank" rel="noopener">Codecov</a></h4><p>它是负责你集成测试你的代码覆盖率的工具，常常与CI与code coverage配合使用，大致流程就是使用code coverage类的测试工具生成report，由codecov命令找到你这个report显示到它那里。</p><p>以codecov与上面的travis-ci相配合为例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.5"</span></span><br><span class="line"><span class="comment"># command to install dependencies</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.txt</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">coverage</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">codecov</span></span><br><span class="line"><span class="comment"># command to run tests</span></span><br><span class="line"><span class="attr">script:</span> <span class="string">python3</span> <span class="string">Main.py</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">coverage</span> <span class="string">run</span> <span class="string">Main.py</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">codecov</span></span><br></pre></td></tr></table></figure><p>注意这里的<code>after_success</code>，它的功能是在上面的<code>script</code>执行成功之后，才做出的一系列命令操作。可以看到首先用coverage run 执行我的主程序，这条命令结束之后，coverage report也就生成了，随后再使用codecov命令。通过上述操作，就可以codecov网站里找到对应的项目代码覆盖率信息报告，而此时你也可以在这个报告页面拿到你想要的badge。</p><h4 id="3-CodeFactor"><a href="#3-CodeFactor" class="headerlink" title="3. CodeFactor"></a>3. <a href="https://www.codefactor.io/" target="_blank" rel="noopener">CodeFactor</a></h4><p>代码结构分析，它会根据你的代码规范性来给出适当的评价。操作简单，无需多言，只要将它与github账户绑定，授权库的访问，就可以点击库列表中的某些库，分析出结果，随后拿到badge。</p><h4 id="4-To-be-continued……"><a href="#4-To-be-continued……" class="headerlink" title="4. To be continued……."></a>4. To be continued…….</h4><p>…………….</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/13/hello-world/"/>
      <url>/2020/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="初来乍到"><a href="#初来乍到" class="headerlink" title="初来乍到"></a>初来乍到</h2><h4 id="如果你有幸看到这"><a href="#如果你有幸看到这" class="headerlink" title="如果你有幸看到这"></a>如果你有幸看到这</h4><p>说明你很爱乱逛，这个博客不宣传不恰饭。写的都是my life，或者是学习经验。</p><p>整站主体语言是中文，有时候会夹杂些许英文。有时候会整篇都是英文，以此练手。</p><p>技术文章大部分都是真实可信的，写的技术点偏向细节，并且基本上都针对最新版本。</p><p>整个博客涉及的技术内容不限，我最近玩什么，尝试什么，就会写下来。</p><p>如果你在阅览我的博客主页或文章后有好的意见，或我有严重错误之处，<a href="https://simonhu-hn.github.io/about/" target="_blank" rel="noopener">请联系我</a>，多谢。</p><hr><p>本博客网站维护使用大致由下列工具与技术组成</p><p>├── Local<br>│   ├── <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a> （撰写与维护文本内容）<br>│   ├── <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> （图床，图片内容）</p><p>├── Online<br>│   ├── <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>（白嫖服务器）<br>│   ├── <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> （博客系统，SSH deploy部署，Hexo-admin 偶尔管理）<br>│   ├── <a href="http://wzpan.github.io/hexo-theme-freemind-blog/" target="_blank" rel="noopener">hexo-theme-freemind</a> （原生主题）<br>│   ├── <a href="https://matrix.to/#/!MHVhJvFpOwpTWazTnT:matrix.org?via=matrix.org" target="_blank" rel="noopener">FontAwesome</a>（图标库）<br>│   └── <a href="https://analytics.google.com/" target="_blank" rel="noopener">Google Analytics</a> </p><p>我的Brain提供主要技术支持。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记与备忘录</title>
      <link href="/2020/05/11/Python_Note/"/>
      <url>/2020/05/11/Python_Note/</url>
      
        <content type="html"><![CDATA[<h1 id="Python笔记与备忘录"><a href="#Python笔记与备忘录" class="headerlink" title="Python笔记与备忘录"></a>Python笔记与备忘录</h1><p>本页面记录本人在编写python项目时遇到的所有陷阱和技巧 （update forever）</p><h2 id="爬虫篇"><a href="#爬虫篇" class="headerlink" title="爬虫篇"></a>爬虫篇</h2><hr><h3 id="坑、陷阱-Pitfall"><a href="#坑、陷阱-Pitfall" class="headerlink" title="坑、陷阱 / Pitfall"></a>坑、陷阱 / Pitfall</h3><ol><li><h4 id="headers构造空格"><a href="#headers构造空格" class="headerlink" title="headers构造空格"></a>headers构造空格</h4><p>从浏览器开发者工具复制下来的<a href="#headers构造">headers</a>一定要注意把空格消除。不然会被视为invalid headers.</p></li><li><h4 id="selector规则构造"><a href="#selector规则构造" class="headerlink" title="selector规则构造"></a>selector规则构造</h4><p>如果以同样的select rule 应用于所有页面，最后的结果却是部分数据缺失，99%的情况都是这些页面上要么没有你的rule中构造好的id or class，要么就是rule中的id和class所应用在的元素和其他页面不一样。</p></li><li><h4 id="nth-of-type与-nth-child"><a href="#nth-of-type与-nth-child" class="headerlink" title="nth-of-type与:nth-child"></a>nth-of-type与:nth-child</h4><p>nth-of-type被Beautifulsoup支持，后者不被支持</p></li><li><h4 id="select规则书写规范"><a href="#select规则书写规范" class="headerlink" title="select规则书写规范"></a>select规则书写规范</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">The combinator &#39;x&#39; at postion xx, must have a selector before it</span><br><span class="line">此错误不是任何时候都会报错，但是要注意书写规范，在select rule不要多空格或者其他乱七八糟的字符在</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#39;.mw-parser-output &gt; ul:nth-of-type(&#123;&#125;) &gt; li a&#39; #正确写法</span><br><span class="line">&#39;.mw-parser-output  &gt; ul:nth-of-type(&#123;&#125;) &gt; li a&#39; #多了一个空格报错</span><br></pre></td></tr></table></figure></li><li><h4 id="中文字符显示不全"><a href="#中文字符显示不全" class="headerlink" title="中文字符显示不全"></a>中文字符显示不全</h4><p>原因在于网页大都采用UTF-8字符集，该字符集缺字严重，连国务院2013年8月19日公布的8105个通用规范汉字（均为简体汉字）都不能全部显示出来，共缺249个汉字，复其中4个二级字，245个三级字。</p><p>一种可行的解决方法是：以维基百科为例，如果你爬取的是简体页面，那么你可以尝试寻找该页面是否有繁体中文版本，繁体字被爬取下来的时候是可以正常显示的</p></li><li><h4 id="Url中的"><a href="#Url中的" class="headerlink" title="Url中的#"></a>Url中的#</h4><p>在scrapy爬虫框架中会自动过滤掉#后面的内容，网络请求的时候“#”后面的参数会被忽略，解决方法<a href="#处理url中的sharp">T-4</a>。</p></li></ol><h3 id="技巧-Tech"><a href="#技巧-Tech" class="headerlink" title="技巧 / Tech"></a>技巧 / Tech</h3><hr><ol><li><h6 id="headers构造"><a href="#headers构造" class="headerlink" title="headers构造"></a>headers构造</h6><p>构造请求头（headers）时，可以直接从chrome的调试工具处复制真实的请求头</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520153948246.png" alt="image-20200520153948246"></p><p>然后此时还需要一点小微操就可以正确使用，以Pycharm为例，按Ctrl+R调出Regex匹配模式</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520162051277.png" alt="image-20200520162051277"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分别输入</span><br><span class="line">(.*?):(.*)</span><br><span class="line">&#39;$1&#39;:&#39;$2&#39;</span><br></pre></td></tr></table></figure><p>此时带有正确引号包裹的一个个headers键值对就构造好了。</p></li><li><h6 id="url中文处理"><a href="#url中文处理" class="headerlink" title="url中文处理"></a>url中文处理</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">urllib.parse.unquote</span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">print(urllib.parse.unquote(<span class="string">'%B1%E0%C2%EB%BF%D3%B5%F9'</span>))</span><br><span class="line">坑爹</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">urllib.parse.quote</span><br><span class="line">print(urllib.parse.quote(<span class="string">'坑爹'</span>))</span><br><span class="line"><span class="string">'%B1%E0%C2%EB%BF%D3%B5%F9'</span></span><br></pre></td></tr></table></figure></li><li><h6 id="判断字符串中是否有中文字符"><a href="#判断字符串中是否有中文字符" class="headerlink" title="判断字符串中是否有中文字符"></a>判断字符串中是否有中文字符</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_chinese</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    check whether the string includes the Chinese</span></span><br><span class="line"><span class="string">    param: string</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">u'\u4e00'</span> &lt;= ch &lt;= <span class="string">u'\u9fff'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><h6 id="处理url中的sharp"><a href="#处理url中的sharp" class="headerlink" title="处理url中的sharp"></a>处理url中的sharp</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 处理url中的#号</span><br><span class="line"># 把#(sharp)转为%23</span><br><span class="line">def sharp_fix(url):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    the sharp (#) will incur some troubles in url</span><br><span class="line">    param: url</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if url.find(&#39;#&#39;) &gt;&#x3D; 0:</span><br><span class="line">        strs &#x3D; url.split(&#39;#&#39;)</span><br><span class="line">        if is_chinese(strs[1]):</span><br><span class="line">            fix &#x3D; urllib.parse.quote(strs[1])</span><br><span class="line">            fix &#x3D; strs[0] + &#39;%23&#39; + fix</span><br><span class="line">            return fix</span><br><span class="line">        return url</span><br><span class="line">    return url</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
